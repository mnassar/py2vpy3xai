lines of code,class,print(,__future__,xrange, range,"u""",print ,unicode(,__next__(,raw_input(,explanation
does position and orientation tracking of a vehicle,3,,,,,,,,,,
"global_mem=1,",3,,,,,,,,,,
read positions of the wheels (returns operations),3,,,,,,,,,,
"part_size = min(1016, rest)",3,,,,,,,,,,
port of left wheel (default: PORT_D),3,,,,,,,,,,
elif self.argument.domain:,3,,,,,,,,,,
raw_audio.write(audio),3,,,,,,,,,,
"self.start_move_for,",3,,,,,,,,,,
"raise exceptions.DfuSerialIOException(amount, len(data))",3,,,,,,,,,,
polar_check.append(data_date[i]),3,,,,,,,,,,
"assert isinstance(value, Number), \",3,,,,,,,,,,
"assert value == 0, \",3,,,,,,,,,,
"opUI_Write,",3,,,,,,,,,,
self.builder = None,3,,,,,,,,,,
self.layout2.addLayout(hbox1),3,,,,,,,,,,
except:,3,,,,,,,,,,
qr = self.frameGeometry(),3,,,,,,,,,,
from ev3_dc import EV3,3,,,,,,,,,,
sync_mode = STD,3,,,,,,,,,,
"LCX(target_pos_inner),",3,,,,,,,,,,
"speed_right = copysign(speed, diff_right)",3,,,,,,,,,,
"self._start_drive_turn,",3,,,,,,,,,,
"LCX(1),  # MODE (Seeker)",3,,,,,,,,,,
step1_left = int(factor**2 * step1_right),3,,,,,,,,,,
_EP_IN = 0x81  # Usb-Endpoints,3,,,,,,,,,,
def __repr__(self):,3,,,,,,,,,,
date_list=[] # Format: date,3,,,,,,,,,,
class SensorError(Exception):,3,,,,,,,,,,
self.polar_index_tmp=tk.IntVar(),3,,,,,,,,,,
"self._target_motor_pos.left + diff_pos[0],",3,,,,,,,,,,
"super(EphemeralHiddenService, self).__init__(self.service_id, controller)",3,,,,,,,,,,
"LVX(36),",3,,,,,,,,,,
"LCX(6),  # OFFSET",3,,,,,,,,,,
"opMath,  # b'\x8D'",3,,,,,,,,,,
return cur_angle,3,,,,,,,,,,
self._conn_owner = True,3,,,,,,,,,,
return sentval,3,,,,,,,,,,
tread:,3,,,,,,,,,,
"variable=self.time_delta_min_tmp,",3,,,,,,,,,,
"def params(self,p):",3,,,,,,,,,,
self.visit_if(branch),3,,,,,,,,,,
"console.print(f""[i] {len(fingerprints) or 'No'} fingerprints {f'and {len(hosts)}' if fingerprints else 'or'} hosts were found."")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"LVX(48),",3,,,,,,,,,,
return self._port_right,3,,,,,,,,,,
form = page1(),3,,,,,,,,,,
self._temperament = temperament,3,,,,,,,,,,
tracking_callback is None or,3,,,,,,,,,,
def savefile(self):,3,,,,,,,,,,
data += part,3,,,,,,,,,,
def _input():,3,,,,,,,,,,
def Create():,3,,,,,,,,,,
"def __init__(self, parent=None, width=5, height=4, dpi=100):",3,,,,,,,,,,
if rest_t < self._delta_time or abs(rest_pos) < 10:,3,,,,,,,,,,
"opJr_Eq32,  # b'\x6E'  already maximum speed",3,,,,,,,,,,
self.clear(),3,,,,,,,,,,
rest -= part_size,3,,,,,,,,,,
"verbosity=self._verbosity,",3,,,,,,,,,,
"self.set_proxy(socks.PROXY_TYPES[proxy.scheme.upper()], **kwargs)",3,,,,,,,,,,
freq *= 2,3,,,,,,,,,,
diff_positions,3,,,,,,,,,,
"global_mem=14, local_mem=61",3,,,,,,,,,,
load_command.add_argument(,3,,,,,,,,,,
"edTxt=tk.Entry(self, textvariable=self.proc_sh_tmp, width=20, borderwidth=2)",3,,,,,,,,,,
if self._port_left == PORT_A:,3,,,,,,,,,,
self._verbosity = int(verbosity),3,,,,,,,,,,
t = t[field],3,,,,,,,,,,
"EQ,",3,,,,,,,,,,
put a reply to the stack,3,,,,,,,,,,
degrees for ramp-up,3,,,,,,,,,,
"self._control,",3,,,,,,,,,,
"ALLE_MEINE_ENTCHEN,",3,,,,,,,,,,
elif self._port_left == PORT_C:,3,,,,,,,,,,
_ID_VENDOR_LEGO = 0x0694  # Usb-Identification of the device,3,,,,,,,,,,
REDCOLOR = 5,3,,,,,,,,,,
while chunk:,3,,,,,,,,,,
"LCX(0),  # MODE (Reflected)",3,,,,,,,,,,
"name of the sound file (may be without extension "".rsf"")",3,,,,,,,,,,
"self._ops_pos() + ops_move,",3,,,,,,,,,,
"return utils.function(p.NAME0,p.def_params,p.NAME1,p.statements)",3,,,,,,,,,,
degrees for ramp-down,3,,,,,,,,,,
"import sys, threading",3,,,,,,,,,,
radius_turn = (,3,,,,,,,,,,
string = string[1:-1],3,,,,,,,,,,
exists once per physical EV3 device,3,,,,,,,,,,
self._delta_time = value,3,,,,,,,,,,
"LSHIFT,",3,,,,,,,,,,
def temperament(self):,3,,,,,,,,,,
pause_start = None,3,,,,,,,,,,
"self.differentiated_services = (self.dscp, self.ecn)",3,,,,,,,,,,
hosts = set(),3,,,,,,,,,,
"LPAREN,",3,,,,,,,,,,
"assert isinstance(local_mem, int), \",3,,,,,,,,,,
"LVX(0),  # abs(all_inner - done_inner)",3,,,,,,,,,,
else:,3,,,,,,,,,,
"LCX(speed_right),  # SPEED",3,,,,,,,,,,
@ramp_up_time.setter,3,,,,,,,,,,
"tts = gtts.gTTS(txt, lang=lang, tld=tld, slow=slow)",3,,,,,,,,,,
dump.write(,3,,,,,,,,,,
"assert slow is None or isinstance(slow, bool), \",3,,,,,,,,,,
part = f.read(1017),3,,,,,,,,,,
ptr = params_ptr[i],3,,,,,,,,,,
self._host = host.upper(),3,,,,,,,,,,
"duration=duration,",3,,,,,,,,,,
if self._version:,3,,,,,,,,,,
"isinstance(tracking_callback, Callable)",3,,,,,,,,,,
raise DirCmdError(,3,,,,,,,,,,
speed_right *= min(,3,,,,,,,,,,
starts unlimited movement of the motor.,3,,,,,,,,,,
return RGBColor(,3,,,,,,,,,,
self._socket is not None and,3,,,,,,,,,,
"value = self.builder.mul(lhs,rhs)",3,,,,,,,,,,
"opOutput_Clr_Count,",3,,,,,,,,,,
self._polarity_right * step,3,,,,,,,,,,
class DfuException(Exception):,3,,,,,,,,,,
flags = [],3,,,,,,,,,,
"READY_RAW,",3,,,,,,,,,,
"from .color import Color, RGBColor, RawRGBColor",3,,,,,,,,,,
"self._tread,",3,,,,,,,,,,
time_delta_max=datetime.timedelta(days=time_delta_max),3,,,,,,,,,,
''',3,,,,,,,,,,
"DEL_SUBFOLDER,",3,,,,,,,,,,
"except (SysCmdError, AttributeError):",3,,,,,,,,,,
AF43 = 38 #High drop probability,3,,,,,,,,,,
min_gap = 0  # minimum (real) gap between peaces,3,,,,,,,,,,
elif self._port == PORT_C:,3,,,,,,,,,,
self._host in self._devices,3,,,,,,,,,,
Send a system command to the LEGO EV3,3,,,,,,,,,,
timespan between  introspections [s],3,,,,,,,,,,
"f'{self.protocol}',",3,,,,,,,,,,
elif values[n] == 5:,3,,,,,,,,,,
_ID_PRODUCT_EV3 = 0x0005,3,,,,,,,,,,
if self._physical_ev3 is not None:,3,,,,,,,,,,
"msg_cnt = my_ev3.send_direct_cmd(ops_get, global_mem=32)",3,,,,,,,,,,
yar3.append(int(y3)),3,,,,,,,,,,
return duration,3,,,,,,,,,,
hbox0.addWidget(self.titlePage2),3,,,,,,,,,,
) *,3,,,,,,,,,,
self._tracking.update(data),3,,,,,,,,,,
"LED_GREEN_FLASH,",3,,,,,,,,,,
self._offset = self.angle,3,,,,,,,,,,
if self._conn_owner and self._physical_ev3 is not None:,3,,,,,,,,,,
my_ev3.sync_mode = ev3.ASYNC,3,,,,,,,,,,
return self._temperament,3,,,,,,,,,,
"opJr_Gteq32,  # b'\x7A'",3,,,,,,,,,,
return self._ramp_up,3,,,,,,,,,,
resolver.nameservers = nameservers,3,,,,,,,,,,
"LED_RED,",3,,,,,,,,,,
"ev3.opCom_Get,",3,,,,,,,,,,
local_mem=5,3,,,,,,,,,,
GVX(0)  # VALUE1 (output),3,,,,,,,,,,
compiler = Compiler(),3,,,,,,,,,,
f.close(),3,,,,,,,,,,
elif self._polarity_right == -1:,3,,,,,,,,,,
if protocol == BLUETOOTH:,3,,,,,,,,,,
"type: 1 byte, SYSTEM_COMMAND_REPLY or SYSTEM_COMMAND_NO_REPLY",3,,,,,,,,,,
step1_right = int(factor**2 * step1_left),3,,,,,,,,,,
"LVX(56),  # speed_orig",3,,,,,,,,,,
"tones.tone_next,",3,,,,,,,,,,
) % 360 - 180,3,,,,,,,,,,
if duration is None:,3,,,,,,,,,,
"COLON,",3,,,,,,,,,,
freq = self._temperament,3,,,,,,,,,,
return True,3,,,,,,,,,,
hole_mmc = allowance + shaft_mmc,3,,,,,,,,,,
"LCX(speed),",3,,,,,,,,,,
return any(data[2:]),3,,,,,,,,,,
"MOD,",3,,,,,,,,,,
"opOutput_Time_Speed,",3,,,,,,,,,,
while True:,3,,,,,,,,,,
cfunc = CFUNCTYPE(c_int)(entry),3,,,,,,,,,,
"from core.modules import base, console",3,,,,,,,,,,
client.shutdown(socket.SHUT_RDWR),3,,,,,,,,,,
return self.pixmap.size(),3,,,,,,,,,,
"LCX(last_pos_outer),",3,,,,,,,,,,
AF11 = 10 #Low drop probability,3,,,,,,,,,,
"socket.AF_INET,",3,,,,,,,,,,
"SYNC - EV3 device is blocked and control comes back,",3,,,,,,,,,,
self._polarity_right * self._motor_pos[1] -,3,,,,,,,,,,
assert msg_cnt_1 in my_ev3._physical_ev3._reply_buffer,3,,,,,,,,,,
stop_it = True,3,,,,,,,,,,
"READY_PCT,  # CMD",3,,,,,,,,,,
"GVX(42),  # MAC",3,,,,,,,,,,
return unpack(,3,,,,,,,,,,
elif values[n] == 6:,3,,,,,,,,,,
if sdn:,3,,,,,,,,,,
"LCX(self._port_right),  # NOS",3,,,,,,,,,,
"LCX(step3_right),  # STEP3",3,,,,,,,,,,
"data, address = self.recvfrom(0xFFFF)",3,,,,,,,,,,
direction (sign) and angle (degrees) of movement,3,,,,,,,,,,
writef(data),3,,,,,,,,,,
return int(bumps),3,,,,,,,,,,
''',3,,,,,,,,,,
"LCX(speed),  # SPEED",3,,,,,,,,,,
if self._protocol == USB:,3,,,,,,,,,,
self.data_offset = self.ihl * 4,3,,,,,,,,,,
"SYSTEM_END_OF_FILE,",3,,,,,,,,,,
"LVX(44),  # done_inner as DATAF",3,,,,,,,,,,
self.compile(body),3,,,,,,,,,,
return self.get(url),3,,,,,,,,,,
del self.connections[address],3,,,,,,,,,,
) = [,3,,,,,,,,,,
if step2_left < 0:,3,,,,,,,,,,
EV3_TOUCH,3,,,,,,,,,,
self.groupBox2.setLayout(hvbox2),3,,,,,,,,,,
self.send_direct_cmd(,3,,,,,,,,,,
self._endless = endless,3,,,,,,,,,,
w = 0,3,,,,,,,,,,
"synchronization mode (STD, SYNC, ASYNC)",3,,,,,,,,,,
progress_update(int(100 * (size - size_remain) / size)),3,,,,,,,,,,
"scale1.grid(row=1, column=0, rowspan=3)",3,,,,,,,,,,
"result.append(Remote(False, True, False, False, False))",3,,,,,,,,,,
"sync mode (standard, asynchronous, synchronous)",3,,,,,,,,,,
"assert isinstance(polarity_right, int), \",3,,,,,,,,,,
None if values[2*n + 1] == -2147483648,3,,,,,,,,,,
"def error(self, t):",3,,,,,,,,,,
"assert isinstance(raw, Iterable) and len(raw) == 3, \",3,,,,,,,,,,
manifest_list=[],3,,,,,,,,,,
bar_thread = ProgressBarThread(endless=True),3,,,,,,,,,,
"resp = dns.query.udp(message, resolver.nameservers[0], **kwargs)",3,,,,,,,,,,
"return GyroState(angle - self._offset, rate)",3,,,,,,,,,,
"LCX(8),  # read 8 bytes (header only)",3,,,,,,,,,,
"return utils.until_block(p.statements,p.expr)",3,,,,,,,,,,
if reply is not None:,3,,,,,,,,,,
xar = [],3,,,,,,,,,,
cp = QDesktopWidget().availableGeometry().center(),3,,,,,,,,,,
self.path_s1a_cal_tmp=tk.StringVar(),3,,,,,,,,,,
direction=int(,3,,,,,,,,,,
"global data_date, polar, iw",3,,,,,,,,,,
"i for i, sector in enumerate(memory_map)",3,,,,,,,,,,
"GVX(12),  # VALUE4 - proximity channel 2",3,,,,,,,,,,
"EV3_LARGE_MOTOR,",3,,,,,,,,,,
def motor_type(self):,3,,,,,,,,,,
import subprocess,3,,,,,,,,,,
if len(EOF_check) != 0:,3,,,,,,,,,,
"LVX(56),  # all_outer = target_pos_outer - start_pos_outer",3,,,,,,,,,,
"reply_msg_cnt,",3,,,,,,,,,,
"result.append(Remote(False, True, False, False, True))",3,,,,,,,,,,
self._port_handle.flushOutput(),3,,,,,,,,,,
yar2 = [],3,,,,,,,,,,
"dfu.erase(address, size, memory_map)",3,,,,,,,,,,
"Create a socket, that holds a WiFi-connection to an EV3",3,,,,,,,,,,
"GVX(12),  # SOURCE1",3,,,,,,,,,,
if self.sensors_as_dict[port_motor_input(self._port_right)] not in (,3,,,,,,,,,,
chunk = private_key.read(0xFFF),3,,,,,,,,,,
def _control_periodic(self):,3,,,,,,,,,,
"variable=self.Not_s1a_cal_aux_tmp, onvalue=1, offvalue=0)",3,,,,,,,,,,
finally:,3,,,,,,,,,,
hbox1.addWidget(self.portLabel),3,,,,,,,,,,
"f'found EV3 device {serial_number}, but not {self._host}'",3,,,,,,,,,,
"opMove32_32,",3,,,,,,,,,,
"GET_OS_BUILD,",3,,,,,,,,,,
"opOutput_Test,  # b'\xA9'",3,,,,,,,,,,
assert msg_cnt_1 == my_ev3._physical_ev3._reply_buffer[msg_cnt_1][2:4],3,,,,,,,,,,
"CONTINUE_DOWNLOAD,",3,,,,,,,,,,
"LVX(52),  # ratio_all",3,,,,,,,,,,
if Not_s1a_cal_aux == 0:,3,,,,,,,,,,
"part_size = min(self._RW_MAX_SIZE, size_remain)",3,,,,,,,,,,
"return utils.if_stmt(p.statements0,p.statements1,p.expr)",3,,,,,,,,,,
self._tracking._motor_pos[1] + diff_pos[1],3,,,,,,,,,,
),3,,,,,,,,,,
@channel.setter,3,,,,,,,,,,
def prepare():,3,,,,,,,,,,
hvbox3.addLayout(hhbox3),3,,,,,,,,,,
data = None,3,,,,,,,,,,
"LED_OFF,",3,,,,,,,,,,
"os.link(tmp1,tmp2[-1])",3,,,,,,,,,,
return [p.statement],3,,,,,,,,,,
t = tree,3,,,,,,,,,,
"LCX(last_pos_inner),",3,,,,,,,,,,
self.key = key,3,,,,,,,,,,
"label=tk.Label(self,",3,,,,,,,,,,
"GVX(global_offset),  # BUSY (DATA8) - output",3,,,,,,,,,,
"opMove32_32,  # b'\x3A'",3,,,,,,,,,,
"from core.modules.console import print, pprint",3,,,,,,,,,,
self.tone(,3,,,,,,,,,,
"return f""Options(copied={self.copied}, opt_class={self.option_class}, opt_number={self.opt_number}, opt_length={self.opt_length}, opt_data={self.data})""",3,,,,,,,,,,
self.variables = previous_variables,3,,,,,,,,,,
value=i)),3,,,,,,,,,,
from .constants import *,3,,,,,,,,,,
self._abort(bar_thread),3,,,,,,,,,,
while data:,3,,,,,,,,,,
return bool(touched),3,,,,,,,,,,
if self._conn_owner:,3,,,,,,,,,,
current_pos = self.motor_pos,3,,,,,,,,,,
firmware = firmware_file.read(),3,,,,,,,,,,
rest_t = delta_t / delta_pos * rest_pos,3,,,,,,,,,,
"opFile,",3,,,,,,,,,,
self._polarity_right * self._motor_pos[1] -,3,,,,,,,,,,
def initUI2(self):,3,,,,,,,,,,
params = params[1:],3,,,,,,,,,,
"LCX(start_pos_outer),",3,,,,,,,,,,
"def while_block(body,test):",3,,,,,,,,,,
process = subprocess.Popen(,3,,,,,,,,,,
NXT_TOUCH = 1,3,,,,,,,,,,
return reply[6:],3,,,,,,,,,,
if sync_mode is None:,3,,,,,,,,,,
Dir_image=self.Dir_image_tmp.get(),3,,,,,,,,,,
self._physical_ev3 = None,3,,,,,,,,,,
PORT_D_SENSOR,3,,,,,,,,,,
Control directly comes back.,3,,,,,,,,,,
"opOutput_Test,",3,,,,,,,,,,
"EV3_COLOR,",3,,,,,,,,,,
"opAdd32,  # b'\x12'",3,,,,,,,,,,
self.initUI1(),3,,,,,,,,,,
"READY_RAW,",3,,,,,,,,,,
S1AB=S1AB[:3],3,,,,,,,,,,
return tuple(result),3,,,,,,,,,,
"setattr(self, key, getattr(self.descriptor, key))",3,,,,,,,,,,
verbosity=1,3,,,,,,,,,,
raise SysCmdError(,3,,,,,,,,,,
if self._port_left < self._port_right:,3,,,,,,,,,,
response.parsed = lambda: parse(response),3,,,,,,,,,,
reply to the system command,3,,,,,,,,,,
self._tracking.update(motor_pos),3,,,,,,,,,,
splash.setMask(splash_pix.mask()),3,,,,,,,,,,
import json,3,,,,,,,,,,
"LCX(2),  # MODE (Remote)",3,,,,,,,,,,
"PORT_D,",3,,,,,,,,,,
duration time for ramp-down [sec.],3,,,,,,,,,,
self.visit_until(branch),3,,,,,,,,,,
"sync_mode=ev3.SYNC,",3,,,,,,,,,,
def start_move_to(,3,,,,,,,,,,
"port_motor_input,",3,,,,,,,,,,
app.processEvents(),3,,,,,,,,,,
layout1.addLayout(hbox0),3,,,,,,,,,,
tts.write_to_fp(process.stdin),3,,,,,,,,,,
freq /= 2**(1/12),3,,,,,,,,,,
"target_pos[0],",3,,,,,,,,,,
"value = self.builder.sub(lhs,rhs)",3,,,,,,,,,,
"LVX(4),  # SOURCE - abs(diff) (DATAF)",3,,,,,,,,,,
font-size: 16pt;,3,,,,,,,,,,
"LCX(3),  # HARDWARE",3,,,,,,,,,,
"from core.modules import console, base",3,,,,,,,,,,
"fnty = ir.FunctionType(return_type,params_type)",3,,,,,,,,,,
read = socket.recv,3,,,,,,,,,,
return -1,3,,,,,,,,,,
"LCX(1),",3,,,,,,,,,,
port_settings = self._port_handle.getSettingsDict(),3,,,,,,,,,,
return cls._devices,3,,,,,,,,,,
from collections import namedtuple,3,,,,,,,,,,
"GT,",3,,,,,,,,,,
"LCX(ramp_up_ms),  # STEP1",3,,,,,,,,,,
my_ev3.sync_mode = ev3.STD,3,,,,,,,,,,
"opJr_Gt32,  # b'\x6A'",3,,,,,,,,,,
pos = size - rest,3,,,,,,,,,,
"reads current motor positions and busy state,",3,,,,,,,,,,
"LCX(self._port),  # NOS",3,,,,,,,,,,
self.titlePage1.setStyleSheet(titlestyle),3,,,,,,,,,,
from src.compiler.compiler import Compiler,3,,,,,,,,,,
if reply[4:5] == _SYSTEM_REPLY:,3,,,,,,,,,,
if not busy_inner and not busy_outer:,3,,,,,,,,,,
self._port_handle.flushInput(),3,,,,,,,,,,
f'found EV3 devices: {hosts} but not {self._host}',3,,,,,,,,,,
ax1.clear(),3,,,,,,,,,,
"LCX(step3),",3,,,,,,,,,,
msg_cnt = cmd[2:4],3,,,,,,,,,,
global clearance,3,,,,,,,,,,
sync_mode=SYNC,3,,,,,,,,,,
"assert local_mem <= 1019, \",3,,,,,,,,,,
"assert ev3_obj._physical_ev3 is not None, \",3,,,,,,,,,,
class Track(Program):,3,,,,,,,,,,
"value = self.builder.ashr(lhs,rhs)",3,,,,,,,,,,
pass  # directory already exists,3,,,,,,,,,,
"self.stop,",3,,,,,,,,,,
from audio_scraper import Audio_Scraper,3,,,,,,,,,,
"assert verbosity is None or 0 <= verbosity <= 2, \",3,,,,,,,,,,
start_time = time(),3,,,,,,,,,,
existing EV3 object (its connections will be used),3,,,,,,,,,,
"self.bind((address, port))",3,,,,,,,,,,
hhbox2.addStretch(),3,,,,,,,,,,
"sock, address = self.accept()",3,,,,,,,,,,
from core.modules.base import Program,3,,,,,,,,,,
"Whenever the speed changes, step2 must be recalculated and",3,,,,,,,,,,
"tk.Entry(self, textvariable=self.path_config_tmp, width=50, borderwidth=2),",3,,,,,,,,,,
response = self._port_handle.read(),3,,,,,,,,,,
"polarity of left motor rotation, values: -1, 1 (default)",3,,,,,,,,,,
"assert isinstance(value, int), \",3,,,,,,,,,,
mac address of EV3 device,3,,,,,,,,,,
tone = self._tones[self._pos][0],3,,,,,,,,,,
with true:,3,,,,,,,,,,
"LCX(0),  # LAYER",3,,,,,,,,,,
shaft_lmc = float(shaft_lmc),3,,,,,,,,,,
load_command.set_defaults(func=dfu_handler.load),3,,,,,,,,,,
plays a tone,3,,,,,,,,,,
step_right = Decimal(,3,,,,,,,,,,
firmware version,3,,,,,,,,,,
from .motor import Motor,3,,,,,,,,,,
ramp_up,3,,,,,,,,,,
"host=host,",3,,,,,,,,,,
parser: argparse.ArgumentParser = argparse.ArgumentParser(),3,,,,,,,,,,
"return utils.func_call(p.NAME,p.params)",3,,,,,,,,,,
"LCX(0),  # MODE (cm)",3,,,,,,,,,,
self.on_start(),3,,,,,,,,,,
"def COMMENT(self, t):",3,,,,,,,,,,
def sercon1(self):,3,,,,,,,,,,
"LVX(48),  # all_inner = target_pos_inner - start_pos_inner",3,,,,,,,,,,
"GVX(0),",3,,,,,,,,,,
"pause=pos - pause_start,",3,,,,,,,,,,
"msg_cnt,",3,,,,,,,,,,
"opCom_Set,",3,,,,,,,,,,
"available only for WiFi connected devices,",3,,,,,,,,,,
"level (0, 1, 2) of verbosity (prints on stdout)",3,,,,,,,,,,
raise e,3,,,,,,,,,,
"opMove32_F,  # b'\x3B'",3,,,,,,,,,,
"total duration in sec.,",3,,,,,,,,,,
value1 = values[1][3:],3,,,,,,,,,,
"Create a socket, that holds a bluetooth-connection to an EV3",3,,,,,,,,,,
"value = self.builder.fdiv(lhs,rhs)",3,,,,,,,,,,
"(0x8008080, 96478),",3,,,,,,,,,,
"LVX(0),  # DESTINATION - signed_speed (DATAF)",3,,,,,,,,,,
value2 = values[2][3:],3,,,,,,,,,,
"_DIRECT_COMMAND_NO_REPLY,",3,,,,,,,,,,
from stem.util import term,3,,,,,,,,,,
"copyfile(src2, src)",3,,,,,,,,,,
speed *= -1,3,,,,,,,,,,
"self,",3,,,,,,,,,,
for port in ports:,3,,,,,,,,,,
step2_right = 0,3,,,,,,,,,,
"Task object, that can be started, stopped and continued.",3,,,,,,,,,,
Keyword Arguments,3,,,,,,,,,,
ESD_YN=self.ESD_YN_tmp.get(),3,,,,,,,,,,
else:,3,,,,,,,,,,
font-family: Calibri;,3,,,,,,,,,,
if data_md5 == curr_md5:,3,,,,,,,,,,
"opJr_Gteq32,",3,,,,,,,,,,
"assert duration >= 0.001, \",3,,,,,,,,,,
if not self._port_handle.isOpen():,3,,,,,,,,,,
system command replies error,3,,,,,,,,,,
"LCX(0),  # MODE - Degree",3,,,,,,,,,,
g.close(),3,,,,,,,,,,
expected motor is not connected,3,,,,,,,,,,
self.display_menu(),3,,,,,,,,,,
class CloudSnarf(base.Program):,3,,,,,,,,,,
reply[16:],3,,,,,,,,,,
"opInput_Device,",3,,,,,,,,,,
self._delta_time = delta_time,3,,,,,,,,,,
pass,3,,,,,,,,,,
sercon1 = ser.sercon1(),3,,,,,,,,,,
if self._id:,3,,,,,,,,,,
Keyword arguments (either protocol and host or ev3_obj),3,,,,,,,,,,
"LCX(8),  # LENGTH",3,,,,,,,,,,
"opSubF,",3,,,,,,,,,,
params_ptr.append(ptr),3,,,,,,,,,,
path_source,3,,,,,,,,,,
self._abort(bar_thread),3,,,,,,,,,,
Type = ir.IntType(32),3,,,,,,,,,,
hbox2 = QHBoxLayout(),3,,,,,,,,,,
"assert isinstance(radius_wheel, Number), \",3,,,,,,,,,,
hvbox4.addWidget(self.dhumLabel),3,,,,,,,,,,
self.dhumVal.setStyleSheet(valStyle),3,,,,,,,,,,
"LED_OFF,",3,,,,,,,,,,
"freq,",3,,,,,,,,,,
"fmt,",3,,,,,,,,,,
"ops,",3,,,,,,,,,,
"opJr_Gt32,",3,,,,,,,,,,
PORTS_ALL = 15,3,,,,,,,,,,
"LVX(32),",3,,,,,,,,,,
"LVX(40),  # will become abs(done_inner)",3,,,,,,,,,,
).total_seconds(),3,,,,,,,,,,
self._target_position = (,3,,,,,,,,,,
"client.connect((self.arguments.address, self.arguments.port))",3,,,,,,,,,,
"opMul32,",3,,,,,,,,,,
return p.expr,3,,,,,,,,,,
"SET_MINUTES,",3,,,,,,,,,,
return self._speed,3,,,,,,,,,,
captured.out,3,,,,,,,,,,
@port_right.setter,3,,,,,,,,,,
"DEL_SUBFOLDER,",3,,,,,,,,,,
for eachLine in dataArray:,3,,,,,,,,,,
self.raw_header = buffer[:self.data_offset],3,,,,,,,,,,
"test,_ = self.visit_value(Test)",3,,,,,,,,,,
Keyword only arguments,3,,,,,,,,,,
"assert verbosity is None or isinstance(verbosity, int), \",3,,,,,,,,,,
self.close(),3,,,,,,,,,,
diff_left = round(diff_pos[0]),3,,,,,,,,,,
class DirCmdError(Exception):,3,,,,,,,,,,
"assert len(msg_cnt) == 2, \",3,,,,,,,,,,
),3,,,,,,,,,,
"battery voltage [V], current [A] and percentage (as named tuple)",3,,,,,,,,,,
global_mem=10,3,,,,,,,,,,
location = os.path.abspath(os.path.dirname(__file__)),3,,,,,,,,,,
import socks,3,,,,,,,,,,
"LVX(0),  # SOURCE2 - from_position (DATAF)",3,,,,,,,,,,
"def body(self, p):",3,,,,,,,,,,
@tracking_callback.setter,3,,,,,,,,,,
EV3_ULTRASONIC,3,,,,,,,,,,
return self.state.rate,3,,,,,,,,,,
self.layout2.addLayout(hbox2),3,,,,,,,,,,
commands = self._serial_read(size),3,,,,,,,,,,
data_date=[],3,,,,,,,,,,
"All this is done in a single direct command,",3,,,,,,,,,,
"LVX(48),  # last_outer as DATAF",3,,,,,,,,,,
"f""host {host} already connected, call with argument ev3_obj""",3,,,,,,,,,,
"dfu.go(int(args.address, 0))",3,,,,,,,,,,
"self._jukebox.play_tone(tone, volume=volume)",3,,,,,,,,,,
self.stop_sound,3,,,,,,,,,,
if (speed < 0 and position <= target_position):,3,,,,,,,,,,
import pytest,3,,,,,,,,,,
"console.print(prefix2, (value, True), prefix = prefix2)",3,"print(prefix2,",,,,,,,,,"print(prefix2,"
"wait = min(2*delta_t, 0.5*rest_t, 2)",3,,,,,,,,,,
pprint(tree),3,,,,,,,,,,
TRIAD = {,3,,,,,,,,,,
"LVX(52),  # all_inner as DATAF",3,,,,,,,,,,
self._polarity_right * (motor_pos[1] - self._motor_pos[1]),3,,,,,,,,,,
command.run(),3,,,,,,,,,,
return self._read_protection_status,3,,,,,,,,,,
"LCX(16),  # LENGTH",3,,,,,,,,,,
self.goBtn1 = PicButton(QPixmap(picon)),3,,,,,,,,,,
try:,3,,,,,,,,,,
always use DIRECT_COMMAND_REPLY and wait for reply.,3,,,,,,,,,,
"GVX(74),  # NAME (out)",3,,,,,,,,,,
man_pages = [,3,,,,,,,,,,
if self.sensors_as_dict[self._port] != EV3_IR:,3,,,,,,,,,,
duration=duration,3,,,,,,,,,,
EU_ANTEMN = {,3,,,,,,,,,,
if rtp.payload:,3,,,,,,,,,,
for command in commands:,3,,,,,,,,,,
return self,3,,,,,,,,,,
"SYNC,",3,,,,,,,,,,
"btn_pwd.grid(row=2, column=2)",3,,,,,,,,,,
if ran >= self.arguments.key.size:,3,,,,,,,,,,
"LVX(4),  # STEP1 (DATA32)",3,,,,,,,,,,
self.atemVal2.setStyleSheet(valStyle),3,,,,,,,,,,
"level (0, 1, 2) of verbosity (prints on stdout).",3,,,,,,,,,,
"sync_mode=sync_mode,",3,,,,,,,,,,
hvbox1.addStretch(6),3,,,,,,,,,,
reply = self.send_system_cmd(cmd),3,,,,,,,,,,
def scraper(self):,3,,,,,,,,,,
degrees for ramp-down,3,,,,,,,,,,
rtp = i[3],3,,,,,,,,,,
hvbox3.addWidget(self.dtemLabel),3,,,,,,,,,,
elif type is 1:  # NOP,3,,,,,,,,,,
],3,,,,,,,,,,
matcher = re.search(,3,,,,,,,,,,
from animplot import *,3,,,,,,,,,,
global_mem > 0 or,3,,,,,,,,,,
self.send_system_cmd(cmd),3,,,,,,,,,,
"UNTIL,",3,,,,,,,,,,
"assert isinstance(ev3_obj, EV3), \",3,,,,,,,,,,
"self.variables[name] = func,return_type",3,,,,,,,,,,
data = client.recv(0xFFFF),3,,,,,,,,,,
S1AB=S1AB[-1],3,,,,,,,,,,
"def def_param(self,p):",3,,,,,,,,,,
"def visit_value(self,branch):",3,,,,,,,,,,
self.builder.ret(value),3,,,,,,,,,,
if ramp_up_time is None:,3,,,,,,,,,,
background-color: #2ecc71;,3,,,,,,,,,,
EV3_IR,3,,,,,,,,,,
class ECN(Enum):,3,,,,,,,,,,
EV3_GYRO = 32,3,,,,,,,,,,
"LCX(freq),",3,,,,,,,,,,
return Memory(,3,,,,,,,,,,
"self._ops_pos() + ops,",3,,,,,,,,,,
class page2(QWidget):,3,,,,,,,,,,
self.compile(body),3,,,,,,,,,,
slow,3,,,,,,,,,,
"LCX(0),",3,,,,,,,,,,
return read_protection_status,3,,,,,,,,,,
fact = 255 / max(result),3,,,,,,,,,,
if self._target_position is not None:,3,,,,,,,,,,
language = None,3,,,,,,,,,,
"ABS,  # CMD",3,,,,,,,,,,
"LVX(8),  # DESTINATION - step2 (DATA32)",3,,,,,,,,,,
GVX(2*i + 1)  # MODE (output),3,,,,,,,,,,
"READY_RAW,  # CMD",3,,,,,,,,,,
if datetime.now() - started_at > timedelta(seconds=10):,3,,,,,,,,,,
action_cont=self.cont,3,,,,,,,,,,
if self._port_right == PORT_A:,3,,,,,,,,,,
LCX(round(1000*duration)),3,,,,,,,,,,
"in combination with repeat, this means interruption,",3,,,,,,,,,,
flag if ending with floating motors (False) or active brake (True).,3,,,,,,,,,,
NXT_SOUND = 3,3,,,,,,,,,,
Periodic needs inverse flag of property busy,3,,,,,,,,,,
"action_cont=self.play_sound,",3,,,,,,,,,,
raise SysCmdError(,3,,,,,,,,,,
for dev in devices:,3,,,,,,,,,,
"flag, if path is a location on the local host",3,,,,,,,,,,
"CONTINUE_DOWNLOAD,",3,,,,,,,,,,
"self.builder.store(func.args[i],ptr)",3,,,,,,,,,,
GVX(0),3,,,,,,,,,,
ast = parser.ast,3,,,,,,,,,,
"SET_BRICKNAME,",3,,,,,,,,,,
),3,,,,,,,,,,
assert len(reply_2_str) == 5,3,,,,,,,,,,
ramp_down_time=0,3,,,,,,,,,,
self._socket = None,3,,,,,,,,,,
"console.print(f"" -  {host['ip']} [{', '.join(host.get('443.https.tls.certificate.parsed.names', host.get('443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names', [])))}]"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
"def __init__(self, parent, controller):",3,,,,,,,,,,
GVX(84)  # IP,3,,,,,,,,,,
def close(self):,3,,,,,,,,,,
sync_mode == SYNC,3,,,,,,,,,,
y1=0,3,,,,,,,,,,
progress_update(100),3,,,,,,,,,,
if zlib.crc32(firmware) != zlib.crc32(dump):,3,,,,,,,,,,
ops,3,,,,,,,,,,
with open(request.param) as map_file:,3,,,,,,,,,,
"self._position = vehicle_pos_x, vehicle_pos_y",3,,,,,,,,,,
yar1.append(int(y1)),3,,,,,,,,,,
def test_version(dfu):,3,,,,,,,,,,
reply[2*i:2*i+1],3,,,,,,,,,,
val = 0xff - data,3,,,,,,,,,,
if ramp_down_time is None:,3,,,,,,,,,,
steady_ms = 0,3,,,,,,,,,,
"ABS,",3,,,,,,,,,,
"LVX(28),  # STEP2",3,,,,,,,,,,
"for key, value in self.config.items():",3,,,,,,,,,,
return self._physical_ev3._host,3,,,,,,,,,,
self._target_position = None,3,,,,,,,,,,
"LVX(12),  # DESTINATION - step3 (DATA32)",3,,,,,,,,,,
from operator import xor,3,,,,,,,,,,
@sleep.setter,3,,,,,,,,,,
"self.on_error(self, e)",3,,,,,,,,,,
return stm32uartdfu.Stm32UartDfu(request.param),3,,,,,,,,,,
"REPEAT,",3,,,,,,,,,,
if not stem.util.connection.is_valid_ipv4_address(address):,3,,,,,,,,,,
"import dns.resolver, dns.message, argparse, random",3,,,,,,,,,,
"opJr_Lt32,",3,,,,,,,,,,
communicates with a LEGO EV3 using direct or system commands,3,,,,,,,,,,
"round(self._target_motor_pos.left),",3,,,,,,,,,,
if self._physical_ev3._introspection is None:,3,,,,,,,,,,
"LCX(263),  # OFFSET",3,,,,,,,,,,
portCombo.addItem(ports[port]),3,,,,,,,,,,
"def strings(self,string):",3,,,,,,,,,,
reply = self._physical_ev3.send_direct_cmd(,3,,,,,,,,,,
"GVX(16),  # VALUE5 - heading   channel 3",3,,,,,,,,,,
y3=0,3,,,,,,,,,,
try:,3,,,,,,,,,,
EV3_MEDIUM_MOTOR = 8,3,,,,,,,,,,
BLACKCOLOR = 1,3,,,,,,,,,,
EOF_check.append(data_date[i]),3,,,,,,,,,,
console.print(l1),3,print(l1),,,,,,,,,print(l1)
"def visit_def(self,branch):",3,,,,,,,,,,
if repeat:,3,,,,,,,,,,
if self._target_motor_pos is None:,3,,,,,,,,,,
"port_motor_input(self._port_left),  # NO",3,,,,,,,,,,
"dfu.write(int(args.address, 0), firmware, bar_thread.update)",3,,,,,,,,,,
if rc != SYSTEM_REPLY_OK:,3,,,,,,,,,,
"assert isinstance(back, bool), \",3,,,,,,,,,,
class Info(tk.Frame):,3,,,,,,,,,,
steps = (,3,,,,,,,,,,
if self._port == PORT_A:,3,,,,,,,,,,
port_left,3,,,,,,,,,,
radius of the wheels [m],3,,,,,,,,,,
if Not_s1a_cal_aux == 0:,3,,,,,,,,,,
"PORT_2,",3,,,,,,,,,,
self.close(),3,,,,,,,,,,
hosts.append(mac_addr),3,,,,,,,,,,
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas,3,,,,,,,,,,
self._radius_wheel / self._tread +,3,,,,,,,,,,
"LCX(step2),  # STEP2",3,,,,,,,,,,
"frame = F(parent=container, controller=self)",3,,,,,,,,,,
[port_motor_input(self._port)] \,3,,,,,,,,,,
][0],3,,,,,,,,,,
fingerprints[fingerprint] = hosts,3,,,,,,,,,,
if sync_mode is None and self._physical_ev3._protocol == USB:,3,,,,,,,,,,
determines next message counter,3,,,,,,,,,,
"splash = QSplashScreen(splash_pix, Qt.WindowStaysOnTopHint)",3,,,,,,,,,,
"RPAREN,",3,,,,,,,,,,
self._rgb_white_balance_raw = self.rgb_raw,3,,,,,,,,,,
"assert isinstance(local, bool), \",3,,,,,,,,,,
import sys,3,,,,,,,,,,
speed,3,,,,,,,,,,
"GVX(0),  # VALUE1",3,,,,,,,,,,
GVX(0)  # VALUE1 (output),3,,,,,,,,,,
self.Master_data_tmp=tk.StringVar(),3,,,,,,,,,,
chunk = f.read(4096),3,,,,,,,,,,
hvbox1 = QVBoxLayout(),3,,,,,,,,,,
bar_thread.join(),3,,,,,,,,,,
html_sidebars = {,3,,,,,,,,,,
"opOutput_Step_Speed,",3,,,,,,,,,,
lang = self._lang,3,,,,,,,,,,
"use DIRECT_COMMAND_REPLY only if global_mem > 0,",3,,,,,,,,,,
"opOutput_Speed,",3,,,,,,,,,,
reply = self.send_system_cmd(,3,,,,,,,,,,
prep_sh=self.prep_sh_tmp.get(),3,,,,,,,,,,
"GET_OS_VERS,",3,,,,,,,,,,
lexer = PLexer(),3,,,,,,,,,,
"reply = self._reply_buffer.pop(msg_cnt, None)",3,,,,,,,,,,
if not self.process:,3,,,,,,,,,,
elif values[n] == 2:,3,,,,,,,,,,
cmd_type = _DIRECT_COMMAND_REPLY,3,,,,,,,,,,
if connection != source:,3,,,,,,,,,,
self.api_secret = api_secret,3,,,,,,,,,,
hbox1.addWidget(self.groupBox1),3,,,,,,,,,,
output = [],3,,,,,,,,,,
fw_version,3,,,,,,,,,,
"GVX(58),  # NAME (out)",3,,,,,,,,,,
"LCX(target_pos_outer),",3,,,,,,,,,,
"md5, size_hex, name = line.split(None, 2)",3,,,,,,,,,,
current_position = self.position,3,,,,,,,,,,
"DEF,",3,,,,,,,,,,
"isinstance(value, Callable)",3,,,,,,,,,,
self._device.write(cmd),3,,,,,,,,,,
turn = 200 - turn,3,,,,,,,,,,
"assert callback is None or isinstance(callback, Callable), \",3,,,,,,,,,,
format = params[0],3,,,,,,,,,,
) == (,3,,,,,,,,,,
bar_thread = ProgressBarThread(),3,,,,,,,,,,
self.portCombox.clear(),3,,,,,,,,,,
for res in result,3,,,,,,,,,,
"from ctypes import Structure, c_ubyte, c_ushort, c_ulong",3,,,,,,,,,,
"GVX(0),  # VALUE1 (output)",3,,,,,,,,,,
LCS(path_dest)  # DESTINATION,3,,,,,,,,,,
BROWNCOLOR = 7,3,,,,,,,,,,
if len_data > 7:,3,,,,,,,,,,
"angle of turn (degrees),",3,,,,,,,,,,
"f""     - Identification (ID). . . . . . .: 0x{self.identification:04x} ({self.identification})"",",3,,,,,,,,,,
"resp = dns.query.tcp(message, resolver.nameservers[0], **kwargs)",3,,,,,,,,,,
freq = self._temperament * 2**(-2/12),3,,,,,,,,,,
from .file import FileSystem,3,,,,,,,,,,
is the message counter of the corresponding send_direct_cmd,3,,,,,,,,,,
},3,,,,,,,,,,
"super(PicButton, self).__init__(parent)",3,,,,,,,,,,
"GET_IBATT,",3,,,,,,,,,,
return self._physical_ev3.send_system_cmd(,3,,,,,,,,,,
class PicButton(QAbstractButton):,3,,,,,,,,,,
if len(eachLine)>1:,3,,,,,,,,,,
"opOr8,  # b'\x20'",3,,,,,,,,,,
self._host = host,3,,,,,,,,,,
self.portCombox.addItem(ports[port]),3,,,,,,,,,,
"response = api.stats(self.arguments.stats, **kwargs)",3,,,,,,,,,,
for x in params:,3,,,,,,,,,,
self._rgb_white_balance_raw = None,3,,,,,,,,,,
self._devices.add(self._host),3,,,,,,,,,,
class API(Session):,3,,,,,,,,,,
commands = set(),3,,,,,,,,,,
from collections import Sequence,3,,,,,,,,,,
self._bar_len = 0,3,,,,,,,,,,
tmp2=tmp2[-1],3,,,,,,,,,,
class Jukebox(Sound):,3,,,,,,,,,,
"LCX(self._port_left + self._port_right),  # NOS",3,,,,,,,,,,
def discontinue(self):,3,,,,,,,,,,
self.start_move_for(,3,,,,,,,,,,
credits: dict = {},3,,,,,,,,,,
"cap = pyshark.FileCapture(pcap_file,display_filter=filter_type)",3,,,,,,,,,,
def dfu(request):,3,,,,,,,,,,
left = len(raw_options),3,,,,,,,,,,
global loopz,3,,,,,,,,,,
EOF_list.append(tmp2[-1]),3,,,,,,,,,,
"from PyQt5.QtWidgets import (QWidget, QPushButton, QLabel, QHBoxLayout, QVBoxLayout,QDesktopWidget, QGroupBox)",3,,,,,,,,,,
pause_start = None,3,,,,,,,,,,
"def visit_return(self,branch):",3,,,,,,,,,,
if step2 < 0:,3,,,,,,,,,,
self.controller = controller,3,,,,,,,,,,
"assert isinstance(angle, Number), \",3,,,,,,,,,,
ev3_path = path,3,,,,,,,,,,
hvbox2.addStretch(3),3,,,,,,,,,,
)),3,,,,,,,,,,
)):,3,,,,,,,,,,
"opMoveF_8,",3,,,,,,,,,,
hosts = [],3,,,,,,,,,,
data_dir = sys._MEIPASS,3,,,,,,,,,,
found = False,3,,,,,,,,,,
if self.sensors_as_dict[self._port] not in (,3,,,,,,,,,,
"polarity of right motor rotation, values: -1, 1 (default)",3,,,,,,,,,,
import tkinter.ttk,3,,,,,,,,,,
SYNC,3,,,,,,,,,,
"polarity of left motor rotation (values: -1, 1, default: 1)",3,,,,,,,,,,
name = struct.unpack(,3,,,,,,,,,,
if self._current_movement is not None:,3,,,,,,,,,,
"self._target_motor_pos.left + step_left,",3,,,,,,,,,,
if self._device.is_kernel_driver_active(i.index):,3,,,,,,,,,,
"f""     - Header Checksum. . . . . . . . .: 0x{self.checksum:04x} ({'NOT CALCULATED' if self.checksum is 0 else ('CORRECT' if self.check_sum(self.raw_header) is 0 else 'INCORRECT')})"",",3,,,,,,,,,,
self._port_right = port_right,3,,,,,,,,,,
"f""     - Differentiated Services (DS) . .: {', '.join(self.differentiated_services)} (DSCP: 0x{self.raw_dscp:02x}, ECN: 0x{self.raw_ecn:01x})"",",3,,,,,,,,,,
"local_mem=local_mem,",3,,,,,,,,,,
"thread = threading.Thread(target = handle, args = (sock, address), daemon = True)",3,,,,,,,,,,
) + Repeated(,3,,,,,,,,,,
self.setWindowIcon(QIcon(winIcon)),3,,,,,,,,,,
"opInput_Device,  # b'\x98'",3,,,,,,,,,,
def exit(self):,3,,,,,,,,,,
"def on_recv(self, address, data):",3,,,,,,,,,,
"NXT_TOUCH,",3,,,,,,,,,,
plays a sound file,3,,,,,,,,,,
"self.arguments.output.write(hkbit.crypt(chunk, self.arguments.key.read(0xFFF))[0])",3,,,,,,,,,,
color: #ecf0f1;,3,,,,,,,,,,
reply = self._socket.recv(1024),3,,,,,,,,,,
self._physical_ev3.__del__(),3,,,,,,,,,,
params = params if params[0] else [],3,,,,,,,,,,
ptr = self.builder.alloca(Type),3,,,,,,,,,,
@property,3,,,,,,,,,,
from stm32_uart_dfu import stm32uartdfu,3,,,,,,,,,,
"assert isinstance(speed, int), \",3,,,,,,,,,,
"self.bind((self.address, self.port))",3,,,,,,,,,,
global_mem=8,3,,,,,,,,,,
"self._ops_pos() + self._ops_busy(global_offset=8),",3,,,,,,,,,,
self.Dir_proc_tmp=tk.StringVar(),3,,,,,,,,,,
compiler.compile(ast),3,,,,,,,,,,
"else Beacon(values[2*n], float(values[2*n + 1] / 100))",3,,,,,,,,,,
from matplotlib import animation as animation,3,,,,,,,,,,
"_EP_IN,",3,,,,,,,,,,
if results:,3,,,,,,,,,,
"socket.AF_INET,",3,,,,,,,,,,
self.iw_index_tmp=tk.IntVar(),3,,,,,,,,,,
"LVX(52),",3,,,,,,,,,,
self._port_handle.applySettingsDict(port_settings),3,,,,,,,,,,
"assert isinstance(tread, Number), \",3,,,,,,,,,,
Dir_EOF=self.Dir_EOF_tmp.get(),3,,,,,,,,,,
"edTxt1=tk.Entry(self, textvariable=self.Master_data_tmp, width=20, borderwidth=2)",3,,,,,,,,,,
"f'{type_str}',",3,,,,,,,,,,
"LCX(step2),",3,,,,,,,,,,
duration=duration,3,,,,,,,,,,
msg_cnt = self.next_msg_cnt(),3,,,,,,,,,,
"part_size = min(1017, rest)",3,,,,,,,,,,
return self._tracking.motor_pos,3,,,,,,,,,,
if values[n] == 0:,3,,,,,,,,,,
LED_GREEN,3,,,,,,,,,,
elif buttonReply == QMessageBox.No:,3,,,,,,,,,,
"variable=self.ESD_YN_tmp, value=0)",3,,,,,,,,,,
"GET_OS_BUILD,  # CMD",3,,,,,,,,,,
layout1.addLayout(hbox1),3,,,,,,,,,,
total and free memory [kB] (as named tuple),3,,,,,,,,,,
"opOutput_Start,",3,,,,,,,,,,
def  animate(self):,3,,,,,,,,,,
"raise exceptions.DfuSerialIOException(len(data), done)",3,,,,,,,,,,
self._polarity_left = value,3,,,,,,,,,,
@name.setter,3,,,,,,,,,,
percentage of maximum speed [1 - 100],3,,,,,,,,,,
"opFile,",3,,,,,,,,,,
"tones = Tones(song, self)",3,,,,,,,,,,
"GET_MINUTES,",3,,,,,,,,,,
def _start_move_by(,3,,,,,,,,,,
fw_build,3,,,,,,,,,,
return 1,3,,,,,,,,,,
ran = 0,3,,,,,,,,,,
_BAR_MAX_LEN = 40,3,,,,,,,,,,
certificates: certificates.CensysCertificates,3,,,,,,,,,,
module = console.load(fullname),3,,,,,,,,,,
if length < 2 or length > left:,3,,,,,,,,,,
if verbosity is not None and verbosity > 0:,3,,,,,,,,,,
"LCX(7),  # TYPE - EV3-Large-Motor",3,,,,,,,,,,
if proxy:,3,,,,,,,,,,
"opCom_Get,",3,,,,,,,,,,
"FRERE_JACQUES,",3,,,,,,,,,,
background-color: #1abc9c;,3,,,,,,,,,,
"DELETE_FILE,",3,,,,,,,,,,
"global_mem=1,",3,,,,,,,,,,
back,3,,,,,,,,,,
Flag if ending with floating motors (False) or active brake (True).,3,,,,,,,,,,
return self._physical_ev3.send_direct_cmd(,3,,,,,,,,,,
from core.modules import base,3,,,,,,,,,,
UDPSock = socket.socket(,3,,,,,,,,,,
"when direct command is finished, which means",3,,,,,,,,,,
write = socket.send,3,,,,,,,,,,
from writefile import writef,3,,,,,,,,,,
ramp_up_time /,3,,,,,,,,,,
"Create a device, that holds an USB connection to an EV3",3,,,,,,,,,,
result = RGBColor(,3,,,,,,,,,,
"super(page2, self).__init__()",3,,,,,,,,,,
self._current_movement = None,3,,,,,,,,,,
self.frames[page_name] = frame,3,,,,,,,,,,
if self._protocol == BLUETOOTH:,3,,,,,,,,,,
self.i = 0,3,,,,,,,,,,
"value,Type = self.visit_value(value)",3,,,,,,,,,,
"ret = self.printf(args,types[0])",3,,,,,,,,,,
"variable=self.time_delta_max_tmp,",3,,,,,,,,,,
hvbox3.addStretch(3),3,,,,,,,,,,
"assert ramp_down_time is None or isinstance(ramp_down_time, Number), \",3,,,,,,,,,,
self._msg_cnt = 1,3,,,,,,,,,,
struct.pack(,3,,,,,,,,,,
finally:,3,,,,,,,,,,
if len(values)==4:,3,,,,,,,,,,
"return self.builder.call(func,[format,*params])",3,,,,,,,,,,
"PORT_A,",3,,,,,,,,,,
"opSub32,",3,,,,,,,,,,
if self.proto is IPPROTO_IP:,3,,,,,,,,,,
"polarity_right=self._polarity_right,",3,,,,,,,,,,
"assert delta_time is None or isinstance(delta_time, Number), \",3,,,,,,,,,,
"container.grid_columnconfigure(0, weight=1)",3,,,,,,,,,,
return self._tracking._callback,3,,,,,,,,,,
self.checksum = socket.ntohs(self.raw_checksum),3,,,,,,,,,,
csf = csf(),3,,,,,,,,,,
def serclose(self):,3,,,,,,,,,,
"SET_MINUTES,  # CMD",3,,,,,,,,,,
def disp():,3,,,,,,,,,,
"GET_FOLDERS,",3,,,,,,,,,,
"opMulF,",3,,,,,,,,,,
def display_menu(self):,3,,,,,,,,,,
detemines duration of a sound file by reading its header,3,,,,,,,,,,
return -1,3,,,,,,,,,,
"LVX(56),  # all_outer as DATAF",3,,,,,,,,,,
step1_left = ramp_up,3,,,,,,,,,,
if not _locked:,3,,,,,,,,,,
def speed(self):,3,,,,,,,,,,
extensions = [,3,,,,,,,,,,
"GVX(4),  # VALUE1 green (output)",3,,,,,,,,,,
return -1,3,,,,,,,,,,
elif values[n] == 10:,3,,,,,,,,,,
ramp_down_time = self._ramp_down_time,3,,,,,,,,,,
tokens = lexer.tokenize(code),3,,,,,,,,,,
return self._physical_ev3.wait_for_reply(,3,,,,,,,,,,
"AND,",3,,,,,,,,,,
import llvmlite.binding as llvm,3,,,,,,,,,,
"GET_LBATT,",3,,,,,,,,,,
"LVX(28),  # step2",3,,,,,,,,,,
command=lambda:Done()),3,,,,,,,,,,
return fw.read(),3,,,,,,,,,,
if private_key:,3,,,,,,,,,,
self._position -= 1,3,,,,,,,,,,
s = ((s + w) & 0xFFFF) + ((s + w) >> 16),3,,,,,,,,,,
options = {},3,,,,,,,,,,
self._reverse_direction = True,3,,,,,,,,,,
self._id = pid,3,,,,,,,,,,
radius,3,,,,,,,,,,
GVX(28)  # VALUE8 - proximity channel 4,3,,,,,,,,,,
"super(socket, self).__init__(family, type, proto, fileno)",3,,,,,,,,,,
"READ_BYTES,",3,,,,,,,,,,
port of right wheel (default: PORT_A),3,,,,,,,,,,
EOF_check=[],3,,,,,,,,,,
self.conButton.clicked.connect(self.conSerial),3,,,,,,,,,,
_DEFAULT_PARAMETERS = {,3,,,,,,,,,,
hvbox4.addStretch(6),3,,,,,,,,,,
self.Dir_EOF_tmp=tk.StringVar(),3,,,,,,,,,,
wait for reply.,3,,,,,,,,,,
pass,3,,,,,,,,,,
format = ptr,3,,,,,,,,,,
hhbox3 = QHBoxLayout(),3,,,,,,,,,,
self._target_motor_pos.right + step_right,3,,,,,,,,,,
"def show_frame(self, page_name):",3,,,,,,,,,,
''',3,,,,,,,,,,
motor_pos[0] == self._motor_pos[0] and,3,,,,,,,,,,
starts moving the motor by a given angle (without time control).,3,,,,,,,,,,
self._protocol = protocol,3,,,,,,,,,,
"opJr_False,  # b'\x41'",3,,,,,,,,,,
STD - if reply then use DIRECT_COMMAND_REPLY and,3,,,,,,,,,,
elif case == 2:,3,,,,,,,,,,
"LCX(-1),",3,,,,,,,,,,
"opSubF,",3,,,,,,,,,,
makes current position the new zero position,3,,,,,,,,,,
class Touch(EV3):,3,,,,,,,,,,
except OSError:,3,,,,,,,,,,
"BREAK,",3,,,,,,,,,,
"self.ioctl(SIO_RCVALL, RCVALL_ON)",3,,,,,,,,,,
"),",3,,,,,,,,,,
dfu.go(address),3,,,,,,,,,,
ports = serial_ports(),3,,,,,,,,,,
return,3,,,,,,,,,,
"opDivF,",3,,,,,,,,,,
s = 0,3,,,,,,,,,,
def test_brickname():,3,,,,,,,,,,
"GVX(4),",3,,,,,,,,,,
app=Control(),3,,,,,,,,,,
"console.print(l1.ljust(24), (value, True), prefix = prefix2)",3,"print(l1.ljust(24),",,,,,,,,,"print(l1.ljust(24),"
"for pos, curr_byte in enumerate(data):",3,,,,,,,,,,
"READY_SI,  # CMD",3,,,,,,,,,,
"self._ops_pos() + ops_stop,",3,,,,,,,,,,
def tone_next(self):,3,,,,,,,,,,
1000 *,3,,,,,,,,,,
"from .exceptions import FFMPEG, SysCmdError",3,,,,,,,,,,
hvbox4.addStretch(3),3,,,,,,,,,,
self._ip_adr = None,3,,,,,,,,,,
"def on_error(self, address, exception):",3,,,,,,,,,,
"text=self.iw_tmp[i],",3,,,,,,,,,,
"LVX(0),  # SOURCE - signed_speed (DATAF)",3,,,,,,,,,,
ev3_dc.EV3.sensors_as_dict[ev3_dc.PORT_1] or,3,,,,,,,,,,
GVX,3,,,,,,,,,,
exc_call(args[0]),3,,,,,,,,,,
info2=info+datetime.timedelta(1),3,,,,,,,,,,
rawclose2=self.ser.readline(),3,,,,,,,,,,
"btn_EOF_check.grid(row=6, column=1)",3,,,,,,,,,,
if orelse == []:,3,,,,,,,,,,
speed *= -1,3,,,,,,,,,,
"LED_RED_PULSE,",3,,,,,,,,,,
return msg_cnt,3,,,,,,,,,,
"NXT_ULTRASONIC,",3,,,,,,,,,,
self._polarity_right * step_outer,3,,,,,,,,,,
(step3_right / ramp_down)**2 if ramp_down > 0 else 1,3,,,,,,,,,,
def devices(cls):,3,,,,,,,,,,
"args=(degrees,),",3,,,,,,,,,,
bar_thread.update),3,,,,,,,,,,
direct commands with reply are handled like SYNC.,3,,,,,,,,,,
"LCX(22),",3,,,,,,,,,,
"LCX(2),  # VALUES",3,,,,,,,,,,
"f'connected EV3 {self.host}',",3,,,,,,,,,,
frame.Main(),3,,,,,,,,,,
path,3,,,,,,,,,,
self._conn_owner = False,3,,,,,,,,,,
signal_start is not None and,3,,,,,,,,,,
dir=fdialog.askdirectory(,3,,,,,,,,,,
self.form = page2(),3,,,,,,,,,,
"MINUS,",3,,,,,,,,,,
datetime.now() -,3,,,,,,,,,,
global allowance,3,,,,,,,,,,
if progress == -1:,3,,,,,,,,,,
"opOutput_Start,  # b'\xA6'",3,,,,,,,,,,
"result.append(Remote(False, False, False, False, True))",3,,,,,,,,,,
return False,3,,,,,,,,,,
"scale1=tk.Scale(self,",3,,,,,,,,,,
"def __init__(self, port):",3,,,,,,,,,,
self.atemLabel2.setStyleSheet(labelColStyle),3,,,,,,,,,,
s.close(),3,,,,,,,,,,
"opDiv32,",3,,,,,,,,,,
@ramp_down_time.setter,3,,,,,,,,,,
self.write_file(,3,,,,,,,,,,
"},",3,,,,,,,,,,
"opCom_Set,  # operation",3,,,,,,,,,,
volume = self._volume,3,,,,,,,,,,
"def animate_loop(self, i):",3,,,,,,,,,,
"LVX(28),",3,,,,,,,,,,
raise RuntimeError(,3,,,,,,,,,,
return MotorPositions(*self._motor_pos),3,,,,,,,,,,
"assert self._current_movement is None, \",3,,,,,,,,,,
"f'Serial IO error: tried to transfer {expected}, {actual} done.')",3,,,,,,,,,,
if args.run:,3,,,,,,,,,,
"FigureCanvas.setSizePolicy(self,",3,,,,,,,,,,
"LCX(12),  # LENGTH",3,,,,,,,,,,
LCX(self._port)  # NOS,3,,,,,,,,,,
"opOutput_Reset,",3,,,,,,,,,,
"opMoveF_8,",3,,,,,,,,,,
direction of movement (-1 or 1),3,,,,,,,,,,
)),3,,,,,,,,,,
"def on_recv(self, socket, data):",3,,,,,,,,,,
"return os.path.join(data_dir, relative)",3,,,,,,,,,,
"speed_left = round(copysign(factor * abs(speed_right), diff_left))",3,,,,,,,,,,
distance,3,,,,,,,,,,
_RESPONSE = {,3,,,,,,,,,,
"LCX(1),  # VALUES",3,,,,,,,,,,
"import struct, socket, random",3,,,,,,,,,,
def ramp_up_time(self):,3,,,,,,,,,,
if self._endless:,3,,,,,,,,,,
ops = ev3.opError,3,,,,,,,,,,
if serial_number == self._host.upper():,3,,,,,,,,,,
if self.sensors_as_dict[self._port] != EV3_COLOR:,3,,,,,,,,,,
if self.sensors_as_dict[self._port] == EV3_COLOR:,3,,,,,,,,,,
self.headers.update(headers),3,,,,,,,,,,
"SET_VOLUME,  # CMD",3,,,,,,,,,,
if field not in t:,3,,,,,,,,,,
previous_builder = self.builder,3,,,,,,,,,,
FigureCanvas.updateGeometry(self),3,,,,,,,,,,
"def if_stmt(body,orelse,test):",3,,,,,,,,,,
turn *= -1,3,,,,,,,,,,
"LCX(step3),  # STEP3",3,,,,,,,,,,
"NUMBER,",3,,,,,,,,,,
EV3_MEDIUM_MOTOR,3,,,,,,,,,,
pause_start = pos,3,,,,,,,,,,
@wraps(func),3,,,,,,,,,,
typ = params_type[i],3,,,,,,,,,,
"os.link(tmp1[0],tmp2)",3,,,,,,,,,,
notes: dict = {},3,,,,,,,,,,
NXT_COLOR,3,,,,,,,,,,
"def visit_funccall(self,branch):",3,,,,,,,,,,
return self._BAR_MAX_LEN - self._complete_len(progress),3,,,,,,,,,,
self._device = dev,3,,,,,,,,,,
def memory_map(request):,3,,,,,,,,,,
self._uart_dfu_init(),3,,,,,,,,,,
step_right = Decimal(,3,,,,,,,,,,
self.builder.position_at_start(while_loop_otherwise),3,,,,,,,,,,
"LCX(1),  # VALUES",3,,,,,,,,,,
"data.insert(0, loopz)",3,,,,,,,,,,
sync_mode=self._sync_mode,3,,,,,,,,,,
if self._read_protection_status:,3,,,,,,,,,,
code = file.read(),3,,,,,,,,,,
value is None or,3,,,,,,,,,,
"assert isinstance(direction, int), \",3,,,,,,,,,,
"GET_BRICKNAME,  # CMD",3,,,,,,,,,,
info=data_date[i],3,,,,,,,,,,
"LT,",3,,,,,,,,,,
text to speak,3,,,,,,,,,,
global proc_sh,3,,,,,,,,,,
self.version = version,3,,,,,,,,,,
def __repr__(self):,3,,,,,,,,,,
"return utils.var_assign(p.NAME,p.expr)",3,,,,,,,,,,
module = console.load(fullname),3,,,,,,,,,,
"LVX(44),  # last_inner as DATAF",3,,,,,,,,,,
except SysCmdError:,3,,,,,,,,,,
"opCom_Get,",3,,,,,,,,,,
"brake=brake,",3,,,,,,,,,,
def start_move_for(,3,,,,,,,,,,
socket.BTPROTO_RFCOMM,3,,,,,,,,,,
"console.print(f""[+] {fingerprint}: {', '.join(common_name or names or [])}"")",3,"print(f""[+]",,,,,,,,,"print(f""[+]"
"self.setsockopt(IPPROTO_IP, IP_HDRINCL, 1)",3,,,,,,,,,,
"GVX(24), # VALUE",3,,,,,,,,,,
splash.show(),3,,,,,,,,,,
"GET_FOLDERS,",3,,,,,,,,,,
"COMMA,",3,,,,,,,,,,
return self._port_left,3,,,,,,,,,,
if data is None:,3,,,,,,,,,,
"assert volume is None or 0<= volume <= 100, \",3,,,,,,,,,,
"self.send_direct_cmd(ops, local_mem=24)",3,,,,,,,,,,
return System(,3,,,,,,,,,,
step2_right = abs(diff_right) - step1_right - step3_right,3,,,,,,,,,,
Flag if motors are currently busy,3,,,,,,,,,,
hbox1.addStretch(),3,,,,,,,,,,
if backlog:,3,,,,,,,,,,
"LED_ORANGE,",3,,,,,,,,,,
WHITECOLOR = 6,3,,,,,,,,,,
"socket.AF_BLUETOOTH,",3,,,,,,,,,,
CS1 = 8  # Scavenger,3,,,,,,,,,,
return 60 * beats / self._tempo,3,,,,,,,,,,
for branch in ast:,3,,,,,,,,,,
sync_mode = self._sync_mode,3,,,,,,,,,,
)),3,,,,,,,,,,
global_mem=1,3,,,,,,,,,,
"LCX(64),  # LENGTH",3,,,,,,,,,,
"DELETE_FILE,",3,,,,,,,,,,
"LCS,",3,,,,,,,,,,
no EV3 brick found,3,,,,,,,,,,
part,3,,,,,,,,,,
self._polarity_right = value,3,,,,,,,,,,
"BLUETOOTH,",3,,,,,,,,,,
"from thread_task import Task, Repeated",3,,,,,,,,,,
"assert -200 <= turn <= 200, \",3,,,,,,,,,,
args = [],3,,,,,,,,,,
"USB == 'Usb',",3,,,,,,,,,,
type_str = (,3,,,,,,,,,,
elif self._position + self._bar_len < self._BAR_MAX_LEN:,3,,,,,,,,,,
except NotImplementedError:,3,,,,,,,,,,
"l1 = prefix + f""|--{key}""",3,,,,,,,,,,
GVX(102)  # NAME (out),3,,,,,,,,,,
self._radius_wheel = radius_wheel,3,,,,,,,,,,
verbosity=verbosity,3,,,,,,,,,,
self._jukebox = jukebox,3,,,,,,,,,,
"self._position = vehicle_pos_x, vehicle_pos_y",3,,,,,,,,,,
current position of the left and right motor [degree],3,,,,,,,,,,
"flag, if repeatedly playing (unlimited if no duration is set)",3,,,,,,,,,,
"assert isinstance(port_right, int), \",3,,,,,,,,,,
mem_map = json.load(map_file),3,,,,,,,,,,
"assert value >= 0, \",3,,,,,,,,,,
run_command.set_defaults(func=dfu_handler.run),3,,,,,,,,,,
self.on_stop(self),3,,,,,,,,,,
elif values[n] == 3:,3,,,,,,,,,,
MAC-address of the LEGO EV3 (e.g. '00:16:53:42:2B:99'),3,,,,,,,,,,
"SYSTEM_REPLY_OK,",3,,,,,,,,,,
path = path[:-4],3,,,,,,,,,,
def test_opError():,3,,,,,,,,,,
if md5_hash.hexdigest().upper() == curr_md5:,3,,,,,,,,,,
if steady_ms < 0:,3,,,,,,,,,,
) + Periodic(,3,,,,,,,,,,
import csv,3,,,,,,,,,,
self._pos = 0,3,,,,,,,,,,
"with self.builder.if_else(test) as (true,otherwise):",3,,,,,,,,,,
raise,3,,,,,,,,,,
"args=(upbeat_duration,)",3,,,,,,,,,,
elif values[n] == 8:,3,,,,,,,,,,
self._ramp_up_time = ramp_up_time,3,,,,,,,,,,
local,3,,,,,,,,,,
"val = reduce(xor, data, init)",3,,,,,,,,,,
for byte in data:,3,,,,,,,,,,
return wait,3,,,,,,,,,,
del sys.argv[:2],3,,,,,,,,,,
S1AB=glob.glob(info),3,,,,,,,,,,
"LCX(step2_left),  # STEP2",3,,,,,,,,,,
"tk.Entry(self, textvariable=self.path_dem_tmp, width=50, borderwidth=2),",3,,,,,,,,,,
data = ser.serrun1(),3,,,,,,,,,,
hosts.append(mac_addr),3,,,,,,,,,,
my_ev3.send_direct_cmd(ops_set),3,,,,,,,,,,
self.Not_s1a_cal_aux_tmp=tk.IntVar(),3,,,,,,,,,,
"LCX(speed),",3,,,,,,,,,,
"_DIRECT_REPLY,",3,,,,,,,,,,
audio = bytearray.fromhex(packet),3,,,,,,,,,,
"opUI_Read,",3,,,,,,,,,,
"self._write_memory_chunk(offset, chunk)",3,,,,,,,,,,
"GVX(26),  # NAME (out)",3,,,,,,,,,,
command = command(),3,,,,,,,,,,
elif pre_byte == 128 and curr_byte != 128:,3,,,,,,,,,,
"protocol=protocol,",3,,,,,,,,,,
"LCX(1 if brake else 0),  # BRAKE - 1 (yes) or 0 (no)",3,,,,,,,,,,
"PORT_1,",3,,,,,,,,,,
"verbosity=verbosity,",3,,,,,,,,,,
"assert local_mem >= 0, \",3,,,,,,,,,,
rest = size,3,,,,,,,,,,
for host in results:,3,,,,,,,,,,
self.draw(),3,,,,,,,,,,
class Sound(FileSystem):,3,,,,,,,,,,
step2_left = 0,3,,,,,,,,,,
data = chunk = private_key.read(0xFFF),3,,,,,,,,,,
"LCX(222),  # OFFSET",3,,,,,,,,,,
CS3 = 24 # Signaling,3,,,,,,,,,,
"],",3,,,,,,,,,,
if bar_thread:,3,,,,,,,,,,
options = QFileDialog.Options(),3,,,,,,,,,,
"polarity_left=self._polarity_left,",3,,,,,,,,,,
self._ramp_up = ramp_up,3,,,,,,,,,,
if key not in config:,3,,,,,,,,,,
"self.variables[name] = ptr,Type",3,,,,,,,,,,
@classmethod,3,,,,,,,,,,
"speed=speed,",3,,,,,,,,,,
if not memory_map:,3,,,,,,,,,,
self._bar = ProgressBar(endless),3,,,,,,,,,,
self.setLayout(layout1),3,,,,,,,,,,
def Main(self):,3,,,,,,,,,,
"result.append(Remote(False, False, False, True, True))",3,,,,,,,,,,
_ARGS_HELP = {,3,,,,,,,,,,
self.listen(backlog),3,,,,,,,,,,
"sync_mode=ev3.SYNC,",3,,,,,,,,,,
LCS(path)  # NAME,3,,,,,,,,,,
_WAKE_PERIOD = 0.2,3,,,,,,,,,,
else:,3,,,,,,,,,,
duration = 999999999  # unlimited,3,,,,,,,,,,
pass,3,,,,,,,,,,
def on_stop(self):,3,,,,,,,,,,
"Audio_Scraper(pcap,filter_type,output_file).scraper()",3,,,,,,,,,,
target_machine = llvm.Target.from_default_triple().create_target_machine(),3,,,,,,,,,,
"assert value in (1, 2, 3, 4), \",3,,,,,,,,,,
file_add.close(),3,,,,,,,,,,
llvm.initialize_native_target(),3,,,,,,,,,,
"ev3_obj=ev3_obj,",3,,,,,,,,,,
size = len(data),3,,,,,,,,,,
"assert radius_wheel > 0, \",3,,,,,,,,,,
from crypto.modules import hkbit,3,,,,,,,,,,
"for i,typ in enumerate(params_type):",3,,,,,,,,,,
"from typing import Tuple, Callable",3,,,,,,,,,,
"PORT_1,",3,,,,,,,,,,
"self.builder.store(format,ptr)",3,,,,,,,,,,
PORT_B = 2,3,,,,,,,,,,
"value = self.builder.or_(lhs,rhs)",3,,,,,,,,,,
value0 = values[0][3:],3,,,,,,,,,,
"GET_FW_VERS,  # CMD",3,,,,,,,,,,
clearance = float(clearance),3,,,,,,,,,,
info=data_date[i],3,,,,,,,,,,
self.compile(body),3,,,,,,,,,,
port_outer = self._port_left,3,,,,,,,,,,
"LCX(4),  # MODE (rgb)",3,,,,,,,,,,
"LCX(4),  # OFFSET",3,,,,,,,,,,
"Task object, which can be started, stopped and continued.",3,,,,,,,,,,
"return ret, ret_type",3,,,,,,,,,,
@sync_mode.setter,3,,,,,,,,,,
self.process = None,3,,,,,,,,,,
def color_again(self):,3,,,,,,,,,,
else self._port_handle.read()),3,,,,,,,,,,
"opSound,",3,,,,,,,,,,
def Display(case):,3,,,,,,,,,,
"GVX(8),  # speed",3,,,,,,,,,,
args = arg_parser.parse_args(),3,,,,,,,,,,
from requests.packages.urllib3.exceptions import InsecureRequestWarning,3,,,,,,,,,,
fwriter.writerow(data),3,,,,,,,,,,
socket.SOCK_STREAM,3,,,,,,,,,,
signal_start = pos,3,,,,,,,,,,
index += 1,3,,,,,,,,,,
"except (EOFError, KeyboardInterrupt):",3,,,,,,,,,,
if self.sensors_as_dict[port_motor_input(self._port)] is None:,3,,,,,,,,,,
"LVX(48),  # all_inner",3,,,,,,,,,,
client.close(),3,,,,,,,,,,
erase_command.add_argument(,3,,,,,,,,,,
"format = self.builder.bitcast(format, ir.IntType(8).as_pointer())",3,,,,,,,,,,
if fileName:,3,,,,,,,,,,
action_cont=colors.color_again,3,,,,,,,,,,
"USB,",3,,,,,,,,,,
"self._polarity_left * (motor_pos[0] - self._motor_pos[0]),",3,,,,,,,,,,
"global_mem=64,",3,,,,,,,,,,
starts driving the vehicle a turn by given angle and radius,3,,,,,,,,,,
raise NoEV3(,3,,,,,,,,,,
if subdir == folder:,3,,,,,,,,,,
global hole_lmc,3,,,,,,,,,,
freq = self._temperament * 2**(-5/12),3,,,,,,,,,,
)),3,,,,,,,,,,
return self._sync_mode,3,,,,,,,,,,
except IndexError:,3,,,,,,,,,,
return self._ramp_down,3,,,,,,,,,,
ports = serial_ports(),3,,,,,,,,,,
assert name == name_orig,3,,,,,,,,,,
self.path_config_tmp=tk.StringVar(),3,,,,,,,,,,
raise exceptions.DfuAcknowledgeException(response),3,,,,,,,,,,
volume=volume,3,,,,,,,,,,
"if self._protocol in (BLUETOOTH, WIFI):",3,,,,,,,,,,
"LCX(1),  # MODE - Degree",3,,,,,,,,,,
except DfuException:,3,,,,,,,,,,
"LVX(8),  # SOURCE - step2 (DATA32)",3,,,,,,,,,,
"console.print(f""{prefix}|--{key}: ({programs}/{folders})"")",3,"print(f""{prefix}|--{key}:",,,,,,,,,"print(f""{prefix}|--{key}:"
"GET_MINUTES,  # CMD",3,,,,,,,,,,
"LED_GREEN,",3,,,,,,,,,,
"LVX(0),  # file size",3,,,,,,,,,,
"opJr_Lteq32,  # b'\x76'",3,,,,,,,,,,
bar_thread.update),3,,,,,,,,,,
return VehiclePosition(,3,,,,,,,,,,
class Ultrasonic(EV3):,3,,,,,,,,,,
raise FFMPEG(err.decode()),3,,,,,,,,,,
return,3,,,,,,,,,,
self._physical_ev3.introspection(self._verbosity),3,,,,,,,,,,
def delta_time(self):,3,,,,,,,,,,
"_EP_OUT,",3,,,,,,,,,,
global fig,3,,,,,,,,,,
"from datetime import datetime, timedelta",3,,,,,,,,,,
from serial import SerialException,3,,,,,,,,,,
"GVX(20),  # FREE (out)",3,,,,,,,,,,
if data_md5 is None:,3,,,,,,,,,,
self.Main(),3,,,,,,,,,,
"def setTextVal(self, data):",3,,,,,,,,,,
socket_kinds = group.add_mutually_exclusive_group(),3,,,,,,,,,,
CS6 = 48 # Network control,3,,,,,,,,,,
factor = abs(diff_left) / abs(diff_right),3,,,,,,,,,,
"LED,",3,,,,,,,,,,
reply_2 = my_ev3.wait_for_reply(msg_cnt_2),3,,,,,,,,,,
"f""     - Flags:. . . . . . . . . . . . . : {', '.join(flags) if flags else None}"",",3,,,,,,,,,,
ALLE_MEINE_ENTCHEN = {,3,,,,,,,,,,
return math.cos(math.radians(angle)),3,,,,,,,,,,
"LED_ORANGE_PULSE,",3,,,,,,,,,,
"console.print(f""[i] There are {total[0] or 'no'} programs available {f'on {total[1]} folders' if total[1] else ''}!"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"assert self._current_movement is not None, \",3,,,,,,,,,,
self._target_motor_pos = None,3,,,,,,,,,,
return p.statements,3,,,,,,,,,,
self.dhumLabel.setStyleSheet(labelColStyle),3,,,,,,,,,,
colorama.init(autoreset=True),3,,,,,,,,,,
[port_motor_input(self._port)] \,3,,,,,,,,,,
self._print(progress),3,,,,,,,,,,
return 2*delta_t,3,,,,,,,,,,
def tone(,3,,,,,,,,,,
self._target_motor_pos = None,3,,,,,,,,,,
if max(result) <= 255:,3,,,,,,,,,,
def plot(self):,3,,,,,,,,,,
"LCX(step3),  # SOURCE",3,,,,,,,,,,
self.outfile = outfile,3,,,,,,,,,,
rest_pos = target_position - position,3,,,,,,,,,,
import socket,3,,,,,,,,,,
polarity_right,3,,,,,,,,,,
"import sys, os",3,,,,,,,,,,
if args.memory_map:,3,,,,,,,,,,
"reply = self.send_direct_cmd(ops, global_mem=16)",3,,,,,,,,,,
class Menu(Audio_Scraper):,3,,,,,,,,,,
def browse(index):,3,,,,,,,,,,
def tone_again(self):,3,,,,,,,,,,
"EU_ANTEMN,",3,,,,,,,,,,
read_protection_status = self._serial_read(3)[1:],3,,,,,,,,,,
"GVX(0),  # VALUE1 - heading   channel 1",3,,,,,,,,,,
md5_hash.update(chunk),3,,,,,,,,,,
from sly import Parser,3,,,,,,,,,,
"assert 250 <= freq <= 10000, \",3,,,,,,,,,,
"GET_OS_VERS,  # CMD",3,,,,,,,,,,
"(0x8000040, 76543),",3,,,,,,,,,,
hbox3.addWidget(m),3,,,,,,,,,,
llvm.initialize_native_asmprinter(),3,,,,,,,,,,
"from .exceptions import DirCmdError, SysCmdError",3,,,,,,,,,,
return self._polarity_left,3,,,,,,,,,,
"stdin=subprocess.PIPE,",3,,,,,,,,,,
) = struct.unpack(,3,,,,,,,,,,
"label.grid(row=0, column=0)",3,,,,,,,,,,
"assert isinstance(polarity_left, int), \",3,,,,,,,,,,
"opOutput_Stop,",3,,,,,,,,,,
"GVX(4),  # VALUE1",3,,,,,,,,,,
"CONTINUE_DOWNLOAD,",3,,,,,,,,,,
def test_opNop(capsys):,3,,,,,,,,,,
correctly finishes a controlled movement move_for,3,,,,,,,,,,
self._current_movement = {,3,,,,,,,,,,
assert dfu.read_protection_status,3,,,,,,,,,,
freq = self._temperament * 2**(-9/12),3,,,,,,,,,,
"msg_cnt_reply,",3,,,,,,,,,,
try:,3,,,,,,,,,,
"devices = hid.enumerate(_ID_VENDOR_LEGO, _ID_PRODUCT_EV3)",3,,,,,,,,,,
GVX(global_offset) - busy state of left motor (DATA8),3,,,,,,,,,,
"LVX(36),  # done_inner = pos_inner - start_pos_inner",3,,,,,,,,,,
"LVX(48),  # last_outer = pos_outer - last_pos_outer",3,,,,,,,,,,
"opOutput_Speed,",3,,,,,,,,,,
if delta_time is not None:,3,,,,,,,,,,
sync_mode=self._sync_mode,3,,,,,,,,,,
hole_lmc = float(hole_lmc),3,,,,,,,,,,
degrees for ramp-up,3,,,,,,,,,,
[,3,,,,,,,,,,
raise DirCmdError(,3,,,,,,,,,,
elif pos == 0:,3,,,,,,,,,,
files.append((,3,,,,,,,,,,
"url = f""./person.{type}?{method}={query}&style={style}&prettyPrint={str(prettyPrint).lower()}&confidence={confidence}""",3,,,,,,,,,,
"from .exceptions import SensorError, PortInUse",3,,,,,,,,,,
break # invalid,3,,,,,,,,,,
self._reply_buffer[msg_cnt] = reply,3,,,,,,,,,,
import hid,3,,,,,,,,,,
LEGO EV3 direct commands - ev3,3,,,,,,,,,,
return self._version,3,,,,,,,,,,
def run_code(code):,3,,,,,,,,,,
"self._polarity_left * step_outer,",3,,,,,,,,,,
start moving the motor for a given duration.,3,,,,,,,,,,
MotorPositions,3,,,,,,,,,,
length = raw_options[index + 1],3,,,,,,,,,,
if self._host is not None:,3,,,,,,,,,,
"opMove32_F,",3,,,,,,,,,,
total[0] += 1,3,,,,,,,,,,
"url = f""./company/search.json?companyName={query}&sort={sort}&prettyPrint={str(prettyPrint).lower()}""",3,,,,,,,,,,
self._callback = callback,3,,,,,,,,,,
return Network(,3,,,,,,,,,,
requirements: set = set(),3,,,,,,,,,,
returns timespan to next call [s],3,,,,,,,,,,
loopz = loopz + 1,3,,,,,,,,,,
"LCX(4),",3,,,,,,,,,,
pass,3,,,,,,,,,,
hbox1.addWidget(self.portCombox),3,,,,,,,,,,
idProduct=_ID_PRODUCT_EV3,3,,,,,,,,,,
self.visit_def(branch),3,,,,,,,,,,
"LVX(40),  # done_inner / done_outer",3,,,,,,,,,,
duration = (len(data) + pause) / 8000,3,,,,,,,,,,
from .sound import (,3,,,,,,,,,,
"reply=reply,",3,,,,,,,,,,
The speed is lowered down if:,3,,,,,,,,,,
class HiddenService(object):,3,,,,,,,,,,
def __len__(self):,3,,,,,,,,,,
def move_by(,3,,,,,,,,,,
class HKBit(base.Program):,3,,,,,,,,,,
self._port_handle.write(,3,,,,,,,,,,
for command in commands:,3,,,,,,,,,,
offset = address + size - size_remain,3,,,,,,,,,,
"LVX(40),  # ratio_done",3,,,,,,,,,,
"holds netto data only (operations), these fields are added:",3,,,,,,,,,,
yar1 = [],3,,,,,,,,,,
return length / rate,3,,,,,,,,,,
"socket.add_argument_group(self.parser, address_required = True)",3,,,,,,,,,,
data = self.send_direct_cmd(,3,,,,,,,,,,
hbox3 = QHBoxLayout(),3,,,,,,,,,,
elif args.executable:,3,,,,,,,,,,
global ax1,3,,,,,,,,,,
result = [],3,,,,,,,,,,
verbosity=0,3,,,,,,,,,,
data[pos:pos+part_size],3,,,,,,,,,,
"opJr_Lt32,  # b'\x66'",3,,,,,,,,,,
dump = dfu.read(memory_map=memory_map),3,,,,,,,,,,
commands = arg_parser.add_subparsers(),3,,,,,,,,,,
border-style: outset;,3,,,,,,,,,,
def quit(self):,3,,,,,,,,,,
direct command replies error,3,,,,,,,,,,
from globalf import resource_path,3,,,,,,,,,,
"return value,Type",3,,,,,,,,,,
step1 = round(abs(degrees) * ramp_up / (ramp_up + ramp_down)),3,,,,,,,,,,
EOF_list=[],3,,,,,,,,,,
tmp1=glob.glob(tmp1),3,,,,,,,,,,
"LCS(parent_path),  # NAME",3,,,,,,,,,,
"LED_RED_PULSE,",3,,,,,,,,,,
self.setLayout(self.layout2),3,,,,,,,,,,
handles deletions,3,,,,,,,,,,
expected sensor is not connected,3,,,,,,,,,,
"x and x-coordinates are in meter,",3,,,,,,,,,,
_ = self.version,3,,,,,,,,,,
self._serial_write(data),3,,,,,,,,,,
self.process.kill(),3,,,,,,,,,,
"self.resize(972, 600)",3,,,,,,,,,,
"assert polarity_right in (-1, 1), \",3,,,,,,,,,,
GVX(8)  # VALUE1 blue (output),3,,,,,,,,,,
"EV3_LARGE_MOTOR,",3,,,,,,,,,,
"STD,",3,,,,,,,,,,
if done != len(data):,3,,,,,,,,,,
raise SysCmdError(,3,,,,,,,,,,
return reply[6:len_data],3,,,,,,,,,,
local_mem,3,,,,,,,,,,
self._device = hid.device(),3,,,,,,,,,,
pre_byte = curr_byte,3,,,,,,,,,,
reads text more slowly. Defaults to False,3,,,,,,,,,,
sleep(0.1),3,,,,,,,,,,
def test_read_protection_status(dfu):,3,,,,,,,,,,
def on_start(self):,3,,,,,,,,,,
pause_start is not None and,3,,,,,,,,,,
self._ramp_up = value,3,,,,,,,,,,
"LED_ORANGE,",3,,,,,,,,,,
"assert speed is None or isinstance(speed, int), \",3,,,,,,,,,,
"m = PlotCanvas(self, width =5, height=4)",3,,,,,,,,,,
rb[i].pack(),3,,,,,,,,,,
self.builder.position_at_start(until_loop_entry),3,,,,,,,,,,
arg_parser.add_argument(,3,,,,,,,,,,
host_str = self._physical_ev3._host,3,,,,,,,,,,
if mac_addr == self._host.upper():,3,,,,,,,,,,
"VehiclePosition,",3,,,,,,,,,,
_COMMAND = {,3,,,,,,,,,,
+ xml_list[i],3,,,,,,,,,,
return self._wait_for_system_reply(,3,,,,,,,,,,
elif self._physical_ev3._protocol == WIFI:,3,,,,,,,,,,
address_families = group.add_mutually_exclusive_group(),3,,,,,,,,,,
assert led_pattern in (,3,,,,,,,,,,
path_dest,3,,,,,,,,,,
pid = self._serial_read(size),3,,,,,,,,,,
"QSizePolicy.Expanding,",3,,,,,,,,,,
_locked=True,3,,,,,,,,,,
tld = self._tld,3,,,,,,,,,,
self._delta_time = .05,3,,,,,,,,,,
types = [],3,,,,,,,,,,
callback=tracking_callback,3,,,,,,,,,,
while rest > 0:,3,,,,,,,,,,
"from .exceptions import NoEV3, DirCmdError, SysCmdError",3,,,,,,,,,,
"console.print(f"" -  {sdn}"")",3,"print(f""",,,,,,,,,"print(f"""
elif self._port_right == PORT_C:,3,,,,,,,,,,
stop_it = False,3,,,,,,,,,,
class DNAsk(Program):,3,,,,,,,,,,
if self.sensors_as_dict[self._port] != EV3_GYRO:,3,,,,,,,,,,
"value = self.builder.sdiv(lhs,rhs)",3,,,,,,,,,,
return os.path.join(relative),3,,,,,,,,,,
self._sync_mode = SYNC,3,,,,,,,,,,
tld,3,,,,,,,,,,
AF21 = 18 #Low drop probability,3,,,,,,,,,,
self._current_movement = None,3,,,,,,,,,,
if self._device is not None:,3,,,,,,,,,,
"engine = llvm.create_mcjit_compiler(llvm_ir_parsed, target_machine)",3,,,,,,,,,,
raise exceptions.DfuException(,3,,,,,,,,,,
if curr_size == size:,3,,,,,,,,,,
"def visit_if(self,branch):",3,,,,,,,,,,
"find_all=True,",3,,,,,,,,,,
value 0 says: never shut down,3,,,,,,,,,,
def inc(self):,3,,,,,,,,,,
api = fullcontact.API(self.arguments.api_key),3,,,,,,,,,,
last_caught = ex,3,,,,,,,,,,
length (sec.) of the tone (no duration means forever),3,,,,,,,,,,
"rc, handle, part = struct.unpack(",3,,,,,,,,,,
def move_for(,3,,,,,,,,,,
from .touch import Touch,3,,,,,,,,,,
"os_build,",3,,,,,,,,,,
self.send_direct_cmd(,3,,,,,,,,,,
"self.authenticate(password=password, chroot_path=chroot_path, protocolinfo_response=protocolinfo_response)",3,,,,,,,,,,
"assert duration is None or duration > 0, \",3,,,,,,,,,,
"tmp = usb.util.get_string(dev, dev.iSerialNumber).upper()",3,,,,,,,,,,
from .functions import (,3,,,,,,,,,,
self._msg_cnt += 1,3,,,,,,,,,,
class FullContact(Program):,3,,,,,,,,,,
if len(polar_check) != 0:,3,,,,,,,,,,
self._polarity_left * self._motor_pos[0],3,,,,,,,,,,
if not self._position and self._bar_len < self._ENDLESS_BAR_LEN:,3,,,,,,,,,,
"assert value <= 100, \",3,,,,,,,,,,
"assert isinstance(freq, Number), \",3,,,,,,,,,,
port = matcher.group(2),3,,,,,,,,,,
self.setblocking(blocking),3,,,,,,,,,,
"if isinstance(data, Sequence):",3,,,,,,,,,,
volume [0 - 100] of tone (defaults to attribute volume),3,,,,,,,,,,
while len(key) < len(data):,3,,,,,,,,,,
raise NoEV3(,3,,,,,,,,,,
reply[3],3,,,,,,,,,,
Flag if ending with floating motor (False) or active brake (True).,3,,,,,,,,,,
if left < 2:,3,,,,,,,,,,
"name,",3,,,,,,,,,,
cmd,3,,,,,,,,,,
tail = self._BAR_MAX_LEN - self._bar_len - self._position,3,,,,,,,,,,
hhbox1.addStretch(),3,,,,,,,,,,
"super(socks.socksocket, self).__init__(family, type, proto, fileno)",3,,,,,,,,,,
"READY_RAW,",3,,,,,,,,,,
reply = my_ev3.wait_for_reply(msg_cnt),3,,,,,,,,,,
"protocol=protocol,",3,,,,,,,,,,
if self.ihl > 5:,3,,,,,,,,,,
qr.moveCenter(cp),3,,,,,,,,,,
"reply = self.send_direct_cmd(ops, global_mem=32)",3,,,,,,,,,,
result = [],3,,,,,,,,,,
self._position += 1,3,,,,,,,,,,
"SET_VOLUME,",3,,,,,,,,,,
index += length,3,,,,,,,,,,
"assert ramp_down >= 0, \",3,,,,,,,,,,
if not self._commands:,3,,,,,,,,,,
def center(self):,3,,,,,,,,,,
ev3_obj,3,,,,,,,,,,
if speed_orig != speed:,3,,,,,,,,,,
self._msg_cnt = 41,3,,,,,,,,,,
"f""     - Fragment Offset. . . . . . . . .: 0x{self.fragment_offset:04x} ({self.fragment_offset})"",",3,,,,,,,,,,
"LIST_FILES,",3,,,,,,,,,,
pass,3,,,,,,,,,,
"tk.Entry(self, textvariable=self.path_s1a_cal_tmp, width=50, borderwidth=2),]",3,,,,,,,,,,
from remote.web.modules.session import Session,3,,,,,,,,,,
hhbox2 = QHBoxLayout(),3,,,,,,,,,,
EV3_TOUCH,3,,,,,,,,,,
"GVX(4),  # VALUE2 - proximity channel 1",3,,,,,,,,,,
with Stm32UartDfu(args.port) as dfu:,3,,,,,,,,,,
self._port_handle = serial.Serial(,3,,,,,,,,,,
return int(self._BAR_MAX_LEN * progress / 100),3,,,,,,,,,,
self.parser = argparse.ArgumentParser(),3,,,,,,,,,,
"fig = Figure(figsize=(width, height), dpi=dpi)",3,,,,,,,,,,
"opJr_Eq32,",3,,,,,,,,,,
"opMath,",3,,,,,,,,,,
class DSCP(Enum):,3,,,,,,,,,,
types.append(_),3,,,,,,,,,,
key += key,3,,,,,,,,,,
degrees for ramp-up (default is 30),3,,,,,,,,,,
"GVX(0),  # VALUE1 - channel 1",3,,,,,,,,,,
filter_type = self.filter,3,,,,,,,,,,
if (speed > 0 and position >= target_position):,3,,,,,,,,,,
LCX(self._port_left + self._port_right)  # NOS,3,,,,,,,,,,
(,3,,,,,,,,,,
all_left = (,3,,,,,,,,,,
test = self.builder.not_(test),3,,,,,,,,,,
hw_version,3,,,,,,,,,,
from struct import unpack,3,,,,,,,,,,
font-size: 30pt;,3,,,,,,,,,,
from llvmlite import ir,3,,,,,,,,,,
self._target_position = None,3,,,,,,,,,,
"LVX(4),  # SOURCE1 - step1 (DATA32)",3,,,,,,,,,,
key = key[:len(data)],3,,,,,,,,,,
content=f.read(),3,,,,,,,,,,
from network.modules.packets.ipv4 import IPv4,3,,,,,,,,,,
end = [,3,,,,,,,,,,
my_ev3.verbosity = 0,3,,,,,,,,,,
"container.grid_rowconfigure(0, weight=1)",3,,,,,,,,,,
self.dtemLabel.setStyleSheet(labelColStyle),3,,,,,,,,,,
AF12 = 12 #Med drop probability,3,,,,,,,,,,
erase_size = len(firmware),3,,,,,,,,,,
"flag, if repeatedly playing",3,,,,,,,,,,
if not reply:,3,,,,,,,,,,
return self._channel,3,,,,,,,,,,
motor_pos,3,,,,,,,,,,
self._lock.acquire(),3,,,,,,,,,,
self._physical_ev3 = ev3_obj._physical_ev3,3,,,,,,,,,,
t[field] = {},3,,,,,,,,,,
"assert value in (PORT_A, PORT_B, PORT_C, PORT_D), \",3,,,,,,,,,,
text=info[i]),3,,,,,,,,,,
fact = 2.0 * radius_turn * sin(radians(0.5 * angle)),3,,,,,,,,,,
"opDivF,",3,,,,,,,,,,
"stdout=subprocess.PIPE,",3,,,,,,,,,,
with open(args.memory_map) as map_file:,3,,,,,,,,,,
from src import run_code,3,,,,,,,,,,
(ramp_up_time + ramp_down_time),3,,,,,,,,,,
flag if backwards,3,,,,,,,,,,
port_inner = self._port_left,3,,,,,,,,,,
"LVX(0),  # DESTINATION - sign of diff (DATAF)",3,,,,,,,,,,
"for root, dirnames, filenames in os.walk(os.path.join(self.location, folder)):",3,,,,,,,,,,
for i in self._device.configurations()[0].interfaces():,3,,,,,,,,,,
def _start_drive_turn(,3,,,,,,,,,,
"GVX(0),",3,,,,,,,,,,
cp = QDesktopWidget().availableGeometry().center(),3,,,,,,,,,,
hhbox3.addStretch(),3,,,,,,,,,,
my_ev3 = ev3.EV3(,3,,,,,,,,,,
precedence = (,3,,,,,,,,,,
"CONTINUE_UPLOAD,",3,,,,,,,,,,
@speed.setter,3,,,,,,,,,,
),3,,,,,,,,,,
"LVX(4),  # file handle",3,,,,,,,,,,
if abs(all_left) < abs(all_right):,3,,,,,,,,,,
"assert ramp_down is None or isinstance(ramp_down, int), \",3,,,,,,,,,,
class TwoWheelVehicle(EV3):,3,,,,,,,,,,
"import colorama, socket, socks, os",3,,,,,,,,,,
"PORT_A_SENSOR,",3,,,,,,,,,,
self.pixmap = pixmap,3,,,,,,,,,,
"copyfile(src, dst)",3,,,,,,,,,,
"_ID_VENDOR_LEGO,",3,,,,,,,,,,
step1_right = ramp_up,3,,,,,,,,,,
from remote.web.apis.modules import censys as Censys,3,,,,,,,,,,
"btn1.grid(row=9, column=8)",3,,,,,,,,,,
QSizePolicy.Expanding),3,,,,,,,,,,
elif values[n] == 9:,3,,,,,,,,,,
rawclose1=self.ser.readline(),3,,,,,,,,,,
if (units == None):,3,,,,,,,,,,
step3_right = int(factor**2 * step3_left),3,,,,,,,,,,
yar3 = [],3,,,,,,,,,,
import struct,3,,,,,,,,,,
dir=fdialog.askopenfilename(,3,,,,,,,,,,
elif self._physical_ev3._protocol == BLUETOOTH:,3,,,,,,,,,,
def drive_turn(,3,,,,,,,,,,
LEGO EV3 direct commands - constants,3,,,,,,,,,,
):,3,,,,,,,,,,
requested port already used,3,,,,,,,,,,
"args=(duration,),",3,,,,,,,,,,
"handle,",3,,,,,,,,,,
"import stem.interpreter, sys",3,,,,,,,,,,
"GVX(global_offset),  # VALUE1",3,,,,,,,,,,
vehicle_pos_x += dist * cos(radians(orientation)),3,,,,,,,,,,
self.groupBox2.setStyleSheet(groupStyle),3,,,,,,,,,,
return p.params,3,,,,,,,,,,
csf.run(),3,,,,,,,,,,
current positions of left and right motor [degree],3,,,,,,,,,,
_EP_OUT = 0x01,3,,,,,,,,,,
class PlotCanvas(FigureCanvas):,3,,,,,,,,,,
raise ValueError(,3,,,,,,,,,,
return self.remotes[self._channel - 1],3,,,,,,,,,,
self._device = hid.device(),3,,,,,,,,,,
},3,,,,,,,,,,
@polarity_right.setter,3,,,,,,,,,,
self._ramp_down = value,3,,,,,,,,,,
if self._progress == 100 or self._progress == -1:,3,,,,,,,,,,
elif index == 1 or index == 2:,3,,,,,,,,,,
@delta_time.setter,3,,,,,,,,,,
elif self._bar_len > 0:,3,,,,,,,,,,
"from thread_task import Task, Repeated, Periodic",3,,,,,,,,,,
"args=(distance,),",3,,,,,,,,,,
"result.append(Remote(False, False, True, True, False))",3,,,,,,,,,,
self.builder.position_at_start(while_loop_entry),3,,,,,,,,,,
"EV3_COLOR,",3,,,,,,,,,,
all connected sensors and motors at all ports (as named tuple Sensors),3,,,,,,,,,,
def sizeHint(self):,3,,,,,,,,,,
GVX(global_offset + 1)  # BUSY (DATA8) - output,3,,,,,,,,,,
"Lb.insert(i,date_list[i])",3,,,,,,,,,,
"LCX(5),  # TYPE",3,,,,,,,,,,
mem_map = None,3,,,,,,,,,,
progress_update(int(100 * (len(data) - size_remain) / len(data))),3,,,,,,,,,,
self.proc_sh_tmp=tk.StringVar(),3,,,,,,,,,,
"for key, value in service.__dict__.items():",3,,,,,,,,,,
break,3,,,,,,,,,,
t_colors.stop,3,,,,,,,,,,
"REPEAT,",3,,,,,,,,,,
YELLOWCOLOR = 4,3,,,,,,,,,,
self._device.detach_kernel_driver(i.index),3,,,,,,,,,,
"zero = ir.Constant(ir.IntType(32),0)",3,,,,,,,,,,
"GVX(8),  # speed += 1",3,,,,,,,,,,
"assert firmware == dfu.read(address, len(firmware))",3,,,,,,,,,,
@polarity_left.setter,3,,,,,,,,,,
"LVX(40),  # done_outer = pos_outer - start_pos_outer",3,,,,,,,,,,
Send a direct command to the LEGO EV3,3,,,,,,,,,,
ptr = self.builder.alloca(typ),3,,,,,,,,,,
"language, e.g. 'it', 'fr, 'de', 'en' (default)",3,,,,,,,,,,
class Session(requests.Session):,3,,,,,,,,,,
def __init__(,3,,,,,,,,,,
return wait,3,,,,,,,,,,
if sensor_type == 126:,3,,,,,,,,,,
rb=[],3,,,,,,,,,,
self.descriptor = self.controller.get_hidden_service_descriptor(address),3,,,,,,,,,,
class socket(socket):,3,,,,,,,,,,
from matplotlib import style,3,,,,,,,,,,
"LCX(100),",3,,,,,,,,,,
"tk.Frame.__init__(self, parent)",3,,,,,,,,,,
"ops,",3,,,,,,,,,,
"def data(Type,value):",3,,,,,,,,,,
"self.send_direct_cmd(ops, global_mem=4)",3,,,,,,,,,,
progressBar = QProgressBar(splash),3,,,,,,,,,,
"size, handle = struct.unpack(",3,,,,,,,,,,
"btn_scene.grid(row=2, column=1)",3,,,,,,,,,,
"LCX(0),  # MODE (Touch)",3,,,,,,,,,,
self.path_dem_tmp=tk.StringVar(),3,,,,,,,,,,
self.groupBox4.setLayout(hvbox4),3,,,,,,,,,,
def ramp_down_time(self):,3,,,,,,,,,,
progressBar.setValue(i),3,,,,,,,,,,
an existing EV3 object (its connections will be used),3,,,,,,,,,,
upbeat_duration = 0,3,,,,,,,,,,
angle = (,3,,,,,,,,,,
pos >= (pause_start + safety_gap + min_gap),3,,,,,,,,,,
self._ramp_up_time = value,3,,,,,,,,,,
"MOVE,",3,,,,,,,,,,
"def def_params(self,p):",3,,,,,,,,,,
FRERE_JACQUES = {,3,,,,,,,,,,
"btn1.grid(row=10, column=15)",3,,,,,,,,,,
"assert ramp_down_time is None or ramp_down_time >= 0, \",3,,,,,,,,,,
if self._device is None:,3,,,,,,,,,,
return Sensors(,3,,,,,,,,,,
"CONTINUE_LIST_FILES,",3,,,,,,,,,,
for connection in self.connections.copy().values():,3,,,,,,,,,,
continues stopped movement,3,,,,,,,,,,
if self._host is None and len(devices) == 1:,3,,,,,,,,,,
import os,3,,,,,,,,,,
"LCX(0),  # RIGHT",3,,,,,,,,,,
self._tread = tread,3,,,,,,,,,,
"GVX(82),  # NAME (out)",3,,,,,,,,,,
"host=host,",3,,,,,,,,,,
self._bar_len += 1,3,,,,,,,,,,
"assert port_left != port_right, \",3,,,,,,,,,,
port_outer = self._port_right,3,,,,,,,,,,
os.chdir(Dir_proc),3,,,,,,,,,,
name_tmp = struct.unpack(,3,,,,,,,,,,
result.append(port),3,,,,,,,,,,
"LED_RED_FLASH,",3,,,,,,,,,,
"def on_disconnect(self, socket):",3,,,,,,,,,,
reply = self.send_direct_cmd(,3,,,,,,,,,,
"LCS(path_source),  # SOURCE",3,,,,,,,,,,
"opOutput_Step_Sync,",3,,,,,,,,,,
"LCX(41),  # OFFSET",3,,,,,,,,,,
step_inner = ratio * step_outer,3,,,,,,,,,,
"CONTINUE_LIST_FILES,",3,,,,,,,,,,
"LVX(16),",3,,,,,,,,,,
date_list.append(tmp[tmp_index-8:tmp_index]),3,,,,,,,,,,
"def paintEvent(self, event):",3,,,,,,,,,,
delta=date_list[j]-date_list[i],3,,,,,,,,,,
"EV3_MEDIUM_MOTOR,",3,,,,,,,,,,
"LED_ORANGE_FLASH,",3,,,,,,,,,,
self.ser.close(),3,,,,,,,,,,
"Hexnumber,",3,,,,,,,,,,
"opOutput_Start,",3,,,,,,,,,,
"frequency of tone, range [250 - 10000]",3,,,,,,,,,,
PORT_D_SENSOR,3,,,,,,,,,,
get_id_command.set_defaults(func=dfu_handler.get_id),3,,,,,,,,,,
"READY_RAW,  # CMD",3,,,,,,,,,,
form.show(),3,,,,,,,,,,
while size_remain:,3,,,,,,,,,,
freq *= 4,3,,,,,,,,,,
"LED_RED,",3,,,,,,,,,,
self._start_move_to(,3,,,,,,,,,,
"idle minutes until EV3 shuts down, values from 0 to 120",3,,,,,,,,,,
self._version = None,3,,,,,,,,,,
"LVX(4),  # DESTINATION - to_position (DATAF)",3,,,,,,,,,,
) for byte in my_ev3.send_direct_cmd(ops),3,,,,,,,,,,
GVX(global_offset) - position of left motor (DATA32),3,,,,,,,,,,
self._bar_len += 1,3,,,,,,,,,,
all_right = (,3,,,,,,,,,,
"GVX(EV3_IR),  # TYPE",3,,,,,,,,,,
"censys = Censys.API(self.arguments.api_id, self.arguments.api_secret)",3,,,,,,,,,,
"opOutput_Reset,",3,,,,,,,,,,
"except (OSError, serial.SerialException):",3,,,,,,,,,,
"reply = self.send_direct_cmd(ops, global_mem=4)",3,,,,,,,,,,
"tk.Entry(self, textvariable=self.Dir_image_tmp, width=50, borderwidth=2),",3,,,,,,,,,,
Not_s1a_cal_aux=self.Not_s1a_cal_aux_tmp.get(),3,,,,,,,,,,
action_cont=tones.tone_again,3,,,,,,,,,,
hosts.update(value),3,,,,,,,,,,
qr = self.frameGeometry(),3,,,,,,,,,,
"assert isinstance(temperament, int), \",3,,,,,,,,,,
"self.flags = {0: self.raw_flags&1, 1: self.raw_flags&2, 2: self.raw_flags&4}",3,,,,,,,,,,
s = serial.Serial(port),3,,,,,,,,,,
PORT_A = 1,3,,,,,,,,,,
position = self.position,3,,,,,,,,,,
speed = self._speed,3,,,,,,,,,,
struct.pack(,3,,,,,,,,,,
allows a clean exit from with block,3,,,,,,,,,,
"args.func(dfu, args)",3,,,,,,,,,,
"NAME,",3,,,,,,,,,,
f'found EV3 devices: {hosts} but not {self._host}',3,,,,,,,,,,
UDPSock.close(),3,,,,,,,,,,
reply_msg_cnt = reply[2:4],3,,,,,,,,,,
drives the vehicle straight by a given distance,3,,,,,,,,,,
"LVX(40),  # done_outer as DATAF",3,,,,,,,,,,
finally opOutput_Step_Speed does the change of the movement.,3,,,,,,,,,,
EV3_TOUCH = 16,3,,,,,,,,,,
flag if stopping with active brake,3,,,,,,,,,,
"f""     - Total Length. . . . . . . . . . : {self.total_length} bytes"",",3,,,,,,,,,,
"assert isinstance(global_mem, int), \",3,,,,,,,,,,
"edTxt[0].insert(0,dir)",3,,,,,,,,,,
"(step1_right / ramp_up)**2 if ramp_up > 0 else 1,",3,,,,,,,,,,
from PyQt5.QtWidgets import QSizePolicy,3,,,,,,,,,,
"ev3_obj=ev3_obj,",3,,,,,,,,,,
end_time = time(),3,,,,,,,,,,
import shutil,3,,,,,,,,,,
wait for reply if there is one.,3,,,,,,,,,,
client = socket.socket(**kwargs),3,,,,,,,,,,
Ask the LEGO EV3 for a system command reply and wait until received,3,,,,,,,,,,
orientation is in degree [-180 - 180],3,,,,,,,,,,
"def function(name,def_params,ret,body):",3,,,,,,,,,,
"FigureCanvas.__init__(self, fig)",3,,,,,,,,,,
p.params.append(p.param),3,,,,,,,,,,
self.data = buffer[self.data_offset:],3,,,,,,,,,,
fwriter=csv.writer(file_add),3,,,,,,,,,,
freq = self._temperament * 2**(-7/12),3,,,,,,,,,,
xml_list.append(tmp2[-1]),3,,,,,,,,,,
cls(),3,,,,,,,,,,
duration of the movement [sec.],3,,,,,,,,,,
"ASYNC - if there is a reply, it must explicitly be asked for.",3,,,,,,,,,,
info2=info+datetime.timedelta(1),3,,,,,,,,,,
@position.setter,3,,,,,,,,,,
"return utils.if_stmt(p.statements,orelse=[],test=p.expr)",3,,,,,,,,,,
finally:,3,,,,,,,,,,
"edTxt[i].grid(row=2*i+2,column=0)",3,,,,,,,,,,
return None,3,,,,,,,,,,
"opJr_Neq32,",3,,,,,,,,,,
try:,3,,,,,,,,,,
self.parser.epilog = self.epilog,3,,,,,,,,,,
"STD - direct commands with no reply are handled like ASYNC,",3,,,,,,,,,,
self._motor_pos = motor_pos,3,,,,,,,,,,
reply,3,,,,,,,,,,
elif values[n] == 7:,3,,,,,,,,,,
class server(socket):,3,,,,,,,,,,
"colors.color_next,",3,,,,,,,,,,
from PyQt5.QtCore import *,3,,,,,,,,,,
if verbosity > 0:,3,,,,,,,,,,
self._delta_time = .2,3,,,,,,,,,,
raise,3,,,,,,,,,,
"ramp_up_time=ramp_up_time,",3,,,,,,,,,,
p.def_params.append(p.def_param),3,,,,,,,,,,
chunk = self.arguments.input.read(0xFFF),3,,,,,,,,,,
"self.on_recv(address, data)",3,,,,,,,,,,
speed *= round(,3,,,,,,,,,,
"from PyQt5.QtWidgets import (QWidget, QPushButton, QLabel, QHBoxLayout, QVBoxLayout, QGroupBox, QComboBox, QDesktopWidget, QMessageBox, QFileDialog)",3,,,,,,,,,,
"opMove32_32,",3,,,,,,,,,,
S1AB=S1AB[-1],3,,,,,,,,,,
import argparse,3,,,,,,,,,,
from socket import *,3,,,,,,,,,,
"ptr,_ = self.variables[name]",3,,,,,,,,,,
class Options(Structure):,3,,,,,,,,,,
global Not_s1a_cal_aux,3,,,,,,,,,,
GVX(0)  # BUSY,3,,,,,,,,,,
references: dict = {},3,,,,,,,,,,
"LCX(self._port),  # NO",3,,,,,,,,,,
"LCX(5),  # OFFSET",3,,,,,,,,,,
if len(sys.argv) >= 2:,3,,,,,,,,,,
"assert ramp_up is None or ramp_up >= 0, \",3,,,,,,,,,,
else:,3,,,,,,,,,,
Establishes a connection to a LEGO EV3 device,3,,,,,,,,,,
speed = int(speed * duration / (ramp_up_time + ramp_down_time)),3,,,,,,,,,,
"edTxt2.grid(row=7,column=3, columnspan=5)",3,,,,,,,,,,
from biovar import *,3,,,,,,,,,,
"LCX(0),  # STEP1",3,,,,,,,,,,
"READY_SI,  # CMD",3,,,,,,,,,,
data_date.sort(),3,,,,,,,,,,
verbosity,3,,,,,,,,,,
step_left = Decimal(,3,,,,,,,,,,
EV3 vehicle with two drived wheels,3,,,,,,,,,,
pass,3,,,,,,,,,,
os_build,3,,,,,,,,,,
f'({self.name})',3,,,,,,,,,,
dfu.erase(),3,,,,,,,,,,
return len(self.raw_buffer),3,,,,,,,,,,
"action_stop=self.change_color,",3,,,,,,,,,,
self._channel = value,3,,,,,,,,,,
def run(self):,3,,,,,,,,,,
"direction=direction,",3,,,,,,,,,,
_control=_control,3,,,,,,,,,,
self._devices.remove(self._host),3,,,,,,,,,,
if self._polarity_left == -1 and self._polarity_left == -1:,3,,,,,,,,,,
def start_move_by(,3,,,,,,,,,,
LCS(value)  # NAME,3,,,,,,,,,,
if not self.arguments.key:,3,,,,,,,,,,
"LVX(8),  # LEFT - step2 (DATA32)",3,,,,,,,,,,
if verbosity is not None and verbosity > 0:,3,,,,,,,,,,
self._tracking.update(,3,,,,,,,,,,
"ports[i],  # NO",3,,,,,,,,,,
key = urandom(len(data)),3,,,,,,,,,,
"result.append(Remote(False, False, True, False, True))",3,,,,,,,,,,
"mem_map, bar_thread.update)",3,,,,,,,,,,
self.arguments.key.write(os.urandom(0xFFFF)),3,,,,,,,,,,
self._lock.acquire(),3,,,,,,,,,,
xar.append(int(x)),3,,,,,,,,,,
LEGO Mindstorms EV3 direct commands - vehicle,3,,,,,,,,,,
flag if ending with floating motor (False) or active brake (True).,3,,,,,,,,,,
"Binnumber,",3,,,,,,,,,,
"wait = send_and_play(data[signal_start:], volume=volume)",3,,,,,,,,,,
"OR,",3,,,,,,,,,,
return response.json(),3,,,,,,,,,,
self.ESD_YN_tmp=tk.IntVar(),3,,,,,,,,,,
hvbox2.addLayout(hhbox2),3,,,,,,,,,,
"sound volume [%], values from 0 to 100",3,,,,,,,,,,
"fw_vers,",3,,,,,,,,,,
"opInput_Device,  # operation",3,,,,,,,,,,
parser.parse(tokens),3,,,,,,,,,,
"reply[2],",3,,,,,,,,,,
self.layout2.addLayout(hbox3),3,,,,,,,,,,
if self._callback is not None:,3,,,,,,,,,,
self.setTextVal(data),3,,,,,,,,,,
font-size: 60pt;,3,,,,,,,,,,
"from PyQt5.QtWidgets import QDesktopWidget, QAbstractButton",3,,,,,,,,,,
"LVX(4),  # RESULT - abs(diff) (DATAF)",3,,,,,,,,,,
Type = ir.FloatType(),3,,,,,,,,,,
"opOutput_Test,",3,,,,,,,,,,
elif ESD_YN==0:,3,,,,,,,,,,
"value = self.builder.and_(lhs,rhs)",3,,,,,,,,,,
"GET_LBATT,",3,,,,,,,,,,
return True if busy else False,3,,,,,,,,,,
if self.sensors_as_dict[port_motor_input(self._port)] == EV3_LARGE_MOTOR:,3,,,,,,,,,,
data += chunk,3,,,,,,,,,,
"self._socket.connect((self._host, 1))",3,,,,,,,,,,
step = distance * 360 / (2 * pi * self._radius_wheel),3,,,,,,,,,,
"value = self.builder.fmul(lhs,rhs)",3,,,,,,,,,,
"self.ser = serial.Serial(port, baudrate = 19200, timeout=0.5, write_timeout = 1)",3,,,,,,,,,,
chunk = f.read(4096),3,,,,,,,,,,
NXT_ULTRASONIC = 5,3,,,,,,,,,,
hosts = [],3,,,,,,,,,,
self.send_direct_cmd(opSound + BREAK),3,,,,,,,,,,
"LCX(step1_right),  # STEP1",3,,,,,,,,,,
from .ev3 import EV3,3,,,,,,,,,,
"def __init__(self, pcap, filter, outfile):",3,,,,,,,,,,
"self.list(args.list, args.debug)",3,,,,,,,,,,
"_SYSTEM_REPLY,",3,,,,,,,,,,
GVX(8),3,,,,,,,,,,
self.connections[address] = sock,3,,,,,,,,,,
hhbox1 = QHBoxLayout(),3,,,,,,,,,,
if step2_right < 0:,3,,,,,,,,,,
direction,3,,,,,,,,,,
signal_start = None,3,,,,,,,,,,
"LVX(24),  # step1",3,,,,,,,,,,
"data=[value0, value1, value2, value3]",3,,,,,,,,,,
self.visit_assign(branch),3,,,,,,,,,,
"opOutput_Reset,",3,,,,,,,,,,
def cosd(angle):,3,,,,,,,,,,
self.send_direct_cmd(,3,,,,,,,,,,
"assert isinstance(degrees, int), \",3,,,,,,,,,,
self._temperament = value,3,,,,,,,,,,
"def handle(sock, address):",3,,,,,,,,,,
elif self._port == PORT_B:,3,,,,,,,,,,
"filename, line, function, text = traceback.extract_tb(e.__traceback__)[-1]",3,,,,,,,,,,
if reply[4:5] == _SYSTEM_REPLY:,3,,,,,,,,,,
"self._socket.connect((addr[0], int(port)))",3,,,,,,,,,,
self.titlePage2.setStyleSheet(titlestyle),3,,,,,,,,,,
vehicle_pos_y += (,3,,,,,,,,,,
AF42 = 36 #Med drop probability,3,,,,,,,,,,
if address_required:,3,,,,,,,,,,
_ENDLESS_BAR_LEN = 20,3,,,,,,,,,,
speed_left = round(speed_left),3,,,,,,,,,,
if dict[1]:,3,,,,,,,,,,
break # invalid,3,,,,,,,,,,
"LVX(8),  # DESTINATION - speed (DATAF)",3,,,,,,,,,,
)),3,,,,,,,,,,
"thread_task.Task object, which does the stopping",3,,,,,,,,,,
if msg_cnt != msg_cnt_reply:,3,,,,,,,,,,
all connected devices as a set of mac_addresses,3,,,,,,,,,,
"LVX(12),  # STEP3 (DATA32)",3,,,,,,,,,,
import glob,3,,,,,,,,,,
self._progress = None if endless else 0,3,,,,,,,,,,
"reply[2],",3,,,,,,,,,,
hvbox2 = QVBoxLayout(),3,,,,,,,,,,
def serial_ports():,3,,,,,,,,,,
if verbosity is None:,3,,,,,,,,,,
volume,3,,,,,,,,,,
LVX(4)  # file handle,3,,,,,,,,,,
"def run(self, argv = sys.argv[1:]):",3,,,,,,,,,,
"def visit_until(self,branch):",3,,,,,,,,,,
"dump = dfu.read(int(args.address, 0), len(firmware),",3,,,,,,,,,,
if slow is None:,3,,,,,,,,,,
"LCX(self._port),  # NO",3,,,,,,,,,,
never wait for reply (it's the task of the calling program).,3,,,,,,,,,,
tmp=glob.glob(tmp),3,,,,,,,,,,
class sniffer(socket):,3,,,,,,,,,,
"LVX(8),  # STEP2 (DATA32)",3,,,,,,,,,,
"opJr_Eq32,  # b'\x6E'",3,,,,,,,,,,
left -= length,3,,,,,,,,,,
"LED_GREEN,",3,,,,,,,,,,
"def until_block(body,test):",3,,,,,,,,,,
"vehicle_pos_x, vehicle_pos_y = self._position",3,,,,,,,,,,
"GET_VOLUME,  # CMD",3,,,,,,,,,,
step_left = Decimal(,3,,,,,,,,,,
self.raw_buffer = buffer,3,,,,,,,,,,
"GVX(8),  # VALUE3 - channel 3",3,,,,,,,,,,
"opFile,",3,,,,,,,,,,
s=Lb.curselection(),3,,,,,,,,,,
self._speed = speed,3,,,,,,,,,,
self._speed = value,3,,,,,,,,,,
step2_left = abs(diff_left) - ramp_up - ramp_down,3,,,,,,,,,,
"assert isinstance(ramp_up, int), \",3,,,,,,,,,,
if self.sensor_type == EV3_ULTRASONIC,3,,,,,,,,,,
info1=info-datetime.timedelta(1),3,,,,,,,,,,
"LVX(4),  # DESTINATION - step1 (DATA32)",3,,,,,,,,,,
"LCX(8),  # VALUES",3,,,,,,,,,,
result.append(None),3,,,,,,,,,,
CS5 = 40 # Broadcast video,3,,,,,,,,,,
def send_direct_cmd(,3,,,,,,,,,,
if host is not None:,3,,,,,,,,,,
"(step_left, step_right),",3,,,,,,,,,,
def comboPortList(portCombo):,3,,,,,,,,,,
self.settimeout(timeout),3,,,,,,,,,,
"GET_FW_BUILD,",3,,,,,,,,,,
tones.reset,3,,,,,,,,,,
"def func_call(name,params):",3,,,,,,,,,,
EF0 = 46,3,,,,,,,,,,
CS0 = 0  # Default,3,,,,,,,,,,
"LCX(0),  # STEPS",3,,,,,,,,,,
from network.modules import socket,3,,,,,,,,,,
"opSound,",3,,,,,,,,,,
"EQEQ,",3,,,,,,,,,,
self.groupBox3.setStyleSheet(groupStyle),3,,,,,,,,,,
if args.erase:,3,,,,,,,,,,
"return utils.while_block(p.statements,p.expr)",3,,,,,,,,,,
(steps[1] - steps[0]) *,3,,,,,,,,,,
0.5 * self._tread * (steps[1] + steps[0]) /,3,,,,,,,,,,
"LIST_FILES,",3,,,,,,,,,,
Optional keyword only arguments,3,,,,,,,,,,
"fullname = os.path.join(self.location, file)",3,,,,,,,,,,
"value = self.builder.xor(lhs,rhs)",3,,,,,,,,,,
resolvers = stem.util.connection.system_resolvers(),3,,,,,,,,,,
if rest > 0 and rc != SYSTEM_REPLY_OK:,3,,,,,,,,,,
if params[0]:,3,,,,,,,,,,
painter = QPainter(self),3,,,,,,,,,,
shaft_lmc = hole_lmc - clearance,3,,,,,,,,,,
return result,3,,,,,,,,,,
"LCX(step1),  # SOURCE",3,,,,,,,,,,
if api_id:,3,,,,,,,,,,
"PORT_B,",3,,,,,,,,,,
time_delta_max=self.time_delta_max_tmp.get(),3,,,,,,,,,,
ASYNC,3,,,,,,,,,,
if duration is None:,3,,,,,,,,,,
"port_motor_input(port_inner),  # NO",3,,,,,,,,,,
elif values[n] == 4:,3,,,,,,,,,,
self._reverse_direction = False,3,,,,,,,,,,
self._check_acknowledge(),3,,,,,,,,,,
if blocking:,3,,,,,,,,,,
if freq < 250:,3,,,,,,,,,,
if self.arguments.stats != None:,3,,,,,,,,,,
tracking_callback,3,,,,,,,,,,
subdir = struct.unpack(,3,,,,,,,,,,
"edTxt.grid(row=2,column=4)",3,,,,,,,,,,
"data, addr = UDPSock.recvfrom(1024)",3,,,,,,,,,,
"LCX(1),  # VALUES",3,,,,,,,,,,
"PORT_3,",3,,,,,,,,,,
Returns,3,,,,,,,,,,
fact * cos(radians(orientation - 0.5 * angle)),3,,,,,,,,,,
creates rsf header,3,,,,,,,,,,
class Step0(tk.Frame):,3,,,,,,,,,,
mem_map = json.load(map_file),3,,,,,,,,,,
self.arguments.key.seek(0),3,,,,,,,,,,
"TwoWheelVehicle,",3,,,,,,,,,,
"CLR_CHANGES,  # CMD",3,,,,,,,,,,
LCX(self._port_left + self._port_right)  # NO,3,,,,,,,,,,
"GVX(13),  # SOURCE2",3,,,,,,,,,,
"returns a Task object, which plays a sound file",3,,,,,,,,,,
msg_cnt_reply = reply[2:4],3,,,,,,,,,,
return options,3,,,,,,,,,,
return data,3,,,,,,,,,,
"GVX(25), # VALUE",3,,,,,,,,,,
if self._host is not None:,3,,,,,,,,,,
"return self.get(f""./stats.{type}?prettyPrint={str(prettyPrint).lower()}&period={period}"")",3,,,,,,,,,,
"BEGIN_DOWNLOAD,",3,,,,,,,,,,
"_DIRECT_COMMAND_REPLY,",3,,,,,,,,,,
led_pattern,3,,,,,,,,,,
self.connect_wifi(),3,,,,,,,,,,
self.portCombox = QComboBox(),3,,,,,,,,,,
which may be empty.,3,,,,,,,,,,
if debug:,3,,,,,,,,,,
tmp=image_list[i],3,,,,,,,,,,
return ret,3,,,,,,,,,,
rgb_raw = self.rgb_raw,3,,,,,,,,,,
md5_hash = hashlib.md5(),3,,,,,,,,,,
"LVX(0),  # DESTINATION - signed_speed (DATA8)",3,,,,,,,,,,
control = 0,3,,,,,,,,,,
"from .functions import LCX, LCS, LVX, GVX",3,,,,,,,,,,
GVX(0)  # NAME,3,,,,,,,,,,
"def __init__(self, *args, **kwargs):",3,,,,,,,,,,
erase_size = None,3,,,,,,,,,,
if len(l1) > 23:,3,,,,,,,,,,
"LVX(32),  # step3",3,,,,,,,,,,
"ret = self.builder.call(func,args)",3,,,,,,,,,,
self._polarity_left * step_inner,3,,,,,,,,,,
"def printf(self,params,Type):",3,,,,,,,,,,
"WHILE,",3,,,,,,,,,,
except SysCmdError:,3,,,,,,,,,,
try:,3,,,,,,,,,,
diff_right = round(target_pos[1] - current_pos.right),3,,,,,,,,,,
"port of left motor (PORT_A, PORT_B, PORT_C or PORT_D)",3,,,,,,,,,,
"sensor_str,",3,,,,,,,,,,
if self._endless:,3,,,,,,,,,,
]),3,,,,,,,,,,
import datetime,3,,,,,,,,,,
The speed is accelerated if:,3,,,,,,,,,,
target_positions,3,,,,,,,,,,
self.visit_return(branch),3,,,,,,,,,,
requests.packages.urllib3.disable_warnings(InsecureRequestWarning),3,,,,,,,,,,
data_md5 = hashlib.md5(data).hexdigest().upper(),3,,,,,,,,,,
self._callback(self.position),3,,,,,,,,,,
self.parser.prog = type(self).__name__,3,,,,,,,,,,
) + Task(,3,,,,,,,,,,
"LCX(step1),  # STEP1",3,,,,,,,,,,
"DIVIDE,",3,,,,,,,,,,
length=200),3,,,,,,,,,,
if args.size:,3,,,,,,,,,,
(,3,,,,,,,,,,
"opMoveF_32,",3,,,,,,,,,,
"assert isinstance(position, int), \",3,,,,,,,,,,
except DfuException:,3,,,,,,,,,,
address = 0x8000000,3,,,,,,,,,,
ramp_down,3,,,,,,,,,,
ramp_down = self._ramp_down,3,,,,,,,,,,
"rbtn.grid(row=12, column=3)",3,,,,,,,,,,
if len(tone) > 1:,3,,,,,,,,,,
if tld is None:,3,,,,,,,,,,
import tkinter.filedialog as fdialog,3,,,,,,,,,,
"result.append(Remote(True, False, False, False, False))",3,,,,,,,,,,
position,3,,,,,,,,,,
"assert speed <= 100, \",3,,,,,,,,,,
for i in cap:,3,,,,,,,,,,
self._host = serial_number,3,,,,,,,,,,
GVX(12)  # VALUE4 - channel 4,3,,,,,,,,,,
"'Bluetooth', 'USB' or 'WiFi'",3,,,,,,,,,,
if mac_addr == self._host:,3,,,,,,,,,,
self._port_left = port_left,3,,,,,,,,,,
"assert port_right in (PORT_A, PORT_B, PORT_C, PORT_D), \",3,,,,,,,,,,
self._port_right = value,3,,,,,,,,,,
protocol,3,,,,,,,,,,
if msg_cnt in self._reply_buffer:,3,,,,,,,,,,
slow = self._slow,3,,,,,,,,,,
colors.reset,3,,,,,,,,,,
"LVX(12),",3,,,,,,,,,,
"LVX(0),",3,,,,,,,,,,
"tkMessageBox.showinfo(text,tmp)",3,,,,,,,,,,
raise AttributeError(,3,,,,,,,,,,
llvm.initialize(),3,,,,,,,,,,
self._volume = volume,3,,,,,,,,,,
"LCX(3),  # MODE",3,,,,,,,,,,
shaft_mmc = hole_mmc - allowance,3,,,,,,,,,,
return [p.param],3,,,,,,,,,,
"LED_RED,",3,,,,,,,,,,
"reply_1 = my_ev3.wait_for_reply(msg_cnt_1, verbosity=0)",3,,,,,,,,,,
if len_data > 5:,3,,,,,,,,,,
reply[3],3,,,,,,,,,,
"GET_HW_VERS,",3,,,,,,,,,,
exit(),3,,,,,,,,,,
"LCX(32),  # LENGTH",3,,,,,,,,,,
"IF,",3,,,,,,,,,,
"LCS(parent_path),",3,,,,,,,,,,
):,3,,,,,,,,,,
Type = ir.IntType(1),3,,,,,,,,,,
"GET_NETWORK,",3,,,,,,,,,,
my_ev3.verbosity = 1,3,,,,,,,,,,
global_mem=8,3,,,,,,,,,,
Menu().run(),3,,,,,,,,,,
ramp_up = self._ramp_up,3,,,,,,,,,,
round(raw * 255 / white),3,,,,,,,,,,
"LCX(0),  # MODE (Degree)",3,,,,,,,,,,
"fullname = os.path.join(root, name)",3,,,,,,,,,,
todo_include_todos = False,3,,,,,,,,,,
global shaft_lmc,3,,,,,,,,,,
self._position = 0,3,,,,,,,,,,
method = method.lower(),3,,,,,,,,,,
import hashlib,3,,,,,,,,,,
step1_right = round(abs(diff_right) * (,3,,,,,,,,,,
name of EV3 device,3,,,,,,,,,,
"edTxt1.grid(row=5,column=3, columnspan=5)",3,,,,,,,,,,
class ProgressBarThread(Thread):,3,,,,,,,,,,
data = data[pos:],3,,,,,,,,,,
finally:,3,,,,,,,,,,
(-1 if back else 1) *,3,,,,,,,,,,
exit(1),3,,,,,,,,,,
self.visit_funccall(branch),3,,,,,,,,,,
if rest == 0:,3,,,,,,,,,,
shaft_mmc = float(shaft_mmc),3,,,,,,,,,,
class API(object):,3,,,,,,,,,,
EV3_ULTRASONIC,3,,,,,,,,,,
"if isinstance(rhs_type,ir.FloatType) and isinstance(lhs_type,ir.FloatType):",3,,,,,,,,,,
return self._serial_read(size),3,,,,,,,,,,
return,3,,,,,,,,,,
Establish a connection to a LEGO EV3 device,3,,,,,,,,,,
The idea is,3,,,,,,,,,,
reply of the LEGO EV3,3,,,,,,,,,,
"def statements(self, p):",3,,,,,,,,,,
"GVX(24),  # VALUE7 - heading   channel 4",3,,,,,,,,,,
action(),3,,,,,,,,,,
commands.add(attribute),3,,,,,,,,,,
hbox1 = QHBoxLayout(),3,,,,,,,,,,
steady_ms = int(,3,,,,,,,,,,
"global ESD_YN, Master_date, prep_sh, date_list",3,,,,,,,,,,
"action_stop=self.stop,",3,,,,,,,,,,
system versions and build numbers (as named tuple System),3,,,,,,,,,,
def move_to(,3,,,,,,,,,,
byte,3,,,,,,,,,,
"return ir.Constant(ir.ArrayType(ir.IntType(8), n), buf),ir.ArrayType(ir.IntType(8), n)",3,,,,,,,,,,
"CONTINUE,",3,,,,,,,,,,
from enum import Enum,3,,,,,,,,,,
"level of verbosity (prints on stdout), values 0, 1 or 2",3,,,,,,,,,,
self.on_connect(sock),3,,,,,,,,,,
"GET_TYPEMODE,",3,,,,,,,,,,
return self.controller.remove_ephemeral_hidden_service(self.service_id),3,,,,,,,,,,
"fmt,",3,,,,,,,,,,
self.arguments.key.size = 0xFFFF,3,,,,,,,,,,
ops,3,,,,,,,,,,
"self._control_periodic,",3,,,,,,,,,,
self.groupBox1.setLayout(hvbox1),3,,,,,,,,,,
self._physical_ev3.send_direct_cmd(,3,,,,,,,,,,
hbox1.addWidget(self.refreshButton),3,,,,,,,,,,
actions = self.parser.add_mutually_exclusive_group(required = True),3,,,,,,,,,,
@volume.setter,3,,,,,,,,,,
volume [0 - 100] of tone,3,,,,,,,,,,
if not self.variables.__contains__(name):,3,,,,,,,,,,
"def visit_assign(self,branch):",3,,,,,,,,,,
"GVX(20),  # VALUE6 - proximity channel 3",3,,,,,,,,,,
def send_system_cmd(,3,,,,,,,,,,
"LVX(44),",3,,,,,,,,,,
ev3_dc.EV3.sensors.Port_3 or,3,,,,,,,,,,
radius_outer = radius + 0.5 * self._tread,3,,,,,,,,,,
self._target_position = 0,3,,,,,,,,,,
def _control(self):,3,,,,,,,,,,
self._target_motor_pos.right + diff_pos[1],3,,,,,,,,,,
"OPEN_READ,",3,,,,,,,,,,
"FLOAT = group(Pointfloat, Expfloat)",3,,,,,,,,,,
self._target_motor_pos = MotorPositions(,3,,,,,,,,,,
AF23 = 22 #High drop probability,3,,,,,,,,,,
return self.sensors_as_dict[self._port],3,,,,,,,,,,
"PLAY,",3,,,,,,,,,,
abs(last_inner / last_outer) also is too high.,3,,,,,,,,,,
def sound(,3,,,,,,,,,,
self.show(),3,,,,,,,,,,
clearance = hole_lmc - shaft_lmc,3,,,,,,,,,,
"motor_pos = (pos_outer, pos_inner)",3,,,,,,,,,,
diff_right = round(diff_pos[1]),3,,,,,,,,,,
"opDivF,  # b'\x1F'",3,,,,,,,,,,
which minimizes the communication,3,,,,,,,,,,
"sqrt(step1_left / ramp_up) if ramp_up > 0 else 1,",3,,,,,,,,,,
"LVX(44),  # last_inner = pos_inner - last_pos_inner",3,,,,,,,,,,
def Save():,3,,,,,,,,,,
"opJr_GteqF,  # b'\x7B'  ratio over target",3,,,,,,,,,,
self.send_direct_cmd(ops),3,,,,,,,,,,
EV3_ULTRASONIC = 30,3,,,,,,,,,,
"SYNC - Always use DIRECT_COMMAND_REPLY and wait for reply,",3,,,,,,,,,,
"GE,",3,,,,,,,,,,
import src.pparser.utils as utils,3,,,,,,,,,,
"LCX(0),  # LAYER",3,,,,,,,,,,
f'of {super().__str__()}',3,,,,,,,,,,
"LCX(3),  # VALUES",3,,,,,,,,,,
self.identification = socket.ntohs(self.raw_identification),3,,,,,,,,,,
if time_delta_min <= delta <= time_delta_max:,3,,,,,,,,,,
"def test_erase(dfu, memory_map):",3,,,,,,,,,,
GVX(4)  # VALUE2 (output),3,,,,,,,,,,
return reply[5:],3,,,,,,,,,,
for val in (raw):,3,,,,,,,,,,
return self.visit_expression(branch),3,,,,,,,,,,
self.atemLabel1.setStyleSheet(labelColStyle),3,,,,,,,,,,
if volume is None:,3,,,,,,,,,,
size = os.path.getsize(path_source),3,,,,,,,,,,
"verbosity=verbosity,",3,,,,,,,,,,
self.controller = controller if controller else Controller(),3,,,,,,,,,,
self.arguments = self.parser.parse_args(args),3,,,,,,,,,,
"duration=duration,",3,,,,,,,,,,
"opAdd32,",3,,,,,,,,,,
"part_size = min(1012, size)",3,,,,,,,,,,
"sync_mode=sync_mode,",3,,,,,,,,,,
READY_RAW,3,,,,,,,,,,
"self.start_move_by,",3,,,,,,,,,,
from typing import Tuple,3,,,,,,,,,,
"def _handle_line(self, line):",3,,,,,,,,,,
ratio = radius_inner / radius_outer,3,,,,,,,,,,
self._current_movement = None,3,,,,,,,,,,
"LCX(1),  # MODE (ambient)",3,,,,,,,,,,
"assert host is None or host.upper() not in self._devices, \",3,,,,,,,,,,
dump_command.set_defaults(func=dfu_handler.dump),3,,,,,,,,,,
"speed_right = round(copysign(factor * abs(speed_left), diff_right))",3,,,,,,,,,,
"import os, sys, argparse, traceback",3,,,,,,,,,,
"btn_EOF_check.grid(row=5, column=1)",3,,,,,,,,,,
"super(page1, self).__init__()",3,,,,,,,,,,
):,3,,,,,,,,,,
self.config = config,3,,,,,,,,,,
"info=datetime.date(int(info[0:4]),int(info[4:6]),int(info[6:8]))",3,,,,,,,,,,
port_motor_input,3,,,,,,,,,,
factor = abs(diff_right) / abs(diff_left),3,,,,,,,,,,
duration of Task execution [s] (waits if movement lasts shorter),3,,,,,,,,,,
hbox2.addWidget(self.groupBox1),3,,,,,,,,,,
"LED_ORANGE_PULSE,",3,,,,,,,,,,
return Task(prepare) + Repeated(next_part),3,,,,,,,,,,
hosts = set(),3,,,,,,,,,,
self.del_file(path),3,,,,,,,,,,
a number of calculations.,3,,,,,,,,,,
stderr=subprocess.PIPE,3,,,,,,,,,,
if stop_it:,3,,,,,,,,,,
self.setParent(parent),3,,,,,,,,,,
AF41 = 34 #Low drop probability,3,,,,,,,,,,
while chunk:,3,,,,,,,,,,
except KeyboardInterrupt:,3,,,,,,,,,,
action_cont=self.cont,3,,,,,,,,,,
"_print(*messages, color = color, dark = dark, prefix = prefix, parse = False, **kwargs)",3,,,,,,,,,,
"GVX(8),  # speed -= 1",3,,,,,,,,,,
while chunk:,3,,,,,,,,,,
while True:,3,,,,,,,,,,
"elif isinstance(rhs_type,ir.IntType) and isinstance(lhs_type,ir.IntType):",3,,,,,,,,,,
"opOutput_Time_Speed,",3,,,,,,,,,,
app.exec_(),3,,,,,,,,,,
"READY_SI,",3,,,,,,,,,,
self.initUI2(),3,,,,,,,,,,
ran += 0xFFF,3,,,,,,,,,,
basedir = os.path.basename(os.path.dirname(root)),3,,,,,,,,,,
for value in fingerprints.values():,3,,,,,,,,,,
msg_cnt,3,,,,,,,,,,
from matplotlib.figure import Figure,3,,,,,,,,,,
ev3.GVX(0)  # NAME (out),3,,,,,,,,,,
self.ser.write(message),3,,,,,,,,,,
reply[:len_data],3,,,,,,,,,,
"LCX(1 if brake else 0),  # BRAKE - 0 (no), 1 (yes)",3,,,,,,,,,,
"self.play_sound,",3,,,,,,,,,,
"assert len(ops) > 0, \",3,,,,,,,,,,
class Controller(stem.control.Controller):,3,,,,,,,,,,
"opJr_False,",3,,,,,,,,,,
"assert value in (STD, SYNC, ASYNC), \",3,,,,,,,,,,
self._pos %= len(self._led_sequence),3,,,,,,,,,,
if index == 0:,3,,,,,,,,,,
"epilog += f"" -  {key}: {value}\n""",3,,,,,,,,,,
"assert isinstance(repeat, bool), \",3,,,,,,,,,,
from .constants import (,3,,,,,,,,,,
"args_stop=(LED_GREEN,),",3,,,,,,,,,,
self._physical_ev3.introspection(verbosity),3,,,,,,,,,,
self.start_move_for(,3,,,,,,,,,,
self.prep_sh_tmp=tk.StringVar(),3,,,,,,,,,,
return result,3,,,,,,,,,,
"return tuple(folders), tuple(files)",3,,,,,,,,,,
date_list=[],3,,,,,,,,,,
],3,,,,,,,,,,
elif self.arguments.email:,3,,,,,,,,,,
S1AB=S1AB[:3],3,,,,,,,,,,
self.on_disconnect(sock),3,,,,,,,,,,
bar_thread = ProgressBarThread(endless=True),3,,,,,,,,,,
volume=volume,3,,,,,,,,,,
rest = size - part_size,3,,,,,,,,,,
assert len(reply_1_str) == 2,3,,,,,,,,,,
hhbox4.addStretch(),3,,,,,,,,,,
except:,3,,,,,,,,,,
self._target_motor_pos = MotorPositions(,3,,,,,,,,,,
- abs(done_inner / done_outer) is too low and,3,,,,,,,,,,
"response = api.domain(self.arguments.domain, keyPeople = self.arguments.key_people)",3,,,,,,,,,,
speed_left *= min(,3,,,,,,,,,,
"LCX(0),  # SOURCE",3,,,,,,,,,,
self._polarity_left * step,3,,,,,,,,,,
step2_right = abs(diff_right) - ramp_up - ramp_down,3,,,,,,,,,,
"LVX(56),",3,,,,,,,,,,
"port_motor_input(port_outer),  # NO",3,,,,,,,,,,
"btn2.grid(row=13, column=4)",3,,,,,,,,,,
class PortInUse(Exception):,3,,,,,,,,,,
controller = controller if controller else Controller(),3,,,,,,,,,,
"ELSE,",3,,,,,,,,,,
},3,,,,,,,,,,
return self.visit_funccall(branch),3,,,,,,,,,,
self._ramp_down_time = value,3,,,,,,,,,,
"threading.Thread(target=_input, daemon = True).start()",3,,,,,,,,,,
"copyfile(src2, src)",3,,,,,,,,,,
"super(Controller, self).__init__(control_port)",3,,,,,,,,,,
AF22 = 20 #Med drop probability,3,,,,,,,,,,
def _control_repeated(self):,3,,,,,,,,,,
"TRIAD,",3,,,,,,,,,,
"t_colors.start,",3,,,,,,,,,,
"for F in (Info, Step0, Step1, Step2):",3,,,,,,,,,,
"for key, value in obj.items():",3,,,,,,,,,,
class NoEV3(Exception):,3,,,,,,,,,,
self.visit_while(branch),3,,,,,,,,,,
hvbox3 = QVBoxLayout(),3,,,,,,,,,,
"opJr_Gteq32,",3,,,,,,,,,,
"total = [0, 0]",3,,,,,,,,,,
"FLOAT,",3,,,,,,,,,,
data_date.append(Lb.get(Lb.curselection()[i])),3,,,,,,,,,,
if curr_name == file_dest:,3,,,,,,,,,,
"reply = my_ev3.send_direct_cmd(ops_get, global_mem=32)",3,,,,,,,,,,
from biostyle import *,3,,,,,,,,,,
"f'at {port_str}',",3,,,,,,,,,,
GVX(global_offset + 4)  # VALUE1,3,,,,,,,,,,
return self.beacons[self._channel - 1],3,,,,,,,,,,
"LCX(direction * speed),  # SPEED",3,,,,,,,,,,
self.raw_options = buffer[0x14:self.data_offset],3,,,,,,,,,,
except socket.timeout:,3,,,,,,,,,,
),3,,,,,,,,,,
''',3,,,,,,,,,,
"rb.append(tk.Radiobutton(frame,",3,,,,,,,,,,
@bumps.setter,3,,,,,,,,,,
folders = len(value) - programs,3,,,,,,,,,,
hbox0.addWidget(self.titlePage1),3,,,,,,,,,,
"GVX(8),  # SPEED",3,,,,,,,,,,
"def statement(self,p):",3,,,,,,,,,,
motor_pos[1] == self._motor_pos[1],3,,,,,,,,,,
"os_vers,",3,,,,,,,,,,
"LVX(44),  # step1 + step2",3,,,,,,,,,,
self.builder = ir.IRBuilder(block),3,,,,,,,,,,
self.option_class = self._opt_class,3,,,,,,,,,,
step_outer = (,3,,,,,,,,,,
"global_mem=global_mem,",3,,,,,,,,,,
from time import sleep,3,,,,,,,,,,
try:,3,,,,,,,,,,
if ev3_obj:,3,,,,,,,,,,
reply,3,,,,,,,,,,
self.on_stop(),3,,,,,,,,,,
if msg_cnt != reply_msg_cnt:,3,,,,,,,,,,
task = Task(,3,,,,,,,,,,
if self._current_movement is None:,3,,,,,,,,,,
"opAdd32,",3,,,,,,,,,,
"LCX(7),  # TYPE - EV3-Large-Motor",3,,,,,,,,,,
yar4.append(int(y4)),3,,,,,,,,,,
"self._port,  # NO",3,,,,,,,,,,
VA0 = 44,3,,,,,,,,,,
class Control(tk.Tk):,3,,,,,,,,,,
"self.on_error(address, e)",3,,,,,,,,,,
"LCX(i + 1),  # ITEM",3,,,,,,,,,,
command=lambda:Save()),3,,,,,,,,,,
hhbox1.addWidget(self.goBtn1),3,,,,,,,,,,
"length: 2 bytes, little endian",3,,,,,,,,,,
operating system version,3,,,,,,,,,,
return,3,,,,,,,,,,
"wait = send_and_play(data[signal_start:pause_start], volume=volume)",3,,,,,,,,,,
"LCX(self.sensors_as_dict[port_motor_input(self._port)]),  # TYPE (EV3-Medium-Motor)",3,,,,,,,,,,
self.connect_bluetooth(),3,,,,,,,,,,
"assert isinstance(song, dict), \",3,,,,,,,,,,
},3,,,,,,,,,,
"binary[int(k, 16) - (8 if k.isalpha() or int(k) >= 8 else 0)] ^= 1",3,,,,,,,,,,
vehicle_pos_x += (,3,,,,,,,,,,
"string,Type = self.strings(value)",3,,,,,,,,,,
"assert isinstance(port_left, int), \",3,,,,,,,,,,
"GVX(0),  # VALUE1 (output)",3,,,,,,,,,,
"LCX(-100),",3,,,,,,,,,,
if self._port_handle.isOpen():,3,,,,,,,,,,
from sly import Lexer,3,,,,,,,,,,
duration = 0,3,,,,,,,,,,
p.statements.append(p.statement),3,,,,,,,,,,
global loopz,3,,,,,,,,,,
"cmd_type,",3,,,,,,,,,,
self.groupBox3.setLayout(hvbox3),3,,,,,,,,,,
"LCX(speed),  # SOURCE",3,,,,,,,,,,
"LVX(24),",3,,,,,,,,,,
self.time_delta_max_tmp=tk.IntVar(),3,,,,,,,,,,
"LVX(0),  # DESTINATION - diff (DATAF)",3,,,,,,,,,,
import requests,3,,,,,,,,,,
"2147483.847 - ramp_up_time,  # ~ 596.5 hours",3,,,,,,,,,,
self._serial_write(parameters),3,,,,,,,,,,
self.refreshButton.clicked.connect(self.refreshed),3,,,,,,,,,,
BLUECOLOR = 2,3,,,,,,,,,,
def tand(angle):,3,,,,,,,,,,
"type: 1 byte, DIRECT_COMMAND_REPLY or DIRECT_COMMAND_NO_REPLY",3,,,,,,,,,,
"type_str,",3,,,,,,,,,,
"assert ramp_up >= 0, \",3,,,,,,,,,,
from numbers import Number,3,,,,,,,,,,
folders = [],3,,,,,,,,,,
"LCX(9),  # OFFSET",3,,,,,,,,,,
"opSub32,",3,,,,,,,,,,
self.layout2 = QVBoxLayout(self),3,,,,,,,,,,
"GET_BRICKNAME,",3,,,,,,,,,,
if ramp_down is None:,3,,,,,,,,,,
"assert ramp_down is None or ramp_down >= 0, \",3,,,,,,,,,,
controls current movement (must be called by a Repeated),3,,,,,,,,,,
self.frames = {},3,,,,,,,,,,
"assert direction in (-1, 1), \",3,,,,,,,,,,
iw=self.iw_tmp[self.iw_index_tmp.get()],3,,,,,,,,,,
def resource_path(relative):,3,,,,,,,,,,
"from .functions import LCX, GVX",3,,,,,,,,,,
time_delta_min=datetime.timedelta(days=time_delta_min),3,,,,,,,,,,
"painter.drawPixmap(event.rect(), self.pixmap)",3,,,,,,,,,,
"tk.Entry(self, textvariable=self.Dir_EOF_tmp, width=50, borderwidth=2),",3,,,,,,,,,,
action = self.choices.get(choice),3,,,,,,,,,,
def direct_cmd():,3,,,,,,,,,,
import random,3,,,,,,,,,,
"BEGIN_UPLOAD,",3,,,,,,,,,,
"assert proxy.scheme.upper() in socks.PROXY_TYPES, ValueError(f""Invalid proxy type: {repr(proxy.scheme)}."")",3,,,,,,,,,,
"if callable(attribute) and issubclass(attribute, base.Program) and attribute != base.Program:",3,,,,,,,,,,
if 2 in flags_set:,3,,,,,,,,,,
ramp_up_time,3,,,,,,,,,,
frame.tkraise(),3,,,,,,,,,,
"),",3,,,,,,,,,,
"info=datetime.date(int(info[0:4]),int(info[4:6]),int(info[6:8]))",3,,,,,,,,,,
"self._radius_wheel,",3,,,,,,,,,,
if self._device is None:,3,,,,,,,,,,
if self.busy:,3,,,,,,,,,,
"assert duration is None or isinstance(duration, Number), \",3,,,,,,,,,,
"LCX(54),  # OFFSET",3,,,,,,,,,,
"result.append(Remote(False, True, True, False, False))",3,,,,,,,,,,
kwargs={,3,,,,,,,,,,
"opUI_Read,",3,,,,,,,,,,
path_s1a_cal=self.path_s1a_cal_tmp.get(),3,,,,,,,,,,
self.options = self.options = self.Options(self.raw_options)#self.parse_options(self.raw_options),3,,,,,,,,,,
self._read_protection_status = None,3,,,,,,,,,,
"pprint(response.json(), 1)",3,,,,,,,,,,
frame = self.frames[page_name],3,,,,,,,,,,
if args.list != None:,3,,,,,,,,,,
"LCX(0),  # LAYER",3,,,,,,,,,,
if self._reverse_direction:,3,,,,,,,,,,
data = (self._port_handle.read(amount) if amount,3,,,,,,,,,,
loopz=0,3,,,,,,,,,,
break,3,,,,,,,,,,
"colors = Colors(song, self)",3,,,,,,,,,,
def audio_scraper(self):,3,,,,,,,,,,
from .infrared import Infrared,3,,,,,,,,,,
unpack(,3,,,,,,,,,,
from datetime import datetime,3,,,,,,,,,,
self._polarity_left = polarity_left,3,,,,,,,,,,
"scale2.grid(row=4, column=0, rowspan=3)",3,,,,,,,,,,
hbox2.addWidget(self.groupBox4),3,,,,,,,,,,
return self._polarity_right,3,,,,,,,,,,
return task,3,,,,,,,,,,
@ramp_down.setter,3,,,,,,,,,,
from .uart_dfu import DfuCommandHandler,3,,,,,,,,,,
"from .exceptions import SysCmdError, DirCmdError",3,,,,,,,,,,
ev3_dc.EV3.sensors.Port_C,3,,,,,,,,,,
if case == 0:,3,,,,,,,,,,
return decorator,3,,,,,,,,,,
"LED_ORANGE_FLASH,",3,,,,,,,,,,
),3,,,,,,,,,,
exclude_patterns = [],3,,,,,,,,,,
"from time import gmtime, localtime",3,,,,,,,,,,
degrees,3,,,,,,,,,,
"format = self.builder.gep(format, [zero, zero])",3,,,,,,,,,,
if reply:,3,,,,,,,,,,
while left:,3,,,,,,,,,,
return Task(,3,,,,,,,,,,
self._sync_mode = STD,3,,,,,,,,,,
elif self._polarity_left == -1:,3,,,,,,,,,,
if speed is None:,3,,,,,,,,,,
"self._ops_pos(),",3,,,,,,,,,,
"TONE,",3,,,,,,,,,,
"port_motor_input(self._port_right),  # NO",3,,,,,,,,,,
"LVX(0),  # DATA X - diff (DATAF)",3,,,,,,,,,,
speed_orig = speed,3,,,,,,,,,,
"service = controller.create_ephemeral_hidden_service(ports, **kwargs)",3,,,,,,,,,,
mem_map = None,3,,,,,,,,,,
address = self.getsockname(),3,,,,,,,,,,
if self._port == PORT_A:,3,,,,,,,,,,
ran = 0,3,,,,,,,,,,
run_code(code),3,,,,,,,,,,
sqrt(step3_left / ramp_down) if ramp_down > 0 else 1,3,,,,,,,,,,
degrees for ramp-down (default is 30),3,,,,,,,,,,
def writef(data):,3,,,,,,,,,,
GVX(0)  # VALUE1 (output),3,,,,,,,,,,
reply = self.send_system_cmd(,3,,,,,,,,,,
from PyQt5.QtGui import *,3,,,,,,,,,,
t_colors = Periodic(,3,,,,,,,,,,
"sync mode (standard, asynchronous, synchronous)",3,,,,,,,,,,
if self._protocol == WIFI:,3,,,,,,,,,,
"opMove32_F,",3,,,,,,,,,,
"opUI_Write,",3,,,,,,,,,,
"result.append(Remote(False, False, False, True, False))",3,,,,,,,,,,
"READY_SI,",3,,,,,,,,,,
"EV3_LARGE_MOTOR,",3,,,,,,,,,,
EV3_COLOR = 29,3,,,,,,,,,,
"value = self.builder.fsub(lhs,rhs)",3,,,,,,,,,,
reply (in case of SYSTEM_COMMAND_NO_REPLY: msg_cnt),3,,,,,,,,,,
rtp_list =[],3,,,,,,,,,,
reply = self.send_system_cmd(cmd),3,,,,,,,,,,
Mandatory keyword only arguments,3,,,,,,,,,,
self._read_protection_status = read_protection_status,3,,,,,,,,,,
"assert dfu.read(address, len(data)) == data",3,,,,,,,,,,
"assert volume is None or 0 <= volume <= 100, \",3,,,,,,,,,,
"data, err = process.communicate()",3,,,,,,,,,,
"opOutput_Test,",3,,,,,,,,,,
"def __init__(self, pixmap, parent=None):",3,,,,,,,,,,
if self._opt_class in self.Classes.__members__:,3,,,,,,,,,,
def serrun1(self):,3,,,,,,,,,,
"args=(angle, radius),",3,,,,,,,,,,
"LVX(20),",3,,,,,,,,,,
self._sync_mode = value,3,,,,,,,,,,
"[author], 1)",3,,,,,,,,,,
from time import time,3,,,,,,,,,,
hhbox2.addWidget(self.atemVal2),3,,,,,,,,,,
"args_cont=(ev3_path,),",3,,,,,,,,,,
from shutil import copyfile,3,,,,,,,,,,
self._port = port,3,,,,,,,,,,
for rtp_packet in rtp_list:,3,,,,,,,,,,
yar4 = [],3,,,,,,,,,,
self._introspection = {},3,,,,,,,,,,
"ASYNC - if reply then use DIRECT_COMMAND_REPLY,",3,,,,,,,,,,
)[0],3,,,,,,,,,,
if not size:,3,,,,,,,,,,
import platform,3,,,,,,,,,,
tree = {},3,,,,,,,,,,
class TorConsole(Program):,3,,,,,,,,,,
"from ctypes import CFUNCTYPE, c_int, c_float",3,,,,,,,,,,
ramp_up_time = self._ramp_up_time,3,,,,,,,,,,
self._reverse_direction = False,3,,,,,,,,,,
args = self.parser.parse_args(argv[:2]),3,,,,,,,,,,
"BEGIN_DOWNLOAD,",3,,,,,,,,,,
"NXT_ULTRASONIC,",3,,,,,,,,,,
"LCX(15),  # OFFSET",3,,,,,,,,,,
n = len(string)+1,3,,,,,,,,,,
"btn1.grid(row=13, column=3)",3,,,,,,,,,,
fw_build,3,,,,,,,,,,
"USB: 0.2 sec., WIFI: 0.1 sec., USB: 0.05 sec.)",3,,,,,,,,,,
"LVX(4),  # SOURCE2 - abs(diff) (DATAF)",3,,,,,,,,,,
import pprint,3,,,,,,,,,,
allows to code 'with EV3 as my_ev3:',3,,,,,,,,,,
class PParser(Parser):,3,,,,,,,,,,
self._tld = tld,3,,,,,,,,,,
"def test_load_firmware(dfu, memory_map, firmware):",3,,,,,,,,,,
if dist == 255:,3,,,,,,,,,,
verbosity=verbosity,3,,,,,,,,,,
return self.sensors_as_dict[port_motor_input(self._port)],3,,,,,,,,,,
self._version = version,3,,,,,,,,,,
size_remain = size,3,,,,,,,,,,
"f""     - Time to Live (TTL). . . . . . . : 0x{self.time_to_live:02x} ({self.time_to_live})"",",3,,,,,,,,,,
step3_right = ramp_down,3,,,,,,,,,,
"assert isinstance(ramp_down, int), \",3,,,,,,,,,,
from argparse import ArgumentParser,3,,,,,,,,,,
start moving the motor to a given position (without time control).,3,,,,,,,,,,
flag if with reply,3,,,,,,,,,,
step3_left = int(factor**2 * step3_right),3,,,,,,,,,,
LCX(i + 1)  # ITEM,3,,,,,,,,,,
"assert speed is None or 0 < speed and speed <= 100, \",3,,,,,,,,,,
step3_left = ramp_down,3,,,,,,,,,,
"edTxt2=tk.Entry(self, textvariable=self.prep_sh_tmp, width=20, borderwidth=2)",3,,,,,,,,,,
"GET_VBATT,",3,,,,,,,,,,
"assert 0 <= verbosity <= 2, \",3,,,,,,,,,,
"def param(self,p):",3,,,,,,,,,,
"GVX(13),  # BUSY (DATA8) - output",3,,,,,,,,,,
"LED_ORANGE,",3,,,,,,,,,,
],3,,,,,,,,,,
return math.sin(math.radians(angle)),3,,,,,,,,,,
hardware version,3,,,,,,,,,,
self._ramp_down = ramp_down,3,,,,,,,,,,
ASYNC (sync_mode),3,,,,,,,,,,
if duration is not None:,3,,,,,,,,,,
"CLR_CHANGES,",3,,,,,,,,,,
_RW_MAX_SIZE = 256,3,,,,,,,,,,
"setattr(self, key, value)",3,,,,,,,,,,
erase_command.set_defaults(func=dfu_handler.erase),3,,,,,,,,,,
size of the global memory,3,,,,,,,,,,
"LCX(self.sensors_as_dict[port_motor_input(self._port)]),  # TYPE",3,,,,,,,,,,
"args=(position,),",3,,,,,,,,,,
"LED_GREEN,",3,,,,,,,,,,
sync_mode=SYNC,3,,,,,,,,,,
arguments = self.arguments.__dict__,3,,,,,,,,,,
"x and x-coordinates are in meters,",3,,,,,,,,,,
"header: 2 bytes, holds sizes of local and global memory",3,,,,,,,,,,
self.move(qr.topLeft()),3,,,,,,,,,,
"LCX(self.motor_type),  # TYPE",3,,,,,,,,,,
duration time for ramp-up [sec.],3,,,,,,,,,,
class Classes(Enum):,3,,,,,,,,,,
"country = self.arguments.country, region = self.arguments.region)",3,,,,,,,,,,
return RawRGBColor(,3,,,,,,,,,,
"self.on_recv(sock, sock.recv(0xFFFF))",3,,,,,,,,,,
class EphemeralHiddenService(HiddenService):,3,,,,,,,,,,
"duration = self.duration(path, local=local)",3,,,,,,,,,,
self._commands = commands,3,,,,,,,,,,
cls(),3,,,,,,,,,,
sync_mode,3,,,,,,,,,,
texinfo_documents = [,3,,,,,,,,,,
def duration(,3,,,,,,,,,,
txt,3,,,,,,,,,,
def _start_drive_straight(,3,,,,,,,,,,
"self.builder.store(value,ptr)",3,,,,,,,,,,
bar_thread.update(-1),3,,,,,,,,,,
try:,3,,,,,,,,,,
hvbox4.addLayout(hhbox4),3,,,,,,,,,,
self.put_to_reply_buffer(,3,,,,,,,,,,
"assert local_mem <= 63, \",3,,,,,,,,,,
"LCX(self.sensors_as_dict[self._port]),  # TYPE",3,,,,,,,,,,
if self._target_motor_pos is None:,3,,,,,,,,,,
"pprint(value, depth + 1)",3,,,,,,,,,,
abs(last_inner / last_outer) also is too low.,3,,,,,,,,,,
return self._physical_ev3._protocol,3,,,,,,,,,,
data = file.read(8),3,,,,,,,,,,
_RESPONSE_SIZE = 1,3,,,,,,,,,,
speed as percentage of maximum speed [1 - 100],3,,,,,,,,,,
"WIFI,",3,,,,,,,,,,
"LCX(0),  # MODE (Proximity)",3,,,,,,,,,,
"port of right motor (PORT_A, PORT_B, PORT_C or PORT_D)",3,,,,,,,,,,
polar_check=[],3,,,,,,,,,,
def port(self):,3,,,,,,,,,,
"return utils.expression(p[1],p.expr0,p.expr1)",3,,,,,,,,,,
180,3,,,,,,,,,,
cmd_type = _DIRECT_COMMAND_NO_REPLY,3,,,,,,,,,,
break,3,,,,,,,,,,
chunk = self.arguments.input.read(0xFFF),3,,,,,,,,,,
if signal_start is None:,3,,,,,,,,,,
"ev3_obj=ev3_obj,",3,,,,,,,,,,
"self._device.read(_EP_IN, 1024, 100)",3,,,,,,,,,,
Keyword only arguments (either protocol and host or ev3_obj),3,,,,,,,,,,
''',3,,,,,,,,,,
my_ev3.sync_mode = ev3.SYNC,3,,,,,,,,,,
"LCX(1 if brake else 0),  # BRAKE - 0 (no), 1 (yes)",3,,,,,,,,,,
EV3_IR = 33,3,,,,,,,,,,
"LCX(start_pos_inner),",3,,,,,,,,,,
if mac_addr is None:,3,,,,,,,,,,
import gtts,3,,,,,,,,,,
wait = rest_t,3,,,,,,,,,,
ramp_down_time,3,,,,,,,,,,
with self.builder.if_then(test):,3,,,,,,,,,,
"for k in f""{key[len(output)]:02x}"":",3,,,,,,,,,,
import ev3_dc as ev3,3,,,,,,,,,,
"opMove32_32,",3,,,,,,,,,,
def __str__(self):,3,,,,,,,,,,
"LCX(1),  # MODE - Degree",3,,,,,,,,,,
time.sleep(self._WAKE_PERIOD),3,,,,,,,,,,
"reply = self.send_direct_cmd(ops, global_mem=12)",3,,,,,,,,,,
"cmd,",3,,,,,,,,,,
if nameservers:,3,,,,,,,,,,
if abs(diff_left) >= abs(diff_right):,3,,,,,,,,,,
"ABS,",3,,,,,,,,,,
"return self.builder.load(ptr),Type",3,,,,,,,,,,
debugging = 2,3,,,,,,,,,,
from kalorimeter import *,3,,,,,,,,,,
create_connection = socks.create_connection,3,,,,,,,,,,
"from struct import pack, unpack",3,,,,,,,,,,
"LVX(0),  # SOURCE1 - sign of diff (DATAF)",3,,,,,,,,,,
percentage of maximum speed [1 - 100] (default is 10),3,,,,,,,,,,
loopz = 0,3,,,,,,,,,,
"opMul32,  # b'\x1A'",3,,,,,,,,,,
result = cfunc(),3,,,,,,,,,,
self.choices = {,3,,,,,,,,,,
*(,3,,,,,,,,,,
socket.SOCK_DGRAM,3,,,,,,,,,,
"opMemory_Usage,",3,,,,,,,,,,
global_mem=1,3,,,,,,,,,,
"self.certificates = certificates.CensysCertificates(self.api_id, self.api_secret)",3,,,,,,,,,,
size_remain -= part_size,3,,,,,,,,,,
for key in self.descriptor.ATTRIBUTES:,3,,,,,,,,,,
return self._commands,3,,,,,,,,,,
"from PyQt5.QtWidgets import QApplication, QSplashScreen, QProgressBar",3,,,,,,,,,,
):,3,,,,,,,,,,
def __delete__(self):,3,,,,,,,,,,
elif progress == 100:,3,,,,,,,,,,
proc_sh=self.proc_sh_tmp.get(),3,,,,,,,,,,
send data to EV3 and play,3,,,,,,,,,,
self._host = mac_addr,3,,,,,,,,,,
with pytest.raises(ev3.DirCmdError) as exc:,3,,,,,,,,,,
port_serial = self.portCombox.currentText(),3,,,,,,,,,,
msg_cnt_1 = my_ev3.send_direct_cmd(,3,,,,,,,,,,
total[1] += 1,3,,,,,,,,,,
from globalf import *,3,,,,,,,,,,
if not found:,3,,,,,,,,,,
freq = self._temperament * 2**(2/12),3,,,,,,,,,,
elif self._port_right == PORT_B:,3,,,,,,,,,,
"global_mem=114,",3,,,,,,,,,,
"LCX(volume),",3,,,,,,,,,,
if reply[4:5] == _DIRECT_REPLY:,3,,,,,,,,,,
raise AttributeError(,3,,,,,,,,,,
self._offset = 0,3,,,,,,,,,,
hhbox4.addWidget(self.dhumVal),3,,,,,,,,,,
")),",3,,,,,,,,,,
"def sniff(self, condition = True):",3,,,,,,,,,,
path = path[:-1],3,,,,,,,,,,
"LVX(4),",3,,,,,,,,,,
"assert temperament > 0, \",3,,,,,,,,,,
"import argparse, pip, sys, os",3,,,,,,,,,,
"opMulF,",3,,,,,,,,,,
class FFMPEG(Exception):,3,,,,,,,,,,
assert len(dfu.id) == 2 and dfu.id[0] == 4,3,,,,,,,,,,
self.builder.position_at_start(until_loop_otherwise),3,,,,,,,,,,
"PORT_4,",3,,,,,,,,,,
NXT_LIGHT = 2,3,,,,,,,,,,
step3 = ramp_down,3,,,,,,,,,,
"LCX(self._port),  # NOS",3,,,,,,,,,,
hbox1.addWidget(self.conButton),3,,,,,,,,,,
"LCX(235),  # OFFSET",3,,,,,,,,,,
step2_left = abs(diff_left) - step1_left - step3_left,3,,,,,,,,,,
self._rgb_white_balance_raw = raw,3,,,,,,,,,,
ax1 = self.figure.add_subplot(111),3,,,,,,,,,,
"PORT_2,",3,,,,,,,,,,
cur_mov = self._current_movement,3,,,,,,,,,,
"dfu.write(address, data)",3,,,,,,,,,,
value3 = values[3][3:],3,,,,,,,,,,
"LVX(40),",3,,,,,,,,,,
"variable=self.iw_index_tmp,",3,,,,,,,,,,
return round(,3,,,,,,,,,,
PORT_D = 8,3,,,,,,,,,,
self._polarity_right * step_inner,3,,,,,,,,,,
class Gyro(EV3):,3,,,,,,,,,,
self.data = buffer[2:],3,,,,,,,,,,
current positions of left and right motor [degree] (as named tuple),3,,,,,,,,,,
self.stop_sound,3,,,,,,,,,,
"LVX(60),  # busy_inner or busy_outer",3,,,,,,,,,,
@temperament.setter,3,,,,,,,,,,
"opOutput_Clr_Count,",3,,,,,,,,,,
self.listen(),3,,,,,,,,,,
if global_mem > 0 then reply else message counter,3,,,,,,,,,,
command.parse_args(*args),3,,,,,,,,,,
return Battery(,3,,,,,,,,,,
speed_right = round(speed_right),3,,,,,,,,,,
"NE,",3,,,,,,,,,,
sensor_type = struct.unpack(,3,,,,,,,,,,
is the message counter of the corresponding send_system_cmd,3,,,,,,,,,,
qr.moveCenter(cp),3,,,,,,,,,,
"assert polarity_left in (-1, 1), \",3,,,,,,,,,,
"assert global_mem >= 0, \",3,,,,,,,,,,
def reset(self):,3,,,,,,,,,,
"ops,",3,,,,,,,,,,
from .gyro import Gyro,3,,,,,,,,,,
"opMove32_32,  # # b'\x3A'",3,,,,,,,,,,
"self.anim = animation.FuncAnimation(fig, self.animate_loop, interval=1000)",3,,,,,,,,,,
AF32 = 28 #Med drop probability,3,,,,,,,,,,
"if self._protocol in (BLUETOOTH, WIFI):",3,,,,,,,,,,
self._ramp_down_time = ramp_down_time,3,,,,,,,,,,
"GET_FW_VERS,",3,,,,,,,,,,
"global time_delta_min, time_delta_max",3,,,,,,,,,,
"opJr_GteqF,  # b'\x7B'",3,,,,,,,,,,
HAPPY_BIRTHDAY = {,3,,,,,,,,,,
"f""     - Internet Header Length (IHL). . : {self.ihl * 4} bytes (0x{self.ihl:02x})"",",3,,,,,,,,,,
if _control:,3,,,,,,,,,,
"LVX(0),  # SOURCE1 - diff (DATAF)",3,,,,,,,,,,
self._lang = lang,3,,,,,,,,,,
"opInput_Device,",3,,,,,,,,,,
del_index=[],3,,,,,,,,,,
EV3_GYRO,3,,,,,,,,,,
self.introduction_points = self.descriptor.introduction_points,3,,,,,,,,,,
self.form.show(),3,,,,,,,,,,
assert len(reply) == 2,3,,,,,,,,,,
self._physical_ev3 = None,3,,,,,,,,,,
if ESD_YN == 1:,3,,,,,,,,,,
"assert 0 <= value <= 2, \",3,,,,,,,,,,
NXT_TEMPERATURE = 6,3,,,,,,,,,,
if len(tmp) == 0:,3,,,,,,,,,,
if buttonReply == QMessageBox.Yes:,3,,,,,,,,,,
"math.copysign(1, degrees)",3,,,,,,,,,,
"protocol=ev3.WIFI,",3,,,,,,,,,,
self._port_handle.applySettingsDict(port_settings),3,,,,,,,,,,
self._radius_wheel / self._tread +,3,,,,,,,,,,
STD,3,,,,,,,,,,
bar_thread.update)),3,,,,,,,,,,
def color_next(self):,3,,,,,,,,,,
"edTxt[index].insert(0,dir)",3,,,,,,,,,,
"opInfo,",3,,,,,,,,,,
if turn >= 0:,3,,,,,,,,,,
SYNC (sync_mode),3,,,,,,,,,,
CLOSE,3,,,,,,,,,,
"LVX(16),  # DESTINATION - step1 + step3 (DATA32)",3,,,,,,,,,,
"from thread_task import Task, Periodic",3,,,,,,,,,,
radius_wheel,3,,,,,,,,,,
action_cont=self.cont,3,,,,,,,,,,
"self.builder.cbranch(test, until_loop_entry, until_loop_otherwise)",3,,,,,,,,,,
if commands:,3,,,,,,,,,,
"GET_IBATT,",3,,,,,,,,,,
"self.export = export.CensysExport(self.api_id, self.api_secret)",3,,,,,,,,,,
"GET_SUBFOLDER_NAME,",3,,,,,,,,,,
global shaft_mmc,3,,,,,,,,,,
port_inner = self._port_right,3,,,,,,,,,,
def Done():,3,,,,,,,,,,
"def var_assign(name,value):",3,,,,,,,,,,
return version,3,,,,,,,,,,
self.i += 1,3,,,,,,,,,,
"class DfuSerialIOException(DfuException, SerialException):",3,,,,,,,,,,
self._socket = socket.socket(,3,,,,,,,,,,
size of the local memory,3,,,,,,,,,,
import re,3,,,,,,,,,,
"LCX(ramp_down_ms),  # STEP3",3,,,,,,,,,,
ops = ev3.opNop,3,,,,,,,,,,
mac-address of the LEGO EV3 (e.g. '00:16:53:42:2B:99'),3,,,,,,,,,,
return self._verbosity,3,,,,,,,,,,
self._channel = channel,3,,,,,,,,,,
app.mainloop(),3,,,,,,,,,,
"self.execute(args.executable, *argv[2:])",3,,,,,,,,,,
return ~s & 0xFFFF,3,,,,,,,,,,
captured = capsys.readouterr(),3,,,,,,,,,,
"LVX(8),",3,,,,,,,,,,
"variable=self.ESD_YN_tmp, value=1)",3,,,,,,,,,,
"GVX(90),  # NAME (out)",3,,,,,,,,,,
"self.variables[x[1]] = ptr,typ",3,,,,,,,,,,
_RETRIES = 3,3,,,,,,,,,,
while condition() if callable(condition) else condition:,3,,,,,,,,,,
"PORT_3,",3,,,,,,,,,,
"assert value > 0, \",3,,,,,,,,,,
if amount and len(data) != amount:,3,,,,,,,,,,
"LVX(4),  # SOURCE1 - to_position (DATAF)",3,,,,,,,,,,
In both cases abs(all_inner / all_outer) is the reference.,3,,,,,,,,,,
"label=tk.Label(self,",3,,,,,,,,,,
self._lock.release(),3,,,,,,,,,,
"dfu.erase(int(args.address, 0), int(args.size, 0),",3,,,,,,,,,,
from core.modules import console,3,,,,,,,,,,
def ramp_down(self):,3,,,,,,,,,,
self._serial_write(,3,,,,,,,,,,
cmd_type = _SYSTEM_COMMAND_REPLY,3,,,,,,,,,,
freq,3,,,,,,,,,,
"btn[i].grid(row=2*i+2, column=1)",3,,,,,,,,,,
"opOutput_Step_Sync,",3,,,,,,,,,,
struct.unpack(,3,,,,,,,,,,
"CREATE_DIR,",3,,,,,,,,,,
self._port  # NO,3,,,,,,,,,,
elif self._port == PORT_B:,3,,,,,,,,,,
OBJ_STOP = 0x00,3,,,,,,,,,,
self._introspection = None,3,,,,,,,,,,
"Task(prepare) + Repeated(next_part),",3,,,,,,,,,,
its single argument must be of type VehiclePosition,3,,,,,,,,,,
")),",3,,,,,,,,,,
freq = round(freq),3,,,,,,,,,,
"assert host is not None or protocol != BLUETOOTH, \",3,,,,,,,,,,
difference in positions [degree] of left and right motor,3,,,,,,,,,,
found = True,3,,,,,,,,,,
operating system build number,3,,,,,,,,,,
"assert isinstance(brake, bool), \",3,,,,,,,,,,
class Client(base.Program):,3,,,,,,,,,,
class page1(QWidget):,3,,,,,,,,,,
from lists import *,3,,,,,,,,,,
return self._msg_cnt,3,,,,,,,,,,
elif pre_byte != 128 and curr_byte == 128:,3,,,,,,,,,,
def __enter__(self):,3,,,,,,,,,,
ramp_up_ms = int(,3,,,,,,,,,,
def conSerial(self):,3,,,,,,,,,,
"LCX(0),  # BRAKE",3,,,,,,,,,,
"opOutput_Reset,",3,,,,,,,,,,
if len(devices) == 0:,3,,,,,,,,,,
buf[-1] = 0,3,,,,,,,,,,
"fmt,",3,,,,,,,,,,
hvbox1.addWidget(self.listLabel1),3,,,,,,,,,,
"self._position = 0., 0.",3,,,,,,,,,,
"Sound,",3,,,,,,,,,,
import math,3,,,,,,,,,,
"from .exceptions import MotorError, PortInUse",3,,,,,,,,,,
data = unpack(,3,,,,,,,,,,
f'of {super().__str__()}',3,,,,,,,,,,
date_list.append(info),3,,,,,,,,,,
os.chdir(Dir_image),3,,,,,,,,,,
def _start_move_to(,3,,,,,,,,,,
hvbox2.addStretch(6),3,,,,,,,,,,
"self._delta_time,",3,,,,,,,,,,
"volume=volume,",3,,,,,,,,,,
start = [,3,,,,,,,,,,
"data = struct.unpack(fmt, reply[6:])[0]",3,,,,,,,,,,
if verbosity >= 1:,3,,,,,,,,,,
nonlocal data,3,,,,,,,,,,
"assert speed is None or 0 < speed <= 100, \",3,,,,,,,,,,
reply[1:6],3,,,,,,,,,,
"hw_vers,",3,,,,,,,,,,
"dfu.read(int(args.address, 0), int(args.size, 0),",3,,,,,,,,,,
xml_list=[],3,,,,,,,,,,
resp2=self.ser.readline(),3,,,,,,,,,,
import matplotlib,3,,,,,,,,,,
ipv4: ipv4.CensysIPv4,3,,,,,,,,,,
- abs(done_inner / done_outer) is too high and,3,,,,,,,,,,
"assert isinstance(_control, bool), \",3,,,,,,,,,,
"GVX(4),  # VALUE2 - channel 2",3,,,,,,,,,,
"PLAY,",3,,,,,,,,,,
diff_left = round(target_pos[0] - current_pos.left),3,,,,,,,,,,
"LED,",3,,,,,,,,,,
"btn.grid(row=13, column=4)",3,,,,,,,,,,
"from .functions import LCX, LVX, GVX, port_motor_input",3,,,,,,,,,,
"opDiv32,",3,,,,,,,,,,
if (,3,,,,,,,,,,
chunk = data[offset - address: offset - address + part_size],3,,,,,,,,,,
self._abort(),3,,,,,,,,,,
"self.ipv4 = ipv4.CensysIPv4(self.api_id, self.api_secret)",3,,,,,,,,,,
"self.start_move_to,",3,,,,,,,,,,
"LED_GREEN_PULSE,",3,,,,,,,,,,
msg_cnt_2 = my_ev3.send_direct_cmd(,3,,,,,,,,,,
(steps[1] - steps[0]),3,,,,,,,,,,
"opOutput_Reset,  # b'\xA2'",3,,,,,,,,,,
self.compile(orelse),3,,,,,,,,,,
sys.exit(0),3,,,,,,,,,,
"GVX(16),  # TOTAL (out)",3,,,,,,,,,,
step2 = 0,3,,,,,,,,,,
"LCX(step3_left),  # STEP3",3,,,,,,,,,,
(,3,,,,,,,,,,
repeat,3,,,,,,,,,,
self._final_move_for,3,,,,,,,,,,
time_delta_min=self.time_delta_min_tmp.get(),3,,,,,,,,,,
Ask the LEGO EV3 for a reply and wait until it is received,3,,,,,,,,,,
"self._device.write(_EP_OUT, cmd, 100)",3,,,,,,,,,,
"LCS(parent_path),",3,,,,,,,,,,
self.arguments.output.flush(),3,,,,,,,,,,
if ramp_up is None:,3,,,,,,,,,,
import glob,3,,,,,,,,,,
elif self.arguments.twitter:,3,,,,,,,,,,
class CSF(object):,3,,,,,,,,,,
else:,3,,,,,,,,,,
self.downLoad.clicked.connect(self.savefile),3,,,,,,,,,,
cmd_type = _SYSTEM_COMMAND_NO_REPLY,3,,,,,,,,,,
hvbox1.addWidget(self.atemLabel1),3,,,,,,,,,,
import usb.util,3,,,,,,,,,,
current vehicle position (as named tuple),3,,,,,,,,,,
Dir_proc=self.Dir_proc_tmp.get(),3,,,,,,,,,,
path_config=self.path_config_tmp.get(),3,,,,,,,,,,
self.dtemVal.setStyleSheet(valStyle),3,,,,,,,,,,
allowance = hole_mmc - shaft_mmc,3,,,,,,,,,,
if dist == 100:,3,,,,,,,,,,
safety_gap = 120  # add this number of b'\x80',3,,,,,,,,,,
return self._rgb_white_balance_raw,3,,,,,,,,,,
path,3,,,,,,,,,,
"GET_TYPEMODE,  # CMD",3,,,,,,,,,,
"self,",3,,,,,,,,,,
assert (,3,,,,,,,,,,
Voice,3,,,,,,,,,,
latex_documents = [,3,,,,,,,,,,
"tone, beats = self._tones[self._pos]",3,,,,,,,,,,
class SysCmdError(Exception):,3,,,,,,,,,,
return self._id,3,,,,,,,,,,
"self.websites = websites.CensysWebsites(self.api_id, self.api_secret)",3,,,,,,,,,,
"NXT_TOUCH,",3,,,,,,,,,,
duration,3,,,,,,,,,,
"_ID_PRODUCT_EV3,",3,,,,,,,,,,
"LCX(port_inner),  # NOS",3,,,,,,,,,,
def center(self):,3,,,,,,,,,,
self._name = None,3,,,,,,,,,,
return json.load(map_file),3,,,,,,,,,,
"assert isinstance(verbosity, int), \",3,,,,,,,,,,
"opMul32,",3,,,,,,,,,,
"action_stop=self.stop_sound,",3,,,,,,,,,,
elif values[n] == 1:,3,,,,,,,,,,
if length < 1 + 1 + 2 + 4 + 8:,3,,,,,,,,,,
"PORT_4,",3,,,,,,,,,,
"self._port,  # NO",3,,,,,,,,,,
from threading import Thread,3,,,,,,,,,,
"LE,",3,,,,,,,,,,
"ramp_up=ramp_up,",3,,,,,,,,,,
"self.ioctl(SIO_RCVALL, RCVALL_OFF)",3,,,,,,,,,,
"round(self._target_position + degrees),",3,,,,,,,,,,
bar_thread.join(),3,,,,,,,,,,
"ev3.GET_BRICKNAME,  # CMD",3,,,,,,,,,,
self.send_system_cmd(cmd),3,,,,,,,,,,
del data_date[del_index[len(del_index)-i-1]],3,,,,,,,,,,
name = matcher.group(3),3,,,,,,,,,,
if action:,3,,,,,,,,,,
if lang is None:,3,,,,,,,,,,
def wait_for_reply(,3,,,,,,,,,,
"for curr_name, curr_size, curr_md5 in files:",3,,,,,,,,,,
from .stm32uartdfu import Stm32UartDfu,3,,,,,,,,,,
name_orig = struct.unpack(,3,,,,,,,,,,
"def compile(self,ast):",3,,,,,,,,,,
"HAPPY_BIRTHDAY,",3,,,,,,,,,,
ev3_dc.EV3.sensors_as_dict[ev3_dc.PORT_A_SENSOR],3,,,,,,,,,,
"def on_connect(self, socket):",3,,,,,,,,,,
args.append(val),3,,,,,,,,,,
"assert port_left in (PORT_A, PORT_B, PORT_C, PORT_D), \",3,,,,,,,,,,
"vehicle_pos_x, vehicle_pos_y = self._position",3,,,,,,,,,,
"variable=self.polar_index_tmp,",3,,,,,,,,,,
"result.append(Remote(False, False, True, False, False))",3,,,,,,,,,,
(can be used to release brake),3,,,,,,,,,,
CS4 = 32 # Realtime,3,,,,,,,,,,
PORT_C = 4,3,,,,,,,,,,
Positional Arguments,3,,,,,,,,,,
"LCX(0),  # MODE - Degree",3,,,,,,,,,,
return self._physical_ev3._wait_for_system_reply(,3,,,,,,,,,,
180,3,,,,,,,,,,
"opOr8,",3,,,,,,,,,,
"edTxt=[ tk.Entry(self, textvariable=self.Dir_proc_tmp, width=50, borderwidth=2),",3,,,,,,,,,,
"math.copysign(1, speed) * delta_pos < 0",3,,,,,,,,,,
polarity_left,3,,,,,,,,,,
self.center(),3,,,,,,,,,,
class socksocket(socks.socksocket):,3,,,,,,,,,,
"f""host {self._host} already connected, call with argument ev3_obj""",3,,,,,,,,,,
"GET_VBATT,",3,,,,,,,,,,
"then modifies the speed of the inner wheel, which needs to do",3,,,,,,,,,,
y4=0,3,,,,,,,,,,
Master_date=self.Master_data_tmp.get(),3,,,,,,,,,,
if self._position > 0:,3,,,,,,,,,,
"func,ret_type = self.variables[name]",3,,,,,,,,,,
if check:,3,,,,,,,,,,
@verbosity.setter,3,,,,,,,,,,
"Octnumber,",3,,,,,,,,,,
"self._tracking._motor_pos[0] + diff_pos[0],",3,,,,,,,,,,
"f""     - Options . . . . . . . . . . . . : {self.options}""])",3,,,,,,,,,,
"GET_HW_VERS,  # CMD",3,,,,,,,,,,
self.send_direct_cmd(,3,,,,,,,,,,
) *,3,,,,,,,,,,
engine.finalize_object(),3,,,,,,,,,,
STD (sync_mode),3,,,,,,,,,,
return self.start_move_to(,3,,,,,,,,,,
return float(dist/ 100),3,,,,,,,,,,
step3 = round(abs(degrees) - step1),3,,,,,,,,,,
"LVX(12),  # SOURCE1 - step3 (DATA32)",3,,,,,,,,,,
if type is 0: # end,3,,,,,,,,,,
"LCX(volume),  # VOLUME",3,,,,,,,,,,
port_right,3,,,,,,,,,,
step3_left = abs(diff_left) - step1_left,3,,,,,,,,,,
"assert isinstance(distance, Number), \",3,,,,,,,,,,
"LBRACE,",3,,,,,,,,,,
date_list.sort(),3,,,,,,,,,,
"f""host {self._host} already connected, call with argument ev3_obj""",3,,,,,,,,,,
elif self._port == PORT_C:,3,,,,,,,,,,
"for key, value in dict[1].items():",3,,,,,,,,,,
orientation is in degrees [-180 - 180],3,,,,,,,,,,
"PORT_B_SENSOR,",3,,,,,,,,,,
assert re.sub(,3,,,,,,,,,,
from . import exceptions,3,,,,,,,,,,
if curr_size == size:,3,,,,,,,,,,
"LCX(1),  # MODE (Touch)",3,,,,,,,,,,
radius_outer /,3,,,,,,,,,,
"def visit_while(self,branch):",3,,,,,,,,,,
self.start(,3,,,,,,,,,,
"PORT_B_SENSOR,",3,,,,,,,,,,
self._set_address(address),3,,,,,,,,,,
"assert speed > 0, \",3,,,,,,,,,,
"top level domain of google server, e.g. 'de', 'co.jp', 'com' (default)",3,,,,,,,,,,
"LVX,",3,,,,,,,,,,
self._polarity_right = polarity_right,3,,,,,,,,,,
self.stop_sound(),3,,,,,,,,,,
else:,3,,,,,,,,,,
"global_mem=8,",3,,,,,,,,,,
"def on_error(self, socket, exception):",3,,,,,,,,,,
"PORT_A_SENSOR,",3,,,,,,,,,,
self._bar_len -= 1,3,,,,,,,,,,
"dfu.erase(int(args.address, 0), erase_size, mem_map,",3,,,,,,,,,,
fact * sin(radians(orientation - 0.5 * angle)),3,,,,,,,,,,
self.groupBox4.setStyleSheet(groupStyle),3,,,,,,,,,,
from .vehicle import (,3,,,,,,,,,,
valraw=self.ser.readline(),3,,,,,,,,,,
self._device.set_configuration(),3,,,,,,,,,,
ports = (,3,,,,,,,,,,
num = struct.unpack(,3,,,,,,,,,,
"pos_inner, pos_outer, speed, busy_inner, busy_outer = direct_cmd()",3,,,,,,,,,,
if (,3,,,,,,,,,,
app = QApplication(sys.argv),3,,,,,,,,,,
NXT_COLOR = 4,3,,,,,,,,,,
EV3_MEDIUM_MOTOR,3,,,,,,,,,,
AF33 = 30 #High drop probability,3,,,,,,,,,,
"CREATE_DIR,",3,,,,,,,,,,
@port_left.setter,3,,,,,,,,,,
splash.finish(form),3,,,,,,,,,,
"TIMES,",3,,,,,,,,,,
"LCX(position),  # SOURCE",3,,,,,,,,,,
"assert isinstance(duration, Number), \",3,,,,,,,,,,
@rgb_white_balance.setter,3,,,,,,,,,,
"GET_FW_BUILD,  # CMD",3,,,,,,,,,,
from decimal import Decimal,3,,,,,,,,,,
step2 = abs(degrees) - ramp_up - ramp_down,3,,,,,,,,,,
round(self._target_motor_pos.right),3,,,,,,,,,,
"LED_RED_FLASH,",3,,,,,,,,,,
"reply = self.send_direct_cmd(ops, local_mem=24, global_mem=1)",3,,,,,,,,,,
commands.add(attribute),3,,,,,,,,,,
firmware build number,3,,,,,,,,,,
"GVX(0),  # VALUE1 red (output)",3,,,,,,,,,,
"ev3.LCX(32),  # LENGTH",3,,,,,,,,,,
"Jukebox,",3,,,,,,,,,,
csf = CSF,3,,,,,,,,,,
"reply to the direct command (without len, msg_cnt and return status)",3,,,,,,,,,,
def play_tone(,3,,,,,,,,,,
"opOutput_Step_Speed,",3,,,,,,,,,,
class PLexer(Lexer):,3,,,,,,,,,,
from src.pparser.Parser import PParser,3,,,,,,,,,,
self.start_move_to(,3,,,,,,,,,,
"assert isinstance(secure, bool), \",3,,,,,,,,,,
exceptions,3,,,,,,,,,,
def speak(,3,,,,,,,,,,
offset = address + len(data) - size_remain,3,,,,,,,,,,
def __init__(self):,3,,,,,,,,,,
"opCom_Get,",3,,,,,,,,,,
self._reply_buffer = {},3,,,,,,,,,,
convert(),3,,,,,,,,,,
pid,3,,,,,,,,,,
"RBRACE,",3,,,,,,,,,,
"LVX(16),  # SOURCE2 - step1 + step3 (DATA32)",3,,,,,,,,,,
"assert self._channel is not None, \",3,,,,,,,,,,
hbox2.addWidget(self.groupBox3),3,,,,,,,,,,
t = time.time(),3,,,,,,,,,,
ABS,3,,,,,,,,,,
for value in struct.unpack(,3,,,,,,,,,,
if self._bar_len < self._ENDLESS_BAR_LEN:,3,,,,,,,,,,
"size = int(size_hex, 16)",3,,,,,,,,,,
You can address a single one by e.g.:,3,,,,,,,,,,
return True,3,,,,,,,,,,
hbox0 = QHBoxLayout(),3,,,,,,,,,,
def test_commands(dfu):,3,,,,,,,,,,
"LCX(self._port),  # NOS",3,,,,,,,,,,
synchronicity of program and EV3 device.,3,,,,,,,,,,
if self._host is None and len(devices) > 1:,3,,,,,,,,,,
"raise Exception(f""Cannot parse {ct} data."")",3,,,,,,,,,,
"_SYSTEM_COMMAND_NO_REPLY,",3,,,,,,,,,,
"url = f""./company/lookup.json?domain={query}&prettyPrint={str(prettyPrint).lower()}""",3,,,,,,,,,,
from threading import Lock,3,,,,,,,,,,
lang,3,,,,,,,,,,
self._verbosity = int(value),3,,,,,,,,,,
global_mem=4,3,,,,,,,,,,
"self.builder.cbranch(test, while_loop_entry, while_loop_otherwise)",3,,,,,,,,,,
continues a stopped movement,3,,,,,,,,,,
self._jukebox.change_color(self._led_sequence[self._pos]),3,,,,,,,,,,
"btn_polar_check.grid(row=5, column=1)",3,,,,,,,,,,
starts driving the vehicle straight by a given distance,3,,,,,,,,,,
self.copied = bool(self._copied),3,,,,,,,,,,
S1AB=glob.glob(info),3,,,,,,,,,,
hbox1.addWidget(self.downLoad),3,,,,,,,,,,
starts moving the motors to given positions,3,,,,,,,,,,
class Unreachable(Exception):,3,,,,,,,,,,
freq /= 2,3,,,,,,,,,,
"GVX(33),  # TYPE",3,,,,,,,,,,
class Step1(tk.Frame):,3,,,,,,,,,,
"def newline(self,t ):",3,,,,,,,,,,
def move(,3,,,,,,,,,,
"import stem.util.connection, stem.util.system, stem.connection, stem.process, stem.control",3,,,,,,,,,,
"LED_GREEN_FLASH,",3,,,,,,,,,,
"LVX(40),  # abs(done_inner)",3,,,,,,,,,,
"assert ev3_obj or protocol, \",3,,,,,,,,,,
"if isinstance(raw, RawRGBColor):",3,,,,,,,,,,
self._port_handle.close(),3,,,,,,,,,,
started_at = datetime.now(),3,,,,,,,,,,
"LVX(0),  # SPEED - signed_speed (DATA8)",3,,,,,,,,,,
self._rgb_white_balance_raw = RawRGBColor(*raw),3,,,,,,,,,,
self._socket.close(),3,,,,,,,,,,
"def visit_expression(self,branch):",3,,,,,,,,,,
ramp_up / (ramp_up + ramp_down),3,,,,,,,,,,
) + task,3,,,,,,,,,,
angle < 0 and back,3,,,,,,,,,,
"LCX(8),  # OFFSET",3,,,,,,,,,,
disp(),3,,,,,,,,,,
if any((,3,,,,,,,,,,
exact and smooth movement of the motor by a given angle.,3,,,,,,,,,,
"self.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)",3,,,,,,,,,,
def _wait_for_system_reply(,3,,,,,,,,,,
"value = self.builder.frem(lhs,rhs)",3,,,,,,,,,,
"BEGIN_DOWNLOAD,",3,,,,,,,,,,
elif values[n] == 11:,3,,,,,,,,,,
its single argument must be of type VehiclePosition,3,,,,,,,,,,
self._device = None,3,,,,,,,,,,
allowance = float(allowance),3,,,,,,,,,,
class FileSystem(EV3):,3,,,,,,,,,,
from PyQt5.QtGui import QPainter,3,,,,,,,,,,
w = data[i] + (data[i+1] << 8),3,,,,,,,,,,
"from math import pi, cos, sin, radians, copysign, sqrt",3,,,,,,,,,,
if pos == 0 and curr_byte == 128:,3,,,,,,,,,,
"as absolute path, or relative to /home/root/lms2012/sys/",3,,,,,,,,,,
del_index.append(i),3,,,,,,,,,,
"LCX(4),  # VALUES",3,,,,,,,,,,
volume=volume,3,,,,,,,,,,
"assert volume is None or isinstance(volume, int), \",3,,,,,,,,,,
"response = api.company(self.arguments.company, location = self.arguments.location, locality = self.arguments.locality,",3,,,,,,,,,,
"LVX(60),  # FLAG",3,,,,,,,,,,
"assert isinstance(check, bool), \",3,,,,,,,,,,
files = [],3,,,,,,,,,,
elif rc != SYSTEM_REPLY_OK:,3,,,,,,,,,,
assert dfu.version,3,,,,,,,,,,
"def tracking_callback(self, value):",3,,,,,,,,,,
"MOVE,",3,,,,,,,,,,
if type is 0x55:,3,,,,,,,,,,
self.Dir_image_tmp=tk.StringVar(),3,,,,,,,,,,
from collections.abc import Iterable,3,,,,,,,,,,
def drive_straight(,3,,,,,,,,,,
"Lb.grid(row=1,column=0,rowspan=10)",3,,,,,,,,,,
"LCX(self._port_left),  # NOS",3,,,,,,,,,,
"self.process = stem.process.launch_tor_with_config(config = config, init_msg_handler = None if quiet else lambda line: self._handle_line(term.format(f""{msg_prefix}{line}"", msg_color)))",3,,,,,,,,,,
"GVX(2*i),  # TYPE (output)",3,,,,,,,,,,
step1 = ramp_up,3,,,,,,,,,,
"assert isinstance(turn, int), \",3,,,,,,,,,,
return Task(self.cont),3,,,,,,,,,,
break,3,,,,,,,,,,
self.plot(),3,,,,,,,,,,
"assert isinstance(radius, Number) and radius >= 0, \",3,,,,,,,,,,
def play_sound(,3,,,,,,,,,,
let the EV3 device speak some text,3,,,,,,,,,,
block = func.append_basic_block(f'{name}_entry'),3,,,,,,,,,,
index = 0,3,,,,,,,,,,
"LCX(self._port_left + self._port_right),  # NOS",3,,,,,,,,,,
self.connections = {},3,,,,,,,,,,
"LCX(2),  # MODE (color)",3,,,,,,,,,,
tmp = matcher.group(1).upper(),3,,,,,,,,,,
if self.sensors_as_dict[port_motor_input(self._port_left)] not in (,3,,,,,,,,,,
if secure:,3,,,,,,,,,,
"self.load_file,",3,,,,,,,,,,
global hole_mmc,3,,,,,,,,,,
self.goBtn1.clicked.connect(self.goBtn1Click),3,,,,,,,,,,
"opFile,",3,,,,,,,,,,
"TONE,",3,,,,,,,,,,
hbox2.addWidget(self.groupBox2),3,,,,,,,,,,
"LVX(36),  # done_inner",3,,,,,,,,,,
"action_stop=self.stop,",3,,,,,,,,,,
self.options = None,3,,,,,,,,,,
ramp_down_ms = int(1000 * ramp_down_time),3,,,,,,,,,,
my_ev3.send_direct_cmd(ops),3,,,,,,,,,,
dfu_handler = DfuCommandHandler(),3,,,,,,,,,,
"global Dir_proc, Dir_image, Dir_EOF, path_dem, path_config, path_s1a_cal",3,,,,,,,,,,
if not size and not address:,3,,,,,,,,,,
path +,3,,,,,,,,,,
self._commands = None,3,,,,,,,,,,
SYNC,3,,,,,,,,,,
"tk.Tk.__init__(self, *args, **kwargs)",3,,,,,,,,,,
background-color: #bdc3c7;,3,,,,,,,,,,
module = compiler.module,3,,,,,,,,,,
self._tracking._callback = value,3,,,,,,,,,,
"RSHIFT,",3,,,,,,,,,,
cmd[4:5] == _DIRECT_COMMAND_NO_REPLY or,3,,,,,,,,,,
elif self.arguments.phone:,3,,,,,,,,,,
if speed * rest < 0:,3,,,,,,,,,,
path_dem=self.path_dem_tmp.get(),3,,,,,,,,,,
"opOutput_Clr_Count,",3,,,,,,,,,,
"self.address, self.port = address, port",3,,,,,,,,,,
"assert tread > 0, \",3,,,,,,,,,,
self._lock = Lock(),3,,,,,,,,,,
"stops the current motor movement, with or without brake",3,,,,,,,,,,
export: export.CensysExport,3,,,,,,,,,,
"name, ip_adr and mac_adr of the EV3 device (as named tuple)",3,,,,,,,,,,
container = tk.Frame(self),3,,,,,,,,,,
"btn2.grid(row=9, column=9)",3,,,,,,,,,,
"ramp_down=ramp_down,",3,,,,,,,,,,
"value = self.builder.fadd(lhs,rhs)",3,,,,,,,,,,
def firmware(request):,3,,,,,,,,,,
EV3_LARGE_MOTOR = 7,3,,,,,,,,,,
return pid,3,,,,,,,,,,
return self.from_buffer_copy(buffer[:20]),3,,,,,,,,,,
self.play_sound(,3,,,,,,,,,,
"SET_BRICKNAME,  # CMD",3,,,,,,,,,,
color: #ecf0f1;,3,,,,,,,,,,
"BLUETOOTH == 'Bluetooth',",3,,,,,,,,,,
class Program(object):,3,,,,,,,,,,
step1_left = round(abs(diff_left) * (,3,,,,,,,,,,
message counter,3,,,,,,,,,,
UDPSock.settimeout(10),3,,,,,,,,,,
"verbosity=self._verbosity,",3,,,,,,,,,,
self._port_left = value,3,,,,,,,,,,
"STRING,",3,,,,,,,,,,
if self.process:,3,,,,,,,,,,
"LCX(self.sensors_as_dict[self._port]),  # EV3-Color or NXT-Color",3,,,,,,,,,,
self._progress = progress,3,,,,,,,,,,
self._id = None,3,,,,,,,,,,
vehicle_pos_y += dist * sin(radians(orientation)),3,,,,,,,,,,
left -= 1,3,,,,,,,,,,
self._slow = slow,3,,,,,,,,,,
update vehicle position and orientation,3,,,,,,,,,,
"opUI_Read,",3,,,,,,,,,,
page_name = F.__name__,3,,,,,,,,,,
freq = self._temperament * 2**(-4/12),3,,,,,,,,,,
"opFile,",3,,,,,,,,,,
border-width: 0px;,3,,,,,,,,,,
self._offset += cur_angle - angle,3,,,,,,,,,,
move the motor to a given position.,3,,,,,,,,,,
"btn2.grid(row=10, column=16)",3,,,,,,,,,,
ramp_up_ms = int(1000 * ramp_up_time),3,,,,,,,,,,
"opOutput_Stop,",3,,,,,,,,,,
_devices = set()  # all connected devices as class attribute,3,,,,,,,,,,
"opMath,",3,,,,,,,,,,
AF31 = 26 #Low drop probability,3,,,,,,,,,,
"(default depends on protocol,",3,,,,,,,,,,
step3_right = abs(diff_right) - step1_right,3,,,,,,,,,,
brake,3,,,,,,,,,,
"return ir.Constant(Type,value),Type",3,,,,,,,,,,
"args=(ev3_path,),",3,,,,,,,,,,
"LCX(step2_right),  # STEP2",3,,,,,,,,,,
"LVX(52),  # all_inner / all_outer",3,,,,,,,,,,
"callable, which frequently tells current position,",3,,,,,,,,,,
class Color(EV3):,3,,,,,,,,,,
"size,",3,,,,,,,,,,
"GVX(8),",3,,,,,,,,,,
return [p.def_param],3,,,,,,,,,,
from .ultrasonic import Ultrasonic,3,,,,,,,,,,
from bioserial import *,3,,,,,,,,,,
"LCX(16),",3,,,,,,,,,,
"import sys, time",3,,,,,,,,,,
import pyshark,3,,,,,,,,,,
return tuple(,3,,,,,,,,,,
return math.tan(math.radians(angle)),3,,,,,,,,,,
self._tracking.update(data[:2]),3,,,,,,,,,,
class Step2(tk.Frame):,3,,,,,,,,,,
hhbox4 = QHBoxLayout(),3,,,,,,,,,,
from typing import NoReturn,3,,,,,,,,,,
return reply[5:len_data],3,,,,,,,,,,
with open(args.memory_map) as map_file:,3,,,,,,,,,,
if 1 in flags_set:,3,,,,,,,,,,
layout1.addStretch(3),3,,,,,,,,,,
elif protocol == WIFI:,3,,,,,,,,,,
"LVX(8),  # SOURCE1 - step2 (DATA32)",3,,,,,,,,,,
"LCX(port_outer),  # NOS",3,,,,,,,,,,
"PORT_C_SENSOR,",3,,,,,,,,,,
data = None,3,,,,,,,,,,
info1=info-datetime.timedelta(1),3,,,,,,,,,,
time.sleep(2),3,,,,,,,,,,
elif self._port_left == PORT_B:,3,,,,,,,,,,
hole_mmc = float(hole_mmc),3,,,,,,,,,,
LEGO EV3 direct commands,3,,,,,,,,,,
"opInfo,  # operation",3,,,,,,,,,,
GVX(global_offset + 1) - busy state of right motor (DATA9),3,,,,,,,,,,
layout1 = QVBoxLayout(),3,,,,,,,,,,
path,3,,,,,,,,,,
duration *,3,,,,,,,,,,
if freq > 10000:,3,,,,,,,,,,
all connected sensors and motors at all ports (as dict),3,,,,,,,,,,
if rest <= 0 and rc != SYSTEM_END_OF_FILE:,3,,,,,,,,,,
"GVX(0),  # NAME",3,,,,,,,,,,
"OPEN_READ,",3,,,,,,,,,,
self._bar.update(self._progress),3,,,,,,,,,,
"motor_pos = (pos_inner, pos_outer)",3,,,,,,,,,,
"LVX(20),  # SOURCE1 - step2_orig (DATA32)",3,,,,,,,,,,
if part_size > 0:,3,,,,,,,,,,
"value = self.builder.shl(lhs,rhs)",3,,,,,,,,,,
),3,,,,,,,,,,
"LCX(step1),",3,,,,,,,,,,
1000 *,3,,,,,,,,,,
"dfu.go(int(args.address, 0))",3,,,,,,,,,,
"opJr_GteqF,  # b'\x7B'  already compensating",3,,,,,,,,,,
"thread_task.Task object, which does the continuing",3,,,,,,,,,,
if len(polar_check) != 0:,3,,,,,,,,,,
def main():,3,,,,,,,,,,
"response = requests.get(f""http://ip-api.com/json/{self.arguments.host}?fields=258047"").json()",3,,,,,,,,,,
"assert delta_time is None or delta_time > 0, \",3,,,,,,,,,,
class Fail(Exception):,3,,,,,,,,,,
"self._physical_ev3 = _PhysicalEV3(protocol, host)",3,,,,,,,,,,
NUMBER = group(,3,,,,,,,,,,
"from censys import certificates, websites, ipv4, export, query",3,,,,,,,,,,
from src.pparser.Lexer import PLexer,3,,,,,,,,,,
"opOutput_Step_Speed,  # b'\xAE'",3,,,,,,,,,,
options |= QFileDialog.DontUseNativeDialog,3,,,,,,,,,,
sync_mode=SYNC,3,,,,,,,,,,
) % 360 - 180,3,,,,,,,,,,
"self._serial_write(self._checksum(data, len(data) - 1))",3,,,,,,,,,,
"assert isinstance(slow, bool), \",3,,,,,,,,,,
ptr = self.builder.alloca(Type),3,,,,,,,,,,
"PLUS,",3,,,,,,,,,,
type = raw_options[index],3,,,,,,,,,,
"assert ramp_up_time is None or ramp_up_time >= 0, \",3,,,,,,,,,,
reads informations about itself,3,,,,,,,,,,
"handle,",3,,,,,,,,,,
return Task(,3,,,,,,,,,,
"},",3,,,,,,,,,,
def start_move(,3,,,,,,,,,,
from os import urandom,3,,,,,,,,,,
self._delta_time = .1,3,,,,,,,,,,
"LVX(4),  # SOURCE2 - step1 (DATA32)",3,,,,,,,,,,
"port_motor_input(self._port),  # NO",3,,,,,,,,,,
"ev3.SET_BRICKNAME,",3,,,,,,,,,,
"opSub32,  # b'\x16'",3,,,,,,,,,,
This one is called by the Repeated,3,,,,,,,,,,
"OR,",3,,,,,,,,,,
"BEGIN_UPLOAD,",3,,,,,,,,,,
"protocol=protocol,",3,,,,,,,,,,
self._current_movement is None or,3,,,,,,,,,,
ser.serclose(),3,,,,,,,,,,
host,3,,,,,,,,,,
"result.append(Remote(False, True, False, True, False))",3,,,,,,,,,,
class exceptions(object):,3,,,,,,,,,,
"LVX(44),  # ratio_last",3,,,,,,,,,,
size_remain = len(data),3,,,,,,,,,,
"self._position[0],",3,,,,,,,,,,
"LCX(42),  # LENGTH",3,,,,,,,,,,
LCX(value)  # NAME,3,,,,,,,,,,
CS7 = 56,3,,,,,,,,,,
cur_angle = self.angle,3,,,,,,,,,,
polar=self.polar_tmp[self.polar_index_tmp.get()],3,,,,,,,,,,
control_port = stem.connection._connection_for_default_port(address),3,,,,,,,,,,
name +,3,,,,,,,,,,
"positive sign: to the left,",3,,,,,,,,,,
dist = steps[0] * 2 * pi * self._radius_wheel / 360,3,,,,,,,,,,
cmd,3,,,,,,,,,,
"self.on_error(sock, e)",3,,,,,,,,,,
border-radius: 2px;,3,,,,,,,,,,
"GET_VOLUME,",3,,,,,,,,,,
"opJr_Neq32,  # b'\x72'",3,,,,,,,,,,
CS2 = 16 # OAM,3,,,,,,,,,,
"text=self.polar_tmp[i],",3,,,,,,,,,,
class Infrared(EV3):,3,,,,,,,,,,
"PORT_C_SENSOR,",3,,,,,,,,,,
return self._tracking.position,3,,,,,,,,,,
) for byte in my_ev3.send_direct_cmd(,3,,,,,,,,,,
target positions [degree] of left and right motor,3,,,,,,,,,,
for dev in usb.core.find(,3,,,,,,,,,,
duration (sec.) of the tone (no duration means forever),3,,,,,,,,,,
"LCX(step1_left),  # STEP1",3,,,,,,,,,,
def song(,3,,,,,,,,,,
"holds netto data only (cmd and arguments), these fields are added:",3,,,,,,,,,,
radius of turn (meters),3,,,,,,,,,,
),3,,,,,,,,,,
"flag, if path is a location on the local host (PC)",3,,,,,,,,,,
if signal_start is not None:,3,,,,,,,,,,
self.filter = filter,3,,,,,,,,,,
self.quit(),3,,,,,,,,,,
self._tracking = _Tracking(,3,,,,,,,,,,
return response,3,,,,,,,,,,
self.lineno += 1,3,,,,,,,,,,
"opJr_Lteq32,",3,,,,,,,,,,
if self._msg_cnt < 65535:,3,,,,,,,,,,
if not self.arguments.key.size:,3,,,,,,,,,,
"from typing import Callable, Dict, List, NoReturn, Union",3,,,,,,,,,,
"GVX(8),  # VALUE3 - heading   channel 2",3,,,,,,,,,,
yar2.append(int(y2)),3,,,,,,,,,,
"if callable(attribute) and issubclass(attribute, base.Program) and attribute != base.Program:",3,,,,,,,,,,
latex_elements = {,3,,,,,,,,,,
"PORT_C,",3,,,,,,,,,,
},3,,,,,,,,,,
self.layout2.addLayout(hbox0),3,,,,,,,,,,
"CLOSE,",3,,,,,,,,,,
),3,,,,,,,,,,
protocol = matcher.group(4),3,,,,,,,,,,
"socket.SOCK_STREAM,",3,,,,,,,,,,
verbosity=verbosity,3,,,,,,,,,,
"def expression(op,lhs,rhs):",3,,,,,,,,,,
"folders, files = self.list_dir(dir_dest)",3,,,,,,,,,,
self._socket.send(cmd),3,,,,,,,,,,
"def test_load_random(dfu, memory_map, address, size):",3,,,,,,,,,,
continue,3,,,,,,,,,,
"host=host,",3,,,,,,,,,,
"angle > 0 and not back,",3,,,,,,,,,,
"msg_cnt: 2 bytes, little endian",3,,,,,,,,,,
def refreshed(self):,3,,,,,,,,,,
mac_adr is the address of the WiFi dongle,3,,,,,,,,,,
"ret = func(*args, **kwargs)",3,,,,,,,,,,
"LCX,",3,,,,,,,,,,
self.total_length = socket.ntohs(self.raw_total_length),3,,,,,,,,,,
params_ptr = [],3,,,,,,,,,,
delta_pos == 0 or,3,,,,,,,,,,
resp1=self.ser.readline(),3,,,,,,,,,,
while not client._closed:,3,,,,,,,,,,
"LCX(speed_left),  # SPEED",3,,,,,,,,,,
def __del__(self):,3,,,,,,,,,,
os_version,3,,,,,,,,,,
version = self._serial_read(1),3,,,,,,,,,,
"LVX(0),  # all_inner - done_inner",3,,,,,,,,,,
@ramp_up.setter,3,,,,,,,,,,
"self._position[1],",3,,,,,,,,,,
"dfu.write(address, firmware)",3,,,,,,,,,,
abs(angle) *,3,,,,,,,,,,
hole_lmc = clearance + shaft_lmc,3,,,,,,,,,,
direction (sign) and distance (meters) of straight movement,3,,,,,,,,,,
"LCX(48),  # OFFSET",3,,,,,,,,,,
description of the object in a str context,3,,,,,,,,,,
self._perform_erase(parameters),3,,,,,,,,,,
signal_start = pos,3,,,,,,,,,,
"control_port = stem.socket.ControlPort(address, port)",3,,,,,,,,,,
"speed_left = copysign(speed, diff_left)",3,,,,,,,,,,
if args.memory_map:,3,,,,,,,,,,
"assert self._host not in self._devices, \",3,,,,,,,,,,
"global_mem=126,",3,,,,,,,,,,
"LCX(34),  # OFFSET",3,,,,,,,,,,
self._radius_wheel,3,,,,,,,,,,
self.groupBox1.setStyleSheet(groupStyle),3,,,,,,,,,,
if not data:,3,,,,,,,,,,
if steps[0] == steps[1]:,3,,,,,,,,,,
Decnumber,3,,,,,,,,,,
NONECOLOR = 0,3,,,,,,,,,,
task += Task(,3,,,,,,,,,,
"from_=0, to=300, resolution=6,",3,,,,,,,,,,
if exc_call:,3,,,,,,,,,,
self.type_map = {,3,,,,,,,,,,
return self._delta_time,3,,,,,,,,,,
"callable, which frequently tells current vehicle position,",3,,,,,,,,,,
"duration = max(0., duration - self._delta_time)",3,,,,,,,,,,
previous_variables = self.variables.copy(),3,,,,,,,,,,
self._polarity_left * self._motor_pos[0],3,,,,,,,,,,
"func = ir.Function(self.module,fnty,name=name)",3,,,,,,,,,,
target position (degrees),3,,,,,,,,,,
thread.start(),3,,,,,,,,,,
import zlib,3,,,,,,,,,,
orientation = (,3,,,,,,,,,,
reply[6:],3,,,,,,,,,,
return self._endless,3,,,,,,,,,,
self.connect_usb(),3,,,,,,,,,,
"self._start_drive_straight,",3,,,,,,,,,,
"AND,",3,,,,,,,,,,
Num_data=len(data_date),3,,,,,,,,,,
"CONTINUE_UPLOAD,",3,,,,,,,,,,
self.api_id = api_id,3,,,,,,,,,,
"assert protocol in (BLUETOOTH, WIFI, USB), \",3,,,,,,,,,,
freq *= 2**(1/12),3,,,,,,,,,,
prepare raw sound data,3,,,,,,,,,,
round(fact * res),3,,,,,,,,,,
with otherwise:,3,,,,,,,,,,
data_md5 = None,3,,,,,,,,,,
+ manifest_list[i],3,,,,,,,,,,
def cls():,3,,,,,,,,,,
global_mem,3,,,,,,,,,,
Mandatory positional arguments,3,,,,,,,,,,
"value = self.builder.add(lhs,rhs)",3,,,,,,,,,,
def Get_pwd():,3,,,,,,,,,,
raise PortInUse(f'{port_str} of {host_str} already in use'),3,,,,,,,,,,
return retry_wrapper,3,,,,,,,,,,
kwargs={,3,,,,,,,,,,
"return string, Type",3,,,,,,,,,,
class Tor(object):,3,,,,,,,,,,
check=False,3,,,,,,,,,,
"def parse_args(self, *args):",3,,,,,,,,,,
"def expr(self,p):",3,,,,,,,,,,
done = self._port_handle.write(data),3,,,,,,,,,,
(duration - ramp_up_time - ramp_down_time),3,,,,,,,,,,
self._lock.release(),3,,,,,,,,,,
"ASYNC,",3,,,,,,,,,,
"READ_BYTES,",3,,,,,,,,,,
the vehicles tread [m],3,,,,,,,,,,
turn = -200 - turn,3,,,,,,,,,,
def convert():,3,,,,,,,,,,
del data,3,,,,,,,,,,
GVX(global_offset + 4) - position of right motor (DATA32),3,,,,,,,,,,
"assert isinstance(reply, bool), \",3,,,,,,,,,,
"idVendor=_ID_VENDOR_LEGO,",3,,,,,,,,,,
delta_time,3,,,,,,,,,,
"assert ramp_up_time is None or isinstance(ramp_up_time, Number), \",3,,,,,,,,,,
"stops the current motor movement, sets or releases brake",3,,,,,,,,,,
"reply = self.send_direct_cmd(ops, global_mem=1)",3,,,,,,,,,,
_print = print,3,,,,,,,,,,
"from .functions import LCX, GVX, LCS",3,,,,,,,,,,
self.time_delta_min_tmp=tk.IntVar(),3,,,,,,,,,,
"LED_GREEN_PULSE,",3,,,,,,,,,,
"opInput_Device,  # operation",3,,,,,,,,,,
raise e,3,,,,,,,,,,
self.builder = previous_builder,3,,,,,,,,,,
"isinstance(self._socket, socket.socket) and",3,,,,,,,,,,
"opMoveF_32,",3,,,,,,,,,,
"global_mem=9,",3,,,,,,,,,,
class DfuAcknowledgeException(DfuException):,3,,,,,,,,,,
self.ser.close(),3,,,,,,,,,,
target_pos[1],3,,,,,,,,,,
if self.sensors_as_dict[port_motor_input(self._port)] not in (,3,,,,,,,,,,
"def retry_wrapper(*args, **kwargs):",3,,,,,,,,,,
from core.modules.console import print,3,,,,,,,,,,
"val,_ = self.visit_value(x)",3,,,,,,,,,,
"READY_PCT,",3,,,,,,,,,,
def goBtn1Click(self):,3,,,,,,,,,,
verbosity = self._verbosity,3,,,,,,,,,,
while time.time() < t + 0.01:,3,,,,,,,,,,
self.arguments.key.seek(0),3,,,,,,,,,,
return self._port,3,,,,,,,,,,
"LVX(20),  # DESTINATION - step2_orig (DATA32)",3,,,,,,,,,,
ser = SerialWrapper1(port_serial),3,,,,,,,,,,
global Num_data,3,,,,,,,,,,
"duration=self._delta_time,",3,,,,,,,,,,
hvbox3.addStretch(6),3,,,,,,,,,,
"opJr_GteqF,",3,,,,,,,,,,
"(0, 0),  # motor_pos",3,,,,,,,,,,
"LCX(steady_ms),  # STEP2",3,,,,,,,,,,
module.triple = llvm.get_default_triple(),3,,,,,,,,,,
if not key:,3,,,,,,,,,,
if signal_start is not None and pause_start is not None:,3,,,,,,,,,,
"LCX(turn),",3,,,,,,,,,,
from remote.web.apis.modules import fullcontact,3,,,,,,,,,,
GREENCOLOR = 3,3,,,,,,,,,,
return self.state.angle,3,,,,,,,,,,
"GVX(12),  # BUSY (DATA8) - output",3,,,,,,,,,,
class IPv4(Structure):,3,,,,,,,,,,
def initUI1(self):,3,,,,,,,,,,
import time,3,,,,,,,,,,
def test_read_id(dfu):,3,,,,,,,,,,
font-family: Calibri;,3,,,,,,,,,,
AF13 = 14 #High drop probability,3,,,,,,,,,,
"import argparse, sys, os",3,,,,,,,,,,
g.write(content),3,,,,,,,,,,
mac_addr = None,3,,,,,,,,,,
def sind(angle):,3,,,,,,,,,,
"scale2=tk.Scale(self,",3,,,,,,,,,,
"opInfo,",3,,,,,,,,,,
if not part:,3,,,,,,,,,,
"assert -100 <= speed <= 100, \",3,,,,,,,,,,
def ramp_up(self):,3,,,,,,,,,,
self._pos += 1,3,,,,,,,,,,
websites: websites.CensysWebsites,3,,,,,,,,,,
stem.interpreter.main(),3,,,,,,,,,,
"duration=self._delta_time,",3,,,,,,,,,,
if rc == SYSTEM_END_OF_FILE:,3,,,,,,,,,,
"RETURN,",3,,,,,,,,,,
connection type,3,,,,,,,,,,
return wait,3,,,,,,,,,,
"assert ramp_up is None or isinstance(ramp_up, int), \",3,,,,,,,,,,
"BREAK,",3,,,,,,,,,,
"assert sync_mode is None or sync_mode in (STD, SYNC, ASYNC), \",3,,,,,,,,,,
elif case == 1:,3,,,,,,,,,,
"epilog += f""[i] {dict[0]}: ({len(dict[1])})\n""",3,,,,,,,,,,
"assert self._host not in self._devices, \",3,,,,,,,,,,
but never wait for reply (it's the task of the calling program).,3,,,,,,,,,,
"filename, line, function, text = traceback.extract_tb(e.__traceback__)[-1]",3,,,,,,,,,,
"ev3.opCom_Set,",3,,,,,,,,,,
self.pcap = pcap,3,,,,,,,,,,
layout1.addStretch(2),3,,,,,,,,,,
fingerprints = {},3,,,,,,,,,,
from .exceptions import DfuException,3,,,,,,,,,,
import serial,3,,,,,,,,,,
@staticmethod,3,,,,,,,,,,
"ops,",3,,,,,,,,,,
main(),3,,,,,,,,,,
"GET_SUBFOLDER_NAME,",3,,,,,,,,,,
convert(),3,,,,,,,,,,
"GVX,",3,,,,,,,,,,
_control=True,3,,,,,,,,,,
"data[signal_start:pause_start],",3,,,,,,,,,,
hhbox1.addWidget(self.atemVal1),3,,,,,,,,,,
"GET_NETWORK,",3,,,,,,,,,,
"opOutput_Stop,",3,,,,,,,,,,
closes the connection to the LEGO EV3,3,,,,,,,,,,
return self.wait_for_reply(,3,,,,,,,,,,
WIFI == 'WiFi',3,,,,,,,,,,
self.move(qr.topLeft()),3,,,,,,,,,,
negative sign: to the right,3,,,,,,,,,,
ramp_down_ms = int(1000 * duration - ramp_up_ms),3,,,,,,,,,,
hvbox2.addWidget(self.atemLabel2),3,,,,,,,,,,
tokens = PLexer.tokens,3,,,,,,,,,,
sync_mode = SYNC,3,,,,,,,,,,
if self._pos == len(self._tones):,3,,,,,,,,,,
"def __exit__(self, exc_type, exc_value, exc_traceback):",3,,,,,,,,,,
angle,3,,,,,,,,,,
global_mem=2,3,,,,,,,,,,
"LVX(0),  # VALUE1 - from_position (DATAF)",3,,,,,,,,,,
ffmpeg error,3,,,,,,,,,,
hhbox3.addWidget(self.dtemVal),3,,,,,,,,,,
"assert self._physical_ev3._protocol == WIFI, \",3,,,,,,,,,,
self.animate(),3,,,,,,,,,,
self.atemVal1.setStyleSheet(valStyle),3,,,,,,,,,,
self._start_move_by(,3,,,,,,,,,,
"opMemory_Usage,",3,,,,,,,,,,
"LVX(32),  # STEP3",3,,,,,,,,,,
if local:,3,,,,,,,,,,
"LVX(8),  # SOURCE2 - speed (DATAF)",3,,,,,,,,,,
radius_inner = radius - 0.5 * self._tread,3,,,,,,,,,,
"path,",3,,,,,,,,,,
del data,3,,,,,,,,,,
llvm_ir_parsed.verify(),3,,,,,,,,,,
"LVX(44),  # last_inner / last_outer",3,,,,,,,,,,
"def vin(prompt, defvalue, **kwargs):",3,,,,,,,,,,
comboPortList(self.portCombox),3,,,,,,,,,,
commands = set(),3,,,,,,,,,,
DF = 0,3,,,,,,,,,,
if reply[4:5] == _DIRECT_REPLY:,3,,,,,,,,,,
class Voice(Sound):,3,,,,,,,,,,
"_SYSTEM_COMMAND_REPLY,",3,,,,,,,,,,
''',3,,,,,,,,,,
data = struct.unpack(,3,,,,,,,,,,
sync_mode == ASYNC,3,,,,,,,,,,
if len(polar_check) != 0 or len(EOF_check) != 0:,3,,,,,,,,,,
"edTxt1.insert(0,data_date[0])",3,,,,,,,,,,
y2=0,3,,,,,,,,,,
hvbox1.addStretch(3),3,,,,,,,,,,
wait = send_and_play(,3,,,,,,,,,,
self._device = dev,3,,,,,,,,,,
class MotorError(Exception):,3,,,,,,,,,,
now = time.time(),3,,,,,,,,,,
NXT_COLOR,3,,,,,,,,,,
"def __exit__(self, *_, **__):",3,,,,,,,,,,
hvbox1.addLayout(hhbox1),3,,,,,,,,,,
self._check_acknowledge(),3,,,,,,,,,,
hvbox4 = QVBoxLayout(),3,,,,,,,,,,
"value = self.builder.srem(lhs,rhs)",3,,,,,,,,,,
"os.link(tmp1[0],tmp2[-1])",3,,,,,,,,,,
"dfu.erase(address, len(firmware), memory_map)",3,,,,,,,,,,
return self._ramp_up_time,3,,,,,,,,,,
splash_pix = QPixmap(splash_pic),3,,,,,,,,,,
class Motor(EV3):,3,,,,,,,,,,
self.arguments.key.size = os.fstat(self.arguments.key.fileno()).st_size,3,,,,,,,,,,
ev3.LCS(name_orig),3,,,,,,,,,,
return p.def_params,3,,,,,,,,,,
parser = PParser(),3,,,,,,,,,,
"g=open(u'data.in',u'w')",2,,,,,"u'data.in',u'w')",,,,,"u'data.in',u'w')"
opStrings = '\x7D',2,,,,,,,,,,
"u'-loglevel', u'error',",2,,,,,"u'-loglevel',",,,,,"u'-loglevel',"
"text=u'Step 1. Preprocessing',",2,,,,,u'Step,,,,,u'Step
"if (int(sector[u'address'], 0) <= address <",2,,,,,"u'address'],",,,,,"u'address'],"
elif branch[0] == u'Return':,2,,,,,u'Return':,,,,,u'Return':
"@pytest.mark.parametrize(u'address,size', [",2,,,,,"u'address,size',",,,,,"u'address,size',"
elif op == u'>>':,2,,,,,u'>>':,,,,,u'>>':
"ramp_down=self._current_movement[u'ramp_down'],",2,,,,,"u'ramp_down'],",,,,,"u'ramp_down'],"
else: polarity_left =  1,2,,,,,,,,,,
tokens = set([,2,,,,,,,,,,
opCom_Write = '\x92',2,,,,,,,,,,
SET_BRICKNAME = '\x08',2,,,,,,,,,,
self.atemLabel1 = QLabel(u'Analog Temperature1'),2,,,,,u'Analog,,,,,u'Analog
help=u'Specify file for memory dump.'),2,,,,,u'Specify,,,,,u'Specify
opJr_GteqF = '\x7B',2,,,,,,,,,,
"kwargs = {u""await_publication"": True, u""discard_key"": discard_key, u""detached"": detached}",2,,,,,"u""await_publication"":",,,,,"u""await_publication"":"
"u'green',",2,,,,,"u'green',",,,,,"u'green',"
COMMAND = '\x0E',2,,,,,,,,,,
"run_command.add_argument(u'-a', u'--address', default=u'0x8000000',",2,,,,,"u'-a',",,,,,"u'-a',"
"def del_dir(self, path, **_3to2kwargs):",2,,,,,,,,,,
"(u""a'"", 1.5),",2,,,,,"u""a'"",",,,,,"u""a'"","
GET_VISIBLE = '\x02',2,,,,,,,,,,
templates_path = [u'_templates'],2,,,,,u'_templates'],,,,,u'_templates']
opMove8_32 = '\x32',2,,,,,,,,,,
"(u""f#'"", 2),",2,,,,,"u""f#'"",",,,,,"u""f#'"","
"u'Port_2',",2,,,,,"u'Port_2',",,,,,"u'Port_2',"
ICON_LOCK = '\x02',2,,,,,,,,,,
self.module = ir.Module(u'main'),2,,,,,u'main'),,,,,u'main')
CLR_ALL = '\x0A',2,,,,,,,,,,
else: verbosity =  0,2,,,,,,,,,,
fmt = unicode(part_size) + u's',2,,,,,u's',,unicode(,,,u's' unicode(
"u'total',",2,,,,,"u'total',",,,,,"u'total',"
"(u""a'"", .5),",2,,,,,"u""a'"",",,,,,"u""a'"","
opWriteF = '\xCF',2,,,,,,,,,,
"load_command.add_argument(u'-f', u'--file', help=u'Binary firmware file.')",2,,,,,"u'-f',",,,,,"u'-f',"
"def stop(self, brake = False):",2,,,,,,,,,,
"label.grid(row=4, column=3, columnspan=5, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
"@_(u""statements"")",2,,,,,"u""statements"")",,,,,"u""statements"")"
opUI_Button = '\x83',2,,,,,,,,,,
port_str = u'PORT_A',2,,,,,u'PORT_A',,,,,u'PORT_A'
"elif tone.startswith(u""f""):",2,,,,,"u""f""):",,,,,"u""f""):"
else: brake =  False,2,,,,,,,,,,
"label.grid(row=1, column=4, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
"NonECT = __builtins__.long(""00"", 2) # Non ECN-Capable Transport, Non-ECT",2,,,,,,,,,,
PIXEL = '\x02',2,,,,,,,,,,
else: port_right =  PORT_D,2,,,,,,,,,,
print,2,,,,,,,,,,
BUTTONTYPES = '\x08',2,,,,,,,,,,
"connection.send(data.encode() if isinstance(data, unicode) else data)",2,,,,,,,,,,
"src2 = resource_path(os.path.join(u'src', src2a))",2,,,,,"u'src',",,,,,"u'src',"
from __future__ import absolute_import,2,,__future__ ,,,,,,,,__future__ 
raise TypeError(u'Expected a <file>'),2,,,,,u'Expected,,,,,u'Expected
"@_retry(_RETRIES, u'get extended dfu version', _serial_flush)",2,,,,,u'get,,,,,u'get
ret_type = self.type_map[u'int'],2,,,,,u'int'],,,,,u'int']
"choice = raw_input(u""Enter an option: "")",2,,,,,"u""Enter",,,,raw_input(,"u""Enter raw_input("
if 'temperament' in _3to2kwargs: temperament = _3to2kwargs['temperament']; del _3to2kwargs['temperament'],2,,,,,,,,,,
WARN_TEMP = '\x0B',2,,,,,,,,,,
"def __init__(self, family = AddressFamily.AF_INET, type = SocketKind.SOCK_STREAM, proto = 0, fileno = None,",2,,,,,,,,,,
os.chdir(u'raw'),2,,,,,u'raw'),,,,,u'raw')
u'volume must be in range [0 - 100]',2,,,,,u'volume,,,,,u'volume
"u"" when writing file "" +",2,,,,,"u"" when",,,,,"u"" when"
print resp,2,,,,,,print resp,,,,print resp
u'Select the s1a-cal-aux.xml file '],2,,,,,u'Select,,,,,u'Select
"def __init__(self, url, headers = {}):",2,,,,,,,,,,
+u':S1_'+data_date[j]+u'_ALL_F'+iw[-1]+u'\n'),2,,,,,u':S1_'+data_date[j]+u'_ALL_F'+iw[-1]+u'\n'),,,,,u':S1_'+data_date[j]+u'_ALL_F'+iw[-1]+u'\n')
"assert isinstance(value, int), u""sleep needs to be of type int""",2,,,,,"u""sleep",,,,,"u""sleep"
erase_command = commands.add_parser(u'erase'),2,,,,,u'erase'),,,,,u'erase')
"def go(self, address):",2,,,,,,,,,,
def _serial_flush(self):,2,,,,,,,,,,
"u""5"": self.quit",2,,,,,"u""5"":",,,,,"u""5"":"
port_str = u'PORT_B',2,,,,,u'PORT_B',,,,,u'PORT_B'
BTTYPE_UNKNOWN = '\x06'  # Bluetooth type UNKNOWN,2,,,,,,,,,,
print f'Erasing {erase_size} bytes from {args.address}...',2,,,,,,print f'Erasing {erase_size} bytes from {args.address}...',,,,print f'Erasing {erase_size} bytes from {args.address}...'
opRl8 = '\x2C',2,,,,,,,,,,
GET_TYPEMODE = '\x05',2,,,,,,,,,,
if platform.system() == u'Darwin':,2,,,,,u'Darwin':,,,,,u'Darwin':
"data = ''.join([random.randint(0, 255).to_bytes(1, u'big')",2,,,,,u'big'),,,,,u'big')
GRAPH_DRAW = '\x1F',2,,,,,,,,,,
TST_ACCU_SWITCH = '\x13',2,,,,,,,,,,
"u""host needs to be of type str""",2,,,,,"u""host",,,,,"u""host"
u'brake needs to be a boolean',2,,,,,u'brake,,,,,u'brake
"u""ops must not be empty""",2,,,,,"u""ops",,,,,"u""ops"
"assert isinstance(protocol, unicode), \",2,,,,,,,,,,
"return self._physical_ev3._introspection[u""name""]",2,,,,,"u""name""]",,,,,"u""name""]"
"(u""f'"", .5),",2,,,,,"u""f'"",",,,,,"u""f'"","
version = u'0.9',2,,,,,u'0.9',,,,,u'0.9'
"print u""Allowance = {0} in\n"".format(unicode(round(allowance,4)))",2,,,,,"u""Allowance","print u""Allowance = {0} in\n"".format(unicode(round(allowance,4)))",unicode(,,,"u""Allowance print u""Allowance = {0} in\n"".format(unicode(round(allowance,4))) unicode("
opMove8_8 = '\x30',2,,,,,,,,,,
buf = bytearray((u' ' * n).encode(u'ascii')),2,,,,,u' ',,,,,u' '
"u""radius_wheel needs to be a number""",2,,,,,"u""radius_wheel",,,,,"u""radius_wheel"
"assert value in (1, -1), u""allowed polarity_left values are: -1 or 1""",2,,,,,"u""allowed",,,,,"u""allowed"
"message = dns.message.make_query(arguments.get(u""query""), arguments.get(u""rdtype""), **kwargs)",2,,,,,"u""query""),",,,,,"u""query""),"
"host = None,",2,,,,,,,,,,
u'unlimited' in self._current_movement,2,,,,,u'unlimited',,,,,u'unlimited'
print f'Dumping {args.size} bytes from {args.address}...',2,,,,,,print f'Dumping {args.size} bytes from {args.address}...',,,,print f'Dumping {args.size} bytes from {args.address}...'
SET_SEARCH = '\x03',2,,,,,,,,,,
ICON = '\x06',2,,,,,,,,,,
SET_BUSY = '\x16',2,,,,,,,,,,
"assert isinstance(ops, str), \",2,,,,,,,,,,
"if proxy.password: kwargs[u""password""] = proxy.password",2,,,,,"u""password""]",,,,,"u""password""]"
"return (u'Return',{u'value':p.expr})",2,,,,,"u'Return',{u'value':p.expr})",,,,,"u'Return',{u'value':p.expr})"
unicode.encode(path) + '\x00'  # NAME,2,,,,,,,,,,
"def name(self, value):",2,,,,,,,,,,
"def ramp_down(self, value):",2,,,,,,,,,,
timeout=self._DEFAULT_PARAMETERS[u'timeout']),2,,,,,u'timeout']),,,,,u'timeout'])
"0x82: u""SPS"",       0x83: u""PIPE"",        0x84: u""SCTP"",",2,,,,,"u""SPS"",",,,,,"u""SPS"","
SET_MINUTES = '\x07',2,,,,,,,,,,
"u'expr NE expr',",2,,,,,u'expr,,,,,u'expr
for i in xrange (len(self.iw_tmp)):,2,,,xrange (,,,,,,,xrange (
opObject_Trig = '\x06',2,,,,,,,,,,
def id(self):,2,,,,,,,,,,
tmp=u'The following scenes do not have the polarization you choose:\n\n',2,,,,,u'The,,,,,u'The
"def load(self, dfu, args):",2,,,,,,,,,,
RBRACE = ur'\}',2,,,,,,,,,,
"assert 0 <= val <= 1024, u""values must be in range [0 - 1024]""",2,,,,,"u""values",,,,,"u""values"
"length, rate = unpack(u'>2H', data[2:6])",2,,,,,"u'>2H',",,,,,"u'>2H',"
TYPE_SOUND = '\x02',2,,,,,,,,,,
WARNSIGN = '\x08',2,,,,,,,,,,
buf[:-1] = string.encode(u'utf8'),2,,,,,u'utf8'),,,,,u'utf8')
u'o',2,,,,,u'o',,,,,u'o'
u'no beacon channel has been set',2,,,,,u'no,,,,,u'no
SYSTEM_ILLEGAL_PATH = '\x06',2,,,,,,,,,,
"0x76: u""STP"",       0x77: u""SRP"",         0x78: u""UTI"",",2,,,,,"u""STP"",",,,,,"u""STP"","
"self.parser.epilog = u""Note: The Stats (-s/--stats) endpoint is rate-limited to 30 calls per hour.""",2,,,,,"u""Note:",,,,,"u""Note:"
u'brake': brake,2,,,,,u'brake':,,,,,u'brake':
os.makedirs(u'raw'),2,,,,,u'raw'),,,,,u'raw')
opOutput_Start = '\xA6',2,,,,,,,,,,
u'lang must be a str',2,,,,,u'lang,,,,,u'lang
path = u'../prjs/sound/txt',2,,,,,u'../prjs/sound/txt',,,,,u'../prjs/sound/txt'
"data = ''.join([data, self._read_memory_chunk(offset, part_size)])",2,,,,,,,,,,
"rc, handle = struct.unpack(u'sB', reply)",2,,,,,"u'sB',",,,,,"u'sB',"
"func,_ = self.variables[u'printf']",2,,,,,u'printf'],,,,,u'printf']
u'Error: {} failed after {} retries.'.format(,2,,,,,u'Error:,,,,,u'Error:
Expfloat = ur'[0-9](?:_?[0-9])*' + Exponent,2,,,,,,,,,,
"assert self._rgb_white_balance_raw is not None, u""no white_balance done""",2,,,,,"u""no",,,,,"u""no"
"assert channel in (None, 1, 2, 3, 4), u""incorrect channel""",2,,,,,"u""incorrect",,,,,"u""incorrect"
def maybe(*choices): return group(*choices) + u'?',2,,,,,u'?',,,,,u'?'
"u'size': u'Required size of memory to be ',",2,,,,,u'size':,,,,,u'size':
MOVE = '\x1F',2,,,,,,,,,,
"btn=tk.Button(self, text=u"" Next >"",command=lambda:Save())",2,,,,,"u"" Next",,,,,"u"" Next"
opAnd8 = '\x24',2,,,,,,,,,,
GET_FW_VERS = '\x0A',2,,,,,,,,,,
"group.add_argument(u""-P"", u""--protocol"", type = int, default = 0, help = u""Socket protocol."")",2,,,,,"u""-P"",",,,,,"u""-P"","
GET_VERSION = '\x1A',2,,,,,,,,,,
LED_RG = '\x02'  # Right green,2,,,,,,,,,,
SYSTEM_END_OF_FILE = '\x08',2,,,,,,,,,,
ops += ''.join((,2,,,,,,,,,,
opJr_GtF = '\x6B',2,,,,,,,,,,
"elif tone.startswith(u""g""):",2,,,,,"u""g""):",,,,,"u""g""):"
"u'speed': speed,",2,,,,,u'speed':,,,,,u'speed':
"tk.Button(self, text=u""Browse"", command=lambda *args:browse(3)),",2,,,,,"u""Browse"",",,,,,"u""Browse"","
if self._current_movement[u'op'] == u'Step_Speed':,2,,,,,u'op'],,,,,u'op']
"person.add_argument(u""--confidence"", type = unicode, default = u""high"", choices = [u""low"", u""med"", u""high"", u""max""], help = u""A confidence of max will return less data than usual, however, the data that is returned will have a higher likelihood of being correct. On the other hand, a confidence of low will return more data than usual, but makes the possibility of a mistake in that data more likely. med returns more data than high and less than low, with an error rate between the two."")",2,,,,,"u""--confidence"",",,,,,"u""--confidence"","
SIN = '\x0B'  # !<,2,,,,,,,,,,
"super(Touch, self).__del__()",2,,,,,,,,,,
"os.link(path_dem,u'dem.grd')",2,,,,,u'dem.grd'),,,,,u'dem.grd')
"u'<2i',",2,,,,,"u'<2i',",,,,,"u'<2i',"
[self._port][u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
"self.ecn = u""Non-ECT"" if self.raw_ecn is 0 else (u""ECT(0)"" if self.raw_ecn is 2 else (u""ECT(1)"" if self.raw_ecn is 1 else u""CE""))",2,,,,,"u""Non-ECT""",,,,,"u""Non-ECT"""
@_(u'params COMMA param'),2,,,,,u'params,,,,,u'params
def connect_wifi(self):,2,,,,,,,,,,
"0x21: u""DCCP"",      0x22: u""3PC"",         0x23: u""IDPR"",",2,,,,,"u""DCCP"",",,,,,"u""DCCP"","
"if hole_lmc == u""?"" and shaft_lmc != u""?"" and clearance !=u""?"":",2,,,,,"u""?""",,,,,"u""?"""
SET_INSTR = '\x19',2,,,,,,,,,,
SICON_WIFI_1 = '\x0E',2,,,,,,,,,,
GET_BACK_BLOCK = '\x0B',2,,,,,,,,,,
"u'double':ir.DoubleType(),",2,,,,,"u'double':ir.DoubleType(),",,,,,"u'double':ir.DoubleType(),"
def sensors_as_dict(self):,2,,,,,,,,,,
opAnd16 = '\x25',2,,,,,,,,,,
RESTORE = '\x1A',2,,,,,,,,,,
else: direction =  1,2,,,,,,,,,,
"(u""raw_identification"", c_ushort),",2,,,,,"u""raw_identification"",",,,,,"u""raw_identification"","
"assert isinstance(value, int), u""polarity_right needs to be of type int""",2,,,,,"u""polarity_right",,,,,"u""polarity_right"
elif branch[0] == u'If':,2,,,,,u'If':,,,,,u'If':
"volume = self._physical_ev3._introspection[u""volume""]",2,,,,,"u""volume""]",,,,,"u""volume""]"
SYSTEM_SIZE_ERROR = '\x09',2,,,,,,,,,,
else: back =  False,2,,,,,,,,,,
"u""tread needs to be positive""",2,,,,,"u""tread",,,,,"u""tread"
opInput_Sample = '\x97',2,,,,,,,,,,
opOutput_Stop = '\xA3',2,,,,,,,,,,
u':'.join(u'{:02X}'.format(byte) for byte in msg_cnt) +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
brake = _3to2kwargs['brake']; del _3to2kwargs['brake'],2,,,,,,,,,,
labelColStyle = u''',2,,,,,u''',,,,,u'''
last_pos_outer = cur_mov[u'last_motor_pos'][0],2,,,,,u'last_motor_pos'][0],,,,,u'last_motor_pos'][0]
ICON_RIGHT = '\x02',2,,,,,,,,,,
LN = '\x0A'  # !< Ln r = log(x),2,,,,,,,,,,
g.write(u'#!/bin/csh -f\n'+u'cd raw\n\n'),2,,,,,u'#!/bin/csh,,,,,u'#!/bin/csh
"if tone.startswith(u""c""):",2,,,,,"u""c""):",,,,,"u""c""):"
self.groupBox1 = QGroupBox(u''),2,,,,,u''),,,,,u'')
"self._physical_ev3._introspection[u""hw_vers""]",2,,,,,"u""hw_vers""]",,,,,"u""hw_vers""]"
else: global_mem =  0,2,,,,,,,,,,
"kwargs = {u""family"": socket.AF_INET6 if self.arguments.ipv6 else socket.AF_INET,",2,,,,,"u""family"":",,,,,"u""family"":"
CREATEF = '\x04',2,,,,,,,,,,
"certificate.get(u""subject_dn""))",2,,,,,"u""subject_dn""))",,,,,"u""subject_dn""))"
print f'MCU will be running from {args.address}.',2,,,,,,print f'MCU will be running from {args.address}.',,,,print f'MCU will be running from {args.address}.'
u'tone is too low: ' + tone + u' (' + unicode(freq) + u' Hz)',2,,,,,u'tone,,unicode(,,,u'tone unicode(
if 'volume' in _3to2kwargs: volume = _3to2kwargs['volume']; del _3to2kwargs['volume'],2,,,,,,,,,,
BTTYPE_PC = '\x03'  # Bluetooth type PC,2,,,,,,,,,,
raise ValueError(u'undefined value: ' + unicode(values[n])),2,,,,,u'undefined,,unicode(,,,u'undefined unicode(
"scale2.config(state=u""disabled"")",2,,,,,"u""disabled"")",,,,,"u""disabled"")"
"super(sniffer, self).__init__(*args, **kwargs)",2,,,,,,,,,,
"assert value > 0, u""temperament needs to be positive""",2,,,,,"u""temperament",,,,,"u""temperament"
DATA_S = '\x04'  # Zero terminated string,2,,,,,,,,,,
help=u'Serial port file (for example: /dev/ttyUSB0).'),2,,,,,u'Serial,,,,,u'Serial
GET_SDCARD = '\x1E',2,,,,,,,,,,
self.atemVal2.setText((data[1]) +  u' °' ),2,,,,,u' °',,,,,u' °'
"assert value == 0, u'position can be set to zero only'",2,,,,,u'position,,,,,u'position
"u""polarity_left needs to be -1 or 1""",2,,,,,"u""polarity_left",,,,,"u""polarity_left"
"return bs4.BeautifulSoup(response.content, u""lxml"")",2,,,,,"u""lxml"")",,,,,"u""lxml"")"
else: local_mem =  0,2,,,,,,,,,,
"u'op': u'Step_Speed',",2,,,,,u'op':,,,,,u'op':
"ur'\d\d:\d\d:\d\d\.\d{6}',",2,,,,,,,,,,
"u""repeat must be a bool""",2,,,,,"u""repeat",,,,,"u""repeat"
WARN_POWER = '\x0A',2,,,,,,,,,,
if 'sync_mode' in _3to2kwargs: sync_mode = _3to2kwargs['sync_mode']; del _3to2kwargs['sync_mode'],2,,,,,,,,,,
"assert sync_mode is None or isinstance(sync_mode, unicode), \",2,,,,,,,,,,
"@_retry(_RETRIES, u'get dfu version', _serial_flush)",2,,,,,u'get,,,,,u'get
"super(TwoWheelVehicle, self).__exit__(exc_type, exc_value, exc_traceback)",2,,,,,,,,,,
opCp_Lt8 = '\x44'  # COMPARE,2,,,,,,,,,,
DATA_V = '\x07'  # Variable type,2,,,,,,,,,,
else: ramp_down_time =  0.15,2,,,,,,,,,,
opRandom = '\x8E',2,,,,,,,,,,
"folder = path.rsplit(u""/"", 1)[1]",2,,,,,"u""/"",",,,,,"u""/"","
"0x5F: u""MICP"",      0x60: u""SCC-SP"",      0x61: u""ETHERIP"",",2,,,,,"u""MICP"",",,,,,"u""MICP"","
"self._introspection[u""sensors""] = {}",2,,,,,"u""sensors""]",,,,,"u""sensors""]"
CAL_MIN = '\x07',2,,,,,,,,,,
self._send_command(self._COMMAND[u'get version']),2,,,,,u'get,,,,,u'get
[port_motor_input(self._port_left)][u'used_by'] = self,2,,,,,u'used_by'],,,,,u'used_by']
GET_BUMBED = '\x0E',2,,,,,,,,,,
speed = self._current_movement[u'speed'],2,,,,,u'speed'],,,,,u'speed']
"u'Directory for Sentinel-1 data ',",2,,,,,u'Directory,,,,,u'Directory
"fields = [u""parsed.subject_dn"", u""parsed.names"", u""parsed.fingerprint_sha256"", u""parsed.subject.common_name""]",2,,,,,"u""parsed.subject_dn"",",,,,,"u""parsed.subject_dn"","
print u'Validating firmware...',2,,,,,u'Validating,print u'Validating firmware...',,,,u'Validating print u'Validating firmware...'
u'volume needs to be of type int',2,,,,,u'volume,,,,,u'volume
self.ser.write('x'),2,,,,,,,,,,
self.portLabel = QLabel(u'Port: '),2,,,,,u'Port:,,,,,u'Port:
"(u""a'"", 1),",2,,,,,"u""a'"",",,,,,"u""a'"","
"label=tk.Label(self, text=u'File name for step 2.')",2,,,,,u'File,,,,,u'File
step1 = cur_mov[u'step1_right'],2,,,,,u'step1_right'],,,,,u'step1_right']
elif op == u'-':,2,,,,,u'-':,,,,,u'-':
opError = '\x00'  # VM,2,,,,,,,,,,
"literals = set([u',',u';'])",2,,,,,"u',',u';'])",,,,,"u',',u';'])"
cmd = ''.join((,2,,,,,,,,,,
u'xx:xx:xx.xxxxxx Sent 0x|06:00|2D:00|80|00:00|01|' + u'\n',2,,,,,u'xx:xx:xx.xxxxxx,,,,,u'xx:xx:xx.xxxxxx
assert captured.err == u'',2,,,,,u'',,,,,u''
opOutput_Read = '\xA8',2,,,,,,,,,,
"name.add_argument(u""--location"", type = unicode, help = u""If supplied, only companies matching given location will be returned. The location is a general location where one can include any combination of locality, region or country as input. For example, --location=Denver, CO."")",2,,,,,"u""--location"",",,,,,"u""--location"","
"u'<2i2B',",2,,,,,"u'<2i2B',",,,,,"u'<2i2B',"
else: lang =  u'en',2,,,,,u'en',,,,,u'en'
@_(u'NAME EQ expr'),2,,,,,u'NAME,,,,,u'NAME
ops = ''.join((,2,,,,,,,,,,
"(u""raw_total_length"", c_ushort),",2,,,,,"u""raw_total_length"",",,,,,"u""raw_total_length"","
"person = self.parser.add_argument_group(u""Person API"")",2,,,,,"u""Person",,,,,"u""Person"
"raise ValueError(u""Invalid port: %s"" % port)",2,,,,,"u""Invalid",,,,,"u""Invalid"
"ur'Protocol: (\w+)',",2,,,,,,,,,,
opMove32_32 = '\x3A',2,,,,,,,,,,
opOutput_Reset = '\xA2',2,,,,,,,,,,
"u'os_version',",2,,,,,"u'os_version',",,,,,"u'os_version',"
port_str = u'PORT_C',2,,,,,u'PORT_C',,,,,u'PORT_C'
filename1=u'sensor_output.csv',2,,,,,u'sensor_output.csv',,,,,u'sensor_output.csv'
"u""Module"": u""@blackviruscript""}",2,,,,,"u""Module"":",,,,,"u""Module"":"
LEFT_BUTTON = '\x05',2,,,,,,,,,,
"name = self.parser.add_argument_group(u""Name Lookup"")",2,,,,,"u""Name",,,,,"u""Name"
"u""speed must be an int""",2,,,,,"u""speed",,,,,"u""speed"
SICON_WIFI_3 = '\x0C',2,,,,,,,,,,
g.write(u'preproc_batch_tops.csh data.in dem.grd 2\n'),2,,,,,u'preproc_batch_tops.csh,,,,,u'preproc_batch_tops.csh
MAKE_FOLDER = '\x0A',2,,,,,,,,,,
NUMBER_TO_STRING = '\x09',2,,,,,,,,,,
kwargs={u'check': True},2,,,,,u'check':,,,,,u'check':
"CE = __builtins__.long(""11"", 2)     # Congestion Encountered, CE",2,,,,,,,,,,
"freq, **_3to2kwargs",2,,,,,,,,,,
"raise serial.SerialException(u""Can't open serial port."")",2,,,,,"u""Can't",,,,,"u""Can't"
"dist = struct.unpack(u'<i', reply)[0]",2,,,,,"u'<i',",,,,,"u'<i',"
"actions.add_argument(u""-e"", u""--email"", type = unicode, metavar = u""address"", help = u""Request information about a specific person by email."")",2,,,,,"u""-e"",",,,,,"u""-e"","
GUI_SLOT = '\x00',2,,,,,,,,,,
"elif port != u""default"" and not stem.util.connection.is_valid_port(port):",2,,,,,"u""default""",,,,,"u""default"""
else: host =  None,2,,,,,,,,,,
Test = branch[1][u'test'],2,,,,,u'test'],,,,,u'test']
"u""end of file "" +",2,,,,,"u""end",,,,,"u""end"
DEL_RETURN = '\x03'  # Use return as delimiter,2,,,,,,,,,,
"msg_cnt,",2,,,,,,,,,,
GET_CACHE_FILE = '\x16',2,,,,,,,,,,
ICON_CONNECTIONS = '\x0B',2,,,,,,,,,,
"print u""Both hole values must either a number or ?""",2,,,,,"u""Both","print u""Both hole values must either a number or ?""",,,,"u""Both print u""Both hole values must either a number or ?"""
DEL_NONE = '\x00'  # No delimiter at all,2,,,,,,,,,,
"VehiclePosition = namedtuple(u'VehiclePosition', [",2,,,,,"u'VehiclePosition',",,,,,"u'VehiclePosition',"
BROWSE_FILES = '\x03'  # files,2,,,,,,,,,,
u'No WiFi connection to ' +,2,,,,,u'No,,,,,u'No
"assert isinstance(val, Number), u""white_balance must be 3 numbers""",2,,,,,"u""white_balance",,,,,"u""white_balance"
opFilename = '\xC6',2,,,,,,,,,,
[self._port][u'used_by'] is not None:,2,,,,,u'used_by'],,,,,u'used_by']
"kwargs={u'repeat': True, u'volume': volume},",2,,,,,u'repeat':,,,,,u'repeat':
"label.grid(row=0, column=0, columnspan=3, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
for current_retry in xrange(retry_num):,2,,,xrange(,,,,,,,xrange(
"self.parser.add_argument(u""-s"", u""--source"", type=unicode, default=socket.gethostbyname(socket.gethostname()), help=u""Source address."")",2,,,,,"u""-s"",",,,,,"u""-s"","
DEL_COLON = '\x04'  # Use colon as delimiter,2,,,,,,,,,,
self.setWindowTitle(u'Biology Experiment'),2,,,,,u'Biology,,,,,u'Biology
"msg_cnt, **_3to2kwargs",2,,,,,,,,,,
"u""delta_time needs to be a number""",2,,,,,"u""delta_time",,,,,"u""delta_time"
opAdd8 = '\x10'  # MATH,2,,,,,,,,,,
"person.add_argument(u""--macromeasures"", action = u""store_true"", help = u""Power the Person API's ability for providing affinity data about individuals."")",2,,,,,"u""--macromeasures"",",,,,,"u""--macromeasures"","
"u'TwoWheelVehicle',",2,,,,,"u'TwoWheelVehicle',",,,,,"u'TwoWheelVehicle',"
"u'step3_left': step3_left,",2,,,,,u'step3_left':,,,,,u'step3_left':
"packet = u"" "".join(rtp_packet)",2,,,,,"u"" "".join(rtp_packet)",,,,,"u"" "".join(rtp_packet)"
TEXTBOX_APPEND = '\x15',2,,,,,,,,,,
STOP_ALL = '\x0D',2,,,,,,,,,,
BROWSE_FOLDERS = '\x00'  # folders,2,,,,,,,,,,
opKeep_Alive = '\x90'  # UI,2,,,,,,,,,,
opProbe = '\x0E',2,,,,,,,,,,
u'for specified size and memory map.'),2,,,,,u'for,,,,,u'for
CEIL = '\x04'  # !< Ceiling r = ceil(x),2,,,,,,,,,,
"self.controller.show_frame(u""Step1"")",2,,,,,"u""Step1"")",,,,,"u""Step1"")"
"u""local_mem needs to be positive""",2,,,,,"u""local_mem",,,,,"u""local_mem"
DIVIDE = ur'/',2,,,,,,,,,,
''.join((,2,,,,,,,,,,
else: pause = 0,2,,,,,,,,,,
NAME[u'break'] = BREAK,2,,,,,u'break'],,,,,u'break']
opDivF = '\x1F',2,,,,,,,,,,
"parameters = ''.join([mass_erase, self._checksum(mass_erase)])",2,,,,,,,,,,
"self._current_movement[u'target_motor_pos'],",2,,,,,"u'target_motor_pos'],",,,,,"u'target_motor_pos'],"
ICON_OBP = '\x1F',2,,,,,,,,,,
"protocols = {0x00: u""HOPOPT"",    0x01: u""ICMP"",        0x02: u""IGMP"",",2,,,,,"u""HOPOPT"",",,,,,"u""HOPOPT"","
"self.parser.add_argument(u""--tcp"", action=u""store_true"", help=u""Use TCP to make the query."")",2,,,,,"u""--tcp"",",,,,,"u""--tcp"","
opSelectF = '\x5F',2,,,,,,,,,,
"value.split('\x00')[0].decode(u""utf8"")",2,,,,,"u""utf8"")",,,,,"u""utf8"")"
"else: prefix =  u""""",2,,,,,"u""""",,,,,"u"""""
"def rgb_white_balance(self, raw):",2,,,,,,,,,,
KEY = '\x0F',2,,,,,,,,,,
LOG = '\x09'  # !< Log r = log10(x),2,,,,,,,,,,
opTimer_Ready = '\x86',2,,,,,,,,,,
"ECT = (__builtins__.long(""10"", 2),  # ECN Capable Transport, ECT(0)",2,,,,,,,,,,
SICON_BATT_3 = '\x02',2,,,,,,,,,,
ICON_DOWN = '\x13',2,,,,,,,,,,
help=_ARGS_HELP[u'run']),2,,,,,u'run']),,,,,u'run'])
TEXT = '\x05',2,,,,,,,,,,
u'degrees must be an int value',2,,,,,u'degrees,,,,,u'degrees
u'-'  # write to stdout,2,,,,,u'-',,,,,u'-'
u'speed must be an int value',2,,,,,u'speed,,,,,u'speed
SYSTEM_NO_HANDLES_AVAILABLE = '\x04',2,,,,,,,,,,
opArray_Write = '\xC2',2,,,,,,,,,,
opObject_Call = '\x09',2,,,,,,,,,,
"os.link(path_s1a_cal,u's1a-aux-cal.xml')",2,,,,,u's1a-aux-cal.xml'),,,,,u's1a-aux-cal.xml')
u'path_source needs to be of type str',2,,,,,u'path_source,,,,,u'path_source
opOutput_Set_Type = '\xA1',2,,,,,,,,,,
"def stop(self, **_3to2kwargs):",2,,,,,,,,,,
POPUP = '\x1D',2,,,,,,,,,,
"(u'left', TIMES, DIVIDE),",2,,,,,"u'left',",,,,,"u'left',"
entry = engine.get_function_address(u'main'),2,,,,,u'main'),,,,,u'main')
"u'<f',",2,,,,,"u'<f',",,,,,"u'<f',"
tmp = dev[u'serial_number'].upper(),2,,,,,u'serial_number'].upper(),,,,,u'serial_number'].upper()
tmp_index=tmp.find(u'T'),2,,,,,u'T'),,,,,u'T')
os.chdir(u'topo'),2,,,,,u'topo'),,,,,u'topo')
tmp1=Dir_EOF+u'/'+S1AB+u'*'+info1+u'*'+info2+u'*',2,,,,,u'/'+S1AB+u'*'+info1+u'*'+info2+u'*',,,,,u'/'+S1AB+u'*'+info1+u'*'+info2+u'*'
"except Exception, e:",2,,,,,,,,,,
elif line.endswith('\x2F'):,2,,,,,,,,,,
from itertools import ifilter,2,,,,,,,,,,
tmp=tmp+u'\n\nThey are removed from the selection.',2,,,,,u'\n\nThey,,,,,u'\n\nThey
u' Sent 0x|' +,2,,,,,u' Sent,,,,,u' Sent
"u""speed needs to be in range [-100 - 100]""",2,,,,,"u""speed",,,,,"u""speed"
_DIRECT_COMMAND_REPLY = '\x00',2,,,,,,,,,,
"assert u'tones' in song, \",2,,,,,u'tones',,,,,u'tones'
opPort_Cnv_Input = '\x62',2,,,,,,,,,,
port_settings[u'timeout'] = self._DEFAULT_PARAMETERS[u'timeout'],2,,,,,u'timeout'],,,,,u'timeout']
"with open(sys.argv[1],u'r') as file:",2,,,,,u'r'),,,,,u'r')
"u'extended erase': 0x44,",2,,,,,u'extended,,,,,u'extended
"path, **_3to2kwargs",2,,,,,,,,,,
opInput_Device_List = '\x98',2,,,,,,,,,,
GET_CHANGES = '\x19',2,,,,,,,,,,
ENTER_BUTTON = '\x02',2,,,,,,,,,,
"u""error "" +",2,,,,,"u""error",,,,,"u""error"
LED_RR = '\x01'  # Right red,2,,,,,,,,,,
READ_TEXT = '\x05',2,,,,,,,,,,
"fileName, _ = QFileDialog.getSaveFileName(self,u""QFileDialog.getSaveFileName()"",u"""",u""CSV Files (*.csv)"", options=options)",2,,,,,"u""QFileDialog.getSaveFileName()"",u"""",u""CSV",,,,,"u""QFileDialog.getSaveFileName()"",u"""",u""CSV"
"System = namedtuple(u'System', [",2,,,,,"u'System',",,,,,"u'System',"
"label=u'min. day interval',",2,,,,,u'min.,,,,,u'min.
WAITING = '\x20'  # Object is waiting for final trigger,2,,,,,,,,,,
"u""speed needs to be lower or equal 100""",2,,,,,"u""speed",,,,,"u""speed"
"(u""a'"", 2),",2,,,,,"u""a'"",",,,,,"u""a'"","
if not reply.startswith(u'Accept:EV340'):,2,,,,,u'Accept:EV340'):,,,,,u'Accept:EV340'):
"source_suffix = [u'.rst', u'.md']",2,,,,,"u'.rst',",,,,,"u'.rst',"
"assert isinstance(cmd, str), \",2,,,,,,,,,,
"ktype, kcontent = data.split(u"":"", 1)",2,,,,,"u"":"",",,,,,"u"":"","
"u""callback must be a callable""",2,,,,,"u""callback",,,,,"u""callback"
"def ramp_down_time(self, value):",2,,,,,,,,,,
elif op == u'>':,2,,,,,u'>':,,,,,u'>':
STRING_TO_VALUE = '\x07',2,,,,,,,,,,
def sleep(self):,2,,,,,,,,,,
@_(u'NUMBER'),2,,,,,u'NUMBER'),,,,,u'NUMBER')
opSound = '\x94'  # SOUND,2,,,,,,,,,,
"u'os_build',",2,,,,,"u'os_build',",,,,,"u'os_build',"
u'{:02X}'.format(rc) +,2,,,,,u'{:02X}'.format(rc),,,,,u'{:02X}'.format(rc)
"if tone == u""p"":",2,,,,,"u""p"":",,,,,"u""p"":"
"(u""time_to_live"", c_ubyte),",2,,,,,"u""time_to_live"",",,,,,"u""time_to_live"","
"self._introspection[u""mem_free""],",2,,,,,"u""mem_free""],",,,,,"u""mem_free""],"
u'blue_down',2,,,,,u'blue_down',,,,,u'blue_down'
"0x85: u""FC"",        0x8A: u""manet"",       0x87: u""Mobility Header"",",2,,,,,"u""FC"",",,,,,"u""FC"","
"Lb=tk.Listbox(self, width=14, selectmode=u'multiple')",2,,,,,u'multiple'),,,,,u'multiple')
self._current_movement[u'duration_rest'] = (,2,,,,,u'duration_rest'],,,,,u'duration_rest']
"def port_left(self, value):",2,,,,,,,,,,
elif branch[0] == u'Until':,2,,,,,u'Until':,,,,,u'Until':
"client.send(inpt + ("""" if inpt.endswith(EOL) else EOL))",2,,,,,,,,,,
opBp_Set = '\x8C',2,,,,,,,,,,
"self.titlePage2 = QLabel(u"" Calorimenter"")",2,,,,,"u"" Calorimenter"")",,,,,"u"" Calorimenter"")"
"0x48: u""CPNX"",      0x49: u""CPHB"",        0x4A: u""WSN"",",2,,,,,"u""CPNX"",",,,,,"u""CPNX"","
"u'nack': 0x1f.to_bytes(length=1, byteorder=u'little')",2,,,,,u'nack':,,,,,u'nack':
"value = self.builder.icmp_signed(u'>',lhs,rhs)",2,,,,,"u'>',lhs,rhs)",,,,,"u'>',lhs,rhs)"
def close(self):,2,,,,,,,,,,
"self.protocol = self.protocols[self.raw_protocol] if self.raw_protocol in self.protocols else u""Unknown""",2,,,,,"u""Unknown""",,,,,"u""Unknown"""
u' already exists',2,,,,,u' already,,,,,u' already
"text=u'Other information',",2,,,,,u'Other,,,,,u'Other
target_pos_inner = cur_mov[u'target_motor_pos'][0],2,,,,,u'target_motor_pos'][0],,,,,u'target_motor_pos'][0]
ICON_SOUND = '\x05',2,,,,,,,,,,
u'position must be an int value',2,,,,,u'position,,,,,u'position
"assert port in (PORT_A, PORT_B, PORT_C, PORT_D), u""incorrect port""",2,,,,,"u""incorrect",,,,,"u""incorrect"
opJr_Gteq16 = '\x79',2,,,,,,,,,,
"self.parser.add_argument(u""-k"", u""--api-key"", type = unicode, help = u""The API key assigned to you by FullContact. It is used to identify and authorize your request. Your API key should be kept private, and should never be displayed publicly."", required = True)",2,,,,,"u""-k"",",,,,,"u""-k"","
"u'name',",2,,,,,"u'name',",,,,,"u'name',"
READY_RAW = '\x1C',2,,,,,,,,,,
"with open(path + u'.rsf', u'rb') as file:",2,,,,,"u'.rsf',",,,,,"u'.rsf',"
if 'port_right' in _3to2kwargs: port_right = _3to2kwargs['port_right']; del _3to2kwargs['port_right'],2,,,,,,,,,,
"u'<2i',",2,,,,,"u'<2i',",,,,,"u'<2i',"
def decorator(func):,2,,,,,,,,,,
"address = address if address else int(memory_map[0][u'address'], 0)",2,,,,,"u'address'],",,,,,"u'address'],"
RESIZE = '\x05',2,,,,,,,,,,
"until_loop_otherwise = self.builder.append_basic_block(u""until_loop_otherwise""+unicode(self.i))",2,,,,,"u""until_loop_otherwise""+unicode(self.i))",,unicode(,,,"u""until_loop_otherwise""+unicode(self.i)) unicode("
"assert isinstance(value, int), u'value must be an integer'",2,,,,,u'value,,,,,u'value
"@_(u'expr PLUS expr',",2,,,,,u'expr,,,,,u'expr
SET_PASSKEY = '\x06',2,,,,,,,,,,
WARNING_TEMP = '\x01',2,,,,,,,,,,
opInput_Ready = '\x9C',2,,,,,,,,,,
tmp=info[0]+u':'+EOF_list[i],2,,,,,u':'+EOF_list[i],,,,,u':'+EOF_list[i]
"RGBColor = namedtuple(u'RGBColor', [",2,,,,,"u'RGBColor',",,,,,"u'RGBColor',"
TST_BOOT_MODE2 = '\x14',2,,,,,,,,,,
"actions.add_argument(u""-t"", u""--twitter"", type = unicode, metavar = u""username"", help = u""Request information about a specific person by twitter."")",2,,,,,"u""-t"",",,,,,"u""-t"","
"elif ct.split(u""/"")[0] == u""text"" and ct.endswith(u""html""):",2,,,,,"u""/"")[0]",,,,,"u""/"")[0]"
opRl16 = '\x2D',2,,,,,,,,,,
GET_LBATT = '\x12',2,,,,,,,,,,
opDiv8 = '\x1C',2,,,,,,,,,,
"assert isinstance(value, Number), u""delta_time must be a number""",2,,,,,"u""delta_time",,,,,"u""delta_time"
ICON_ADD_HIDDEN = '\x0C',2,,,,,,,,,,
"self._introspection[u""network_mac_adr""],",2,,,,,"u""network_mac_adr""],",,,,,"u""network_mac_adr""],"
"rtp_list.append(rtp.payload.split(u"":""))",2,,,,,"u"":""))",,,,,"u"":""))"
"u""value of sync_mode: "" + value + u"" is invalid""",2,,,,,"u""value",,,,,"u""value"
port_str = u'PORT_B',2,,,,,u'PORT_B',,,,,u'PORT_B'
"self._introspection[u""fw_build""] = fw_build.split('\x00')[0].decode(u""utf8"")",2,,,,,"u""fw_build""]",,,,,"u""fw_build""]"
"verbosity = None,",2,,,,,,,,,,
self._current_movement[u'last_position'] = current_position,2,,,,,u'last_position'],,,,,u'last_position']
params = branch[1][u'def_params'],2,,,,,u'def_params'],,,,,u'def_params']
"Pointfloat = group(ur'[0-9](?:_?[0-9])*\.(?:[0-9](?:_?[0-9])*)?',",2,,,,,,,,,,
"command=lambda: self.controller.show_frame(u""Step1""))",2,,,,,"u""Step1""))",,,,,"u""Step1""))"
EXIST = '\x10',2,,,,,,,,,,
print u'BASIC FIT CALCULATOR WITH MMC/LMC AND CLEARANCE/ALLOWANCE',2,,,,,u'BASIC,print u'BASIC FIT CALCULATOR WITH MMC/LMC AND CLEARANCE/ALLOWANCE',,,,u'BASIC print u'BASIC FIT CALCULATOR WITH MMC/LMC AND CLEARANCE/ALLOWANCE'
u'''Show a frame for the given page name''',2,,,,,u'''Show,,,,,u'''Show
"u""turn needs to be an integer""",2,,,,,"u""turn",,,,,"u""turn"
SET_VOLUME = '\x05',2,,,,,,,,,,
"scale1.config(state=u""disabled"")",2,,,,,"u""disabled"")",,,,,"u""disabled"")"
VALUEF = '\x0C',2,,,,,,,,,,
"''.join([command.to_bytes(1, u'big'), self._checksum(command)]))",2,,,,,"u'big'),",,,,,"u'big'),"
print u'error File',2,,,,,u'error,print u'error File',,,,u'error print u'error File'
"self.dscp = phbs[self.raw_dscp] if self.raw_dscp in phbs else u""Unknown PHB""",2,,,,,"u""Unknown",,,,,"u""Unknown"
print u'\nNOTE: Hole LMC will be the LARGER value',2,,,,,u'\nNOTE:,print u'\nNOTE: Hole LMC will be the LARGER value',,,,u'\nNOTE: print u'\nNOTE: Hole LMC will be the LARGER value'
"with open(path_source, u'rb') as f:",2,,,,,u'rb'),,,,,u'rb')
"else: color =  u""white""",2,,,,,"u""white""",,,,,"u""white"""
ROUND = '\x05'  # !< Round r = round(x),2,,,,,,,,,,
"0x2D: u""IDRP"",      0x2E: u""RSVP"",        0x2F: u""GREs"",",2,,,,,"u""IDRP"",",,,,,"u""IDRP"","
opObject_Stop = '\x04',2,,,,,,,,,,
"self._introspection[u""sensors""][ports[i]] = {",2,,,,,"u""sensors""][ports[i]]",,,,,"u""sensors""][ports[i]]"
"sys.path.insert(0, os.path.abspath(u'../..'))",2,,,,,u'../..')),,,,,u'../..'))
"t[os.path.splitext(os.path.basename(fullname))[0]] = (command.__doc__ or u""No description available."").split(u""\n"", 1)[0]",2,,,,,"u""No",,,,,"u""No"
"u'heading',",2,,,,,"u'heading',",,,,,"u'heading',"
"u'step3_right': step3_right,",2,,,,,u'step3_right':,,,,,u'step3_right':
"u'expr DIVIDE expr',",2,,,,,u'expr,,,,,u'expr
"except Exception, ex:",2,,,,,,,,,,
@_(u'statement'),2,,,,,u'statement'),,,,,u'statement')
opUI_Read = '\x81',2,,,,,,,,,,
"u'expr GE expr',",2,,,,,u'expr,,,,,u'expr
u'distance',2,,,,,u'distance',,,,,u'distance'
path = u'../prjs/sound/tmp',2,,,,,u'../prjs/sound/tmp',,,,,u'../prjs/sound/tmp'
"btn2=tk.Button(self, text=u"" Next >"",",2,,,,,"u"" Next",,,,,"u"" Next"
"raise ValueError(u""Invalid IP address: %s"" % address)",2,,,,,"u""Invalid",,,,,"u""Invalid"
"super(Motor, self).__init__(protocol=protocol, host=host, ev3_obj=ev3_obj)",2,,,,,,,,,,
"flags_set = dict(ifilter(lambda x: x[1] != 0, self.flags.items()))",2,,,,,,,,,,
WARNING_BUSY = '\x80',2,,,,,,,,,,
CREATE16 = '\x02',2,,,,,,,,,,
RECT = '\x0A',2,,,,,,,,,,
else: lang = None,2,,,,,,,,,,
READY_SI = '\x1D',2,,,,,,,,,,
"u""port_left needs to be one of (PORT_A, PORT_B, PORT_C, PORT_D)""",2,,,,,"u""port_left",,,,,"u""port_left"
"self.parser.add_argument(u""-eF"", u""--edns-flags"", type=int, help=u""The EDNS flags."")",2,,,,,"u""-eF"",",,,,,"u""-eF"","
"fnty = ir.FunctionType(self.type_map[u'int'], [ir.IntType(8).as_pointer()], var_arg=True)",2,,,,,"u'int'],",,,,,"u'int'],"
VALUE = '\x08',2,,,,,,,,,,
"for name in ifilter(lambda name: name.endswith(u"".py""), filenames):",2,,,,,"u"".py""),",,,,,"u"".py""),"
"btn_create.grid(row=8, column=7, sticky=u'e')",2,,,,,u'e'),,,,,u'e')
DEBUG_SLOT = '\x04',2,,,,,,,,,,
opXor16 = '\x29',2,,,,,,,,,,
WRITE_CONTENT = '\x0E',2,,,,,,,,,,
def rgb(self):,2,,,,,,,,,,
"return (u'If',{u'body':body,u'test':test,u'orelse':orelse})",2,,,,,"u'If',{u'body':body,u'test':test,u'orelse':orelse})",,,,,"u'If',{u'body':body,u'test':test,u'orelse':orelse})"
u'protocol needs to be of type str',2,,,,,u'protocol,,,,,u'protocol
"parameters = ''.join([(end - start).to_bytes(2, u'big'), *sectors])",2,,,,,"u'big'),",,,,,"u'big'),"
opMul32 = '\x1A',2,,,,,,,,,,
"u'step2_left': step2_left,",2,,,,,u'step2_left':,,,,,u'step2_left':
opCom_Readdata = '\xD1',2,,,,,,,,,,
"u'fw_version',",2,,,,,"u'fw_version',",,,,,"u'fw_version',"
def angle(self):,2,,,,,,,,,,
if 'channel' in _3to2kwargs: channel = _3to2kwargs['channel']; del _3to2kwargs['channel'],2,,,,,,,,,,
u':'.join(u'{:02X}'.format(byte) for byte in reply[5:6]) +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
"print u""Both shaft values must either a number or ?""",2,,,,,"u""Both","print u""Both shaft values must either a number or ?""",,,,"u""Both print u""Both shaft values must either a number or ?"""
def state(self):,2,,,,,,,,,,
TYPE_USBSTICK = '\x20',2,,,,,,,,,,
"def _serial_read(self, amount = 0):",2,,,,,,,,,,
if 'check' in _3to2kwargs: check = _3to2kwargs['check']; del _3to2kwargs['check'],2,,,,,,,,,,
"until_loop_entry = self.builder.append_basic_block(u""until_loop_entry""+unicode(self.inc()))",2,,,,,"u""until_loop_entry""+unicode(self.inc()))",,unicode(,,,"u""until_loop_entry""+unicode(self.inc())) unicode("
"units = kwargs.get(u'units', None)",2,,,,,"u'units',",,,,,"u'units',"
"load_command.add_argument(u'-m', u'--memory-map', default=None,",2,,,,,"u'-m',",,,,,"u'-m',"
else: duration =  None,2,,,,,,,,,,
"u'|',; sys.stdout.write(u'')",2,,,,,"u'|',;",,,,,"u'|',;"
"u'parity': u'E',",2,,,,,u'parity':,,,,,u'parity':
if 'local' in _3to2kwargs: local = _3to2kwargs['local']; del _3to2kwargs['local'],2,,,,,,,,,,
"if unicode(e) != u""issubclass() arg 1 must be a class"":",2,,,,,"u""issubclass()",,unicode(,,,"u""issubclass() unicode("
if 'ramp_down' in _3to2kwargs: ramp_down = _3to2kwargs['ramp_down']; del _3to2kwargs['ramp_down'],2,,,,,,,,,,
WARNING_DSPSTAT = '\x10',2,,,,,,,,,,
ICON_RUN = '\x00',2,,,,,,,,,,
"u""value is not an allowed port""",2,,,,,"u""value",,,,,"u""value"
TST_WRITE_PINS = '\x0D',2,,,,,,,,,,
autoclass_content = u'both',2,,,,,u'both',,,,,u'both'
"u""reply needs to be of type bool""",2,,,,,"u""reply",,,,,"u""reply"
"(u""c''"", 2),",2,,,,,"u""c''"",",,,,,"u""c''"","
"(u""raw_protocol"", c_ubyte),",2,,,,,"u""raw_protocol"",",,,,,"u""raw_protocol"","
"Remote = namedtuple(u'Remote', [",2,,,,,"u'Remote',",,,,,"u'Remote',"
elif op == u'*':,2,,,,,u'*':,,,,,u'*':
cmd = ''.join((,2,,,,,,,,,,
"u"" when reading file "" +",2,,,,,"u"" when",,,,,"u"" when"
"btn_create.config(state=u""disabled"")",2,,,,,"u""disabled"")",,,,,"u""disabled"")"
"self.polar_tmp=[u'vv',u'vh',u'hv',u'hh']",2,,,,,"u'vv',u'vh',u'hv',u'hh']",,,,,"u'vv',u'vh',u'hv',u'hh']"
u'polarity_right must be an integer',2,,,,,u'polarity_right,,,,,u'polarity_right
"u'<3i2B',",2,,,,,"u'<3i2B',",,,,,"u'<3i2B',"
class EV3(object):,2,,,,,,,,,,
"self.private_key = {u""type"": ktype, u""content"": kcontent}",2,,,,,"u""type"":",,,,,"u""type"":"
self.groupBox4 = QGroupBox(u''),2,,,,,u''),,,,,u'')
@_(u'MINUS FLOAT'),2,,,,,u'MINUS,,,,,u'MINUS
opMemory_Write = '\x7E',2,,,,,,,,,,
ops_set = ''.join((,2,,,,,,,,,,
"(u""c''"", 0.75),",2,,,,,"u""c''"",",,,,,"u""c''"","
"u'Voice as',",2,,,,,u'Voice,,,,,u'Voice
"rawclose = rawclose1.decode(u""utf-8"") + rawclose2.decode(u""utf-8"")",2,,,,,"u""utf-8"")",,,,,"u""utf-8"")"
"ax1.plot(xar,yar2,label=u'Analog Temperature2',linewidth=2)",2,,,,,u'Analog,,,,,u'Analog
"QMessageBox.about(self, u""Error2!"", u""Error2, check the usb connection, then click 'Refresh Port'"")",2,,,,,"u""Error2!"",",,,,,"u""Error2!"","
"value,Type = branch[1][u'value'],self.type_map[u'float']",2,,,,,"u'value'],self.type_map[u'float']",,,,,"u'value'],self.type_map[u'float']"
def network(self):,2,,,,,,,,,,
LED_LG = '\x04'  # Left green,2,,,,,,,,,,
"return utils.data(u'Name',p.NAME)",2,,,,,"u'Name',p.NAME)",,,,,"u'Name',p.NAME)"
"if path.endswith(u""/""):",2,,,,,"u""/""):",,,,,"u""/""):"
for i in xrange (len(self.polar_tmp)):,2,,,xrange (,,,,,,,xrange (
ADD = '\x02',2,,,,,,,,,,
if u'last' in self._current_movement:,2,,,,,u'last',,,,,u'last'
"assert isinstance(msg_cnt, str), \",2,,,,,,,,,,
"if u""upbeat"" in song:",2,,,,,"u""upbeat""",,,,,"u""upbeat"""
DEVCMD_CHANNEL = '\x12'  # UART device channel (IR seeker),2,,,,,,,,,,
info1=unicode(info1),2,,,,,,,unicode(,,,unicode(
PORT_3 = '\x02',2,,,,,,,,,,
"if isinstance(value, unicode):",2,,,,,,,,,,
"if port == u""default"":",2,,,,,"u""default"":",,,,,"u""default"":"
"def __new__(self, buffer = """"):",2,,,,,,,,,,
"self.option_class = dict((v.value, k) for k, v in self.Classes.__members__.items())[self._opt_class]",2,,,,,,,,,,
"elif tone.startswith(u""b""):",2,,,,,"u""b""):",,,,,"u""b""):"
"self._physical_ev3._introspection[u""fw_build""],",2,,,,,"u""fw_build""],",,,,,"u""fw_build""],"
def next_part():,2,,,,,,,,,,
opUI_Write = '\x82',2,,,,,,,,,,
CODE = '\x0E',2,,,,,,,,,,
"if css: url += u""&css="" + css",2,,,,,"u""&css=""",,,,,"u""&css="""
MOD32 = '\x13'  # !< Modulo DATA32 r = x % y,2,,,,,,,,,,
CAL_MAX = '\x08',2,,,,,,,,,,
opSelect16 = '\x5D',2,,,,,,,,,,
"ax1.legend(loc=u""upper left"")",2,,,,,"u""upper",,,,,"u""upper"
"def dump(self, dfu, args):",2,,,,,,,,,,
"newzone = unicode(vin(u""Target timezone [UTC]"", u""UTC""))",2,,,,,"u""Target",,unicode(,,,"u""Target unicode("
ICON_DISCONNECT = '\x11',2,,,,,,,,,,
"ct = response.headers.get(u""Content-Type"", u""text/html"").split(u"";"")[0]",2,,,,,"u""Content-Type"",",,,,,"u""Content-Type"","
opReadF = '\xCB',2,,,,,,,,,,
GET_RAW = '\x0B',2,,,,,,,,,,
if 'tld' in _3to2kwargs: tld = _3to2kwargs['tld']; del _3to2kwargs['tld'],2,,,,,,,,,,
TRUNC = '\x15'  # !< Truncate r = (float)((int)(x * pow(y))) / pow(y),2,,,,,,,,,,
@_(u'MINUS NUMBER'),2,,,,,u'MINUS,,,,,u'MINUS
"0x36: u""NARP"",      0x37: u""MOBILE"",      0x38: u""TLSP"",",2,,,,,"u""NARP"",",,,,,"u""NARP"","
self.listLabel3 = QLabel(u''),2,,,,,u''),,,,,u'')
"u""value of sync_mode: "" + sync_mode + u"" is invalid""",2,,,,,"u""value",,,,,"u""value"
SICON_BT_VISIBLE = '\x09',2,,,,,,,,,,
u':'.join(u'{:02X}'.format(byte) for byte in reply[0:2]) +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
"label.grid(row=2, column=3, columnspan=5, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
u'polarity_left must be an integer',2,,,,,u'polarity_left,,,,,u'polarity_left
"u'-filter:a', u'volume=1.5',",2,,,,,"u'-filter:a',",,,,,"u'-filter:a',"
"Memory = namedtuple(u'Memory', [",2,,,,,"u'Memory',",,,,,"u'Memory',"
"info2=eval(u""info2[0:4]+info2[5:7]+info2[8:10]"")",2,,,,,"u""info2[0:4]+info2[5:7]+info2[8:10]"")",,,,,"u""info2[0:4]+info2[5:7]+info2[8:10]"")"
"self._checksum(address.to_bytes(4, u'big'))]))",2,,,,,u'big'))])),,,,,u'big'))]))
"g=open(proc_sh,u'w')",2,,,,,u'w'),,,,,u'w')
"super(_Tracking, self).__init__()",2,,,,,,,,,,
"super(Sound, self).__init__(",2,,,,,,,,,,
picon1 = u'001-temperature.png',2,,,,,u'001-temperature.png',,,,,u'001-temperature.png'
"super(server, self).__init__(*args, **kwargs)",2,,,,,,,,,,
"u'ffmpeg',",2,,,,,"u'ffmpeg',",,,,,"u'ffmpeg',"
"port_str = u'PORT_' + unicode(1 + struct.unpack(u""B"", self._port)[0])",2,,,,,u'PORT_',,unicode(,,,u'PORT_' unicode(
"def pprint(obj, depth = 0):",2,,,,,,,,,,
def system(self):,2,,,,,,,,,,
self.listLabel1 = QLabel(u'Calorimeter'),2,,,,,u'Calorimeter'),,,,,u'Calorimeter')
OK = '\x00'  # No errors to report,2,,,,,,,,,,
@_(u'FLOAT'),2,,,,,u'FLOAT'),,,,,u'FLOAT')
GET_FOLDERS = '\x0D',2,,,,,,,,,,
"label=tk.Label(self, text=u'Do you want to use Enhanced Spectral diversity (ESD)?')",2,,,,,u'Do,,,,,u'Do
RUNNING = '\x10'  # Object code is running,2,,,,,,,,,,
SYSTEM_NO_PERMISSION = '\x05',2,,,,,,,,,,
"def polarity_left(self, value):",2,,,,,,,,,,
opObject_End = '\x0A',2,,,,,,,,,,
"print f""[i] Request results for Phone Number based Person Lookup:""",2,,,,,,"print f""[i] Request results for Phone Number based Person Lookup:""",,,,"print f""[i] Request results for Phone Number based Person Lookup:"""
"(u""f'"", 1)",2,,,,,"u""f'"",",,,,,"u""f'"","
"u'step2_right': step2_right,",2,,,,,u'step2_right':,,,,,u'step2_right':
htmlhelp_basename = u'ev3_dcdoc',2,,,,,u'ev3_dcdoc',,,,,u'ev3_dcdoc'
"address_families.add_argument(u""-6"", u""--ipv6"", action = u""store_true"", help = u""Use IPv6 instead of IPv4. (AddressFamily: AF_INET6)"")",2,,,,,"u""-6"",",,,,,"u""-6"","
tmp=tmp+polar_check[i]+u'  ',2,,,,,u'  ',,,,,u'  '
"assert isinstance(path_dest, unicode), \",2,,,,,,,,,,
"results = censys.ipv4.search(f""{fingerprint}"", fields = [u""443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names"", u""443.https.tls.certificate.parsed.names"", u""ip""])",2,,,,,"u""443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names"",",,,,,"u""443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names"","
"u'42s42s42s',",2,,,,,"u'42s42s42s',",,,,,"u'42s42s42s',"
TERMINAL = '\x1F',2,,,,,,,,,,
"u""tempo"": 130,",2,,,,,"u""tempo"":",,,,,"u""tempo"":"
opCp_LteqF = '\x57',2,,,,,,,,,,
"sentval = u""null""",2,,,,,"u""null""",,,,,"u""null"""
"u'duration': duration,",2,,,,,u'duration':,,,,,u'duration':
"u'fw_build',",2,,,,,"u'fw_build',",,,,,"u'fw_build',"
"with open(path_source, u'rb') as f:",2,,,,,u'rb'),,,,,u'rb')
"btn1=tk.Button(self, text=u""< Previous "",",2,,,,,"u""<",,,,,"u""<"
NORMAL_ICON = '\x00'  # 24x12_Files_Folders_Settings.bmp,2,,,,,,,,,,
"pack(u'H', size),",2,,,,,"u'H',",,,,,"u'H',"
"(u""f'"", 2),",2,,,,,"u""f'"",",,,,,"u""f'"","
def rate(self):,2,,,,,,,,,,
print ex,2,,,,,,print ex,,,,print ex
"u'Port_B',",2,,,,,"u'Port_B',",,,,,"u'Port_B',"
"self._introspection[u""sleep""],",2,,,,,"u""sleep""],",,,,,"u""sleep""],"
self.atemVal2 = QLabel(unicode(y2) +  u' °' ),2,,,,,u' °',,unicode(,,,u' °' unicode(
SCREEN_BLOCK = '\x10',2,,,,,,,,,,
"resolver.timeout = arguments.get(u""timeout"")",2,,,,,"u""timeout"")",,,,,"u""timeout"")"
op = branch[1][u'op'],2,,,,,u'op'],,,,,u'op']
"pids = lambda: stem.util.system.pid_by_name(u""tor"", multiple = True)",2,,,,,"u""tor"",",,,,,"u""tor"","
"u""speed needs to be positive""",2,,,,,"u""speed",,,,,"u""speed"
_SYSTEM_REPLY_ERROR = '\x05',2,,,,,,,,,,
"ASYNC = u'ASYNC'  # reply if global_mem, never wait for reply",2,,,,,u'ASYNC',,,,,u'ASYNC'
opSubF = '\x17',2,,,,,,,,,,
"btn_polar_check=tk.Button(self, text=u""Polarization"", command=lambda *args:Display(1))",2,,,,,"u""Polarization"",",,,,,"u""Polarization"","
"self.title_font = tkFont.Font(family=u'Helvetica',",2,,,,,"u'Helvetica',",,,,,"u'Helvetica',"
u':'.join(u'{:02X}'.format(byte) for byte in cmd[0:2]) + u'|' +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
GET_MINMAX = '\x1E',2,,,,,,,,,,
"u'channel must be one of (1, 2, 3, 4)'",2,,,,,u'channel,,,,,u'channel
self.refreshButton = QPushButton(u'Refresh Port'),2,,,,,u'Refresh,,,,,u'Refresh
"rhs, rhs_type = self.visit_value(branch[1][u'rhs'])",2,,,,,u'rhs']),,,,,u'rhs'])
GET_SUBFOLDER_NAME = '\x0F',2,,,,,,,,,,
SYSTEM_ILLEGAL_FILENAME = '\x0B',2,,,,,,,,,,
SICON_WIFI_2 = '\x0D',2,,,,,,,,,,
STOP = '\x04'  # Stopped,2,,,,,,,,,,
opInput_ReadSI = '\x9D',2,,,,,,,,,,
"u'angle',",2,,,,,"u'angle',",,,,,"u'angle',"
"def _send_command(self, command):",2,,,,,,,,,,
step2 = cur_mov[u'step2_right'],2,,,,,u'step2_right'],,,,,u'step2_right']
BROWSE_FOLDS_FILES = '\x01'  # folders and files,2,,,,,,,,,,
GET_INCOMING = '\x13',2,,,,,,,,,,
"print u""Scraping: "" + pcap_file",2,,,,,"u""Scraping:","print u""Scraping: "" + pcap_file",,,,"u""Scraping: print u""Scraping: "" + pcap_file"
TO_SDCARD = '\x0F',2,,,,,,,,,,
"0x09: u""IGP"",       0x0A: u""BBN-RCC-MON"", 0x0B: u""NVP-II"",",2,,,,,"u""IGP"",",,,,,"u""IGP"","
raise SensorError(u'no touch connected at ' + port_str),2,,,,,u'no,,,,,u'no
ICON_STAR = '\x00',2,,,,,,,,,,
g.write(u'preproc_batch_tops.csh data.in dem.grd 1\n'),2,,,,,u'preproc_batch_tops.csh,,,,,u'preproc_batch_tops.csh
opJr = '\x40'  # BRANCH,2,,,,,,,,,,
tmp=Dir_EOF+u'/'+S1AB+u'*'+info1+u'*'+info2+u'*',2,,,,,u'/'+S1AB+u'*'+info1+u'*'+info2+u'*',,,,,u'/'+S1AB+u'*'+info1+u'*'+info2+u'*'
"u'''stops the current motor movements, sets or releases brake",2,,,,,u'''stops,,,,,u'''stops
ICON_WAIT1 = '\x14',2,,,,,,,,,,
opDo = '\x0F',2,,,,,,,,,,
target_pos_outer = cur_mov[u'target_motor_pos'][1],2,,,,,u'target_motor_pos'][1],,,,,u'target_motor_pos'][1]
"u""direct command {:02X}:{:02X} replied error"".format(",2,,,,,"u""direct",,,,,"u""direct"
"u""local_mem has a maximum of 63""",2,,,,,"u""local_mem",,,,,"u""local_mem"
self._current_movement[u'started_at'],2,,,,,u'started_at'],,,,,u'started_at']
TYPE_TEXT = '\x07',2,,,,,,,,,,
TESTLONGPRESS = '\x0D',2,,,,,,,,,,
def speed(self):,2,,,,,,,,,,
"u'Christoph Gaukel', u'manual'),",2,,,,,u'Christoph,,,,,u'Christoph
opInput_Test = '\x9B',2,,,,,,,,,,
"shaft_lmc = vin(u""Shaft LMC"", u""?"", units=u""in"")",2,,,,,"u""Shaft",,,,,"u""Shaft"
"self._physical_ev3._introspection[u""sensors""][self._port][u'used_by'] = None",2,,,,,"u""sensors""][self._port][u'used_by']",,,,,"u""sensors""][self._port][u'used_by']"
"super(TwoWheelVehicle, self).__init__(protocol=protocol, host=host, ev3_obj=ev3_obj)",2,,,,,,,,,,
"(master_doc, u'ev3_dc.tex', u'ev3\\_dc Documentation',",2,,,,,"u'ev3_dc.tex',",,,,,"u'ev3_dc.tex',"
"struct.pack(u'<I', size),      # SIZE",2,,,,,"u'<I',",,,,,"u'<I',"
"super(Sound, self).__del__()",2,,,,,,,,,,
"btn_create.grid(row=3, column=10, sticky=u'e')",2,,,,,u'e'),,,,,u'e')
"@_retry(_RETRIES, u'send dfu command', _serial_flush)",2,,,,,u'send,,,,,u'send
BMPFILE = '\x1C',2,,,,,,,,,,
print f'It returns {result}',2,,,,,,print f'It returns {result}',,,,print f'It returns {result}'
"elif tone.startswith(u""a""):",2,,,,,"u""a""):",,,,,"u""a""):"
release = u'0.9.9',2,,,,,u'0.9.9',,,,,u'0.9.9'
turn,2,,,,,,,,,,
CONTINUE_UPLOAD = '\x95',2,,,,,,,,,,
"epilog: unicode = u""""",2,,,,,"u""""",,,,,"u"""""
MOD = '\x02'  # !< Modulo r = fmod(x'y),2,,,,,,,,,,
src2a = u'sensor_output_ori.csv',2,,,,,u'sensor_output_ori.csv',,,,,u'sensor_output_ori.csv'
SMALL_ICON = '\x01',2,,,,,,,,,,
cur_mov[u'last_motor_pos'] = motor_pos,2,,,,,u'last_motor_pos'],,,,,u'last_motor_pos']
"def stats(self, period = u"""", type = u""json"", prettyPrint = False):",2,,,,,"u"""",",,,,,"u"""","
if 'polarity_left' in _3to2kwargs: polarity_left = _3to2kwargs['polarity_left']; del _3to2kwargs['polarity_left'],2,,,,,,,,,,
html_title = version + u' documentation',2,,,,,u' documentation',,,,,u' documentation'
raise NoEV3(u'No EV3 device found'),2,,,,,u'No,,,,,u'No
LIST_OPEN_HANDLES = '\x9D',2,,,,,,,,,,
import Tkinter as tk,2,,,,,,,,,,
"print u""Thank you for using the PCAP app.""",2,,,,,"u""Thank","print u""Thank you for using the PCAP app.""",,,,"u""Thank print u""Thank you for using the PCAP app."""
"(u""raw_checksum"", c_ushort),",2,,,,,"u""raw_checksum"",",,,,,"u""raw_checksum"","
"diff_pos, **_3to2kwargs",2,,,,,,,,,,
ICON_OBD = '\x20',2,,,,,,,,,,
TST_ENABLE_UART = '\x11',2,,,,,,,,,,
u'expr OR expr'),2,,,,,u'expr,,,,,u'expr
CLEAN = '\x01',2,,,,,,,,,,
text=u'Chosen Scenes',2,,,,,u'Chosen,,,,,u'Chosen
"group.add_argument(u""-b"", u""--blocking"", action = u""store_true"", help = u""Set the socket to blocking (if flag is set) or non-blocking (not set)."")",2,,,,,"u""-b"",",,,,,"u""-b"","
"if allowance != u""?"":",2,,,,,"u""?"":",,,,,"u""?"":"
"def serve(self, backlog = None, condition = True):",2,,,,,,,,,,
LT = ur'<',2,,,,,,,,,,
"if not fullname.endswith(u"".py""):",2,,,,,"u"".py""):",,,,,"u"".py""):"
if name == u'printf':,2,,,,,u'printf':,,,,,u'printf':
return ''.join((,2,,,,,,,,,,
"super(Jukebox, self).__init__(",2,,,,,,,,,,
"upbeat_duration = 60 * song[u""upbeat""] / song[u""tempo""]",2,,,,,"u""upbeat""]",,,,,"u""upbeat""]"
"super(Ultrasonic, self).__exit__(exc_type, exc_value, exc_traceback)",2,,,,,,,,,,
"parent_path = path.rsplit(u""/"", 1)[0] + u""/""",2,,,,,"u""/"",",,,,,"u""/"","
target_pos_inner = cur_mov[u'target_motor_pos'][1],2,,,,,u'target_motor_pos'][1],,,,,u'target_motor_pos'][1]
opJr_Eq8 = '\x6C',2,,,,,,,,,,
verbosity = _3to2kwargs['verbosity']; del _3to2kwargs['verbosity'],2,,,,,,,,,,
u':'.join(u'{:02X}'.format(byte) for byte in cmd[5:7]) + u'|' +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
GET_RESULT = '\x04',2,,,,,,,,,,
MOD8 = '\x11'  # !< Modulo DATA8 r = x % y,2,,,,,,,,,,
"value = self.builder.icmp_signed(u'<=',lhs,rhs)",2,,,,,"u'<=',lhs,rhs)",,,,,"u'<=',lhs,rhs)"
groupStyleCol = u''',2,,,,,u''',,,,,u'''
"Network = namedtuple(u'Network', [",2,,,,,"u'Network',",,,,,"u'Network',"
"def ramp_up(self, value):",2,,,,,,,,,,
tmp=u'The following scenes do not have associated POD file:\n\n',2,,,,,u'The,,,,,u'The
opOutput_Time_Sync = '\xB1',2,,,,,,,,,,
else: verbosity = 0,2,,,,,,,,,,
BEGIN_DOWNLOAD = '\x92',2,,,,,,,,,,
ICON_SD = '\x04',2,,,,,,,,,,
if platform.system() == u'Darwin':,2,,,,,u'Darwin':,,,,,u'Darwin':
LED_GREEN_PULSE = '\x07',2,,,,,,,,,,
opWrite16 = '\xCD',2,,,,,,,,,,
type_str = u'EV3_GYRO',2,,,,,u'EV3_GYRO',,,,,u'EV3_GYRO'
ICON_USB = '\x03',2,,,,,,,,,,
elif op == u'/':,2,,,,,u'/':,,,,,u'/':
u''',2,,,,,u''',,,,,u'''
ACOS = '\x0F'  # !<,2,,,,,,,,,,
"LCS(path + u'.rsf'),",2,,,,,"u'.rsf'),",,,,,"u'.rsf'),"
"def __init__(self, port):",2,,,,,,,,,,
u'path needs to be of type str',2,,,,,u'path,,,,,u'path
ICON_BLUETOOTH = '\x16',2,,,,,,,,,,
"console.print(f"" -  {type(e).__name__}: ({filename.replace(csf.location, '.')} line #{line} in {function})"", color = u""red"")",2,"print(f""",,,,"u""red"")",,,,,"print(f"" u""red"")"
"self._introspection[u""network_mac_adr""] = u':'.join(",2,,,,,"u""network_mac_adr""]",,,,,"u""network_mac_adr""]"
"u'multiple EV3 found, you need to set argument host'",2,,,,,u'multiple,,,,,u'multiple
ICON_CHECKED = '\x09',2,,,,,,,,,,
LED_OFF = '\x00',2,,,,,,,,,,
"except Exception, e:",2,,,,,,,,,,
self._tempo = song[u'tempo'],2,,,,,u'tempo'],,,,,u'tempo']
TEXTBOX = '\x20',2,,,,,,,,,,
opCp_Gteq16 = '\x59',2,,,,,,,,,,
GET_HANDLE = '\x09',2,,,,,,,,,,
if 'global_mem' in _3to2kwargs: global_mem = _3to2kwargs['global_mem']; del _3to2kwargs['global_mem'],2,,,,,,,,,,
READ_CONTENT = '\x0D',2,,,,,,,,,,
[port_motor_input(self._port_left)][u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
"self._physical_ev3._introspection[u""sensors""] \",2,,,,,"u""sensors""]",,,,,"u""sensors""]"
"(u""g'"", 2),",2,,,,,"u""g'"",",,,,,"u""g'"","
"self._physical_ev3._introspection[u""sensors""][PORT_B_SENSOR][u""type""],",2,,,,,"u""sensors""][PORT_B_SENSOR][u""type""],",,,,,"u""sensors""][PORT_B_SENSOR][u""type""],"
assert name_tmp == u'Bernie',2,,,,,u'Bernie',,,,,u'Bernie'
"u""speed must be positive""",2,,,,,"u""speed",,,,,"u""speed"
_DIRECT_COMMAND_NO_REPLY = '\x80',2,,,,,,,,,,
"u'FileSystem',",2,,,,,"u'FileSystem',",,,,,"u'FileSystem',"
"def polarity_right(self, value):",2,,,,,,,,,,
"filter_type = raw_input(u""What layer do you want to filter on? (rtp) "")",2,,,,,"u""What",,,,raw_input(,"u""What raw_input("
"edTxt.insert(0,u'02_proc.csh')",2,,,,,u'02_proc.csh'),,,,,u'02_proc.csh')
if 'protocol' in _3to2kwargs: protocol = _3to2kwargs['protocol']; del _3to2kwargs['protocol'],2,,,,,,,,,,
"print u""\x1B\x5BH"",; sys.stdout.write(u"""")",2,,,,,"u""\x1B\x5BH"",;","print u""\x1B\x5BH"",; sys.stdout.write(u"""")",,,,"u""\x1B\x5BH"",; print u""\x1B\x5BH"",; sys.stdout.write(u"""")"
sensor_str = u'NXT_Color',2,,,,,u'NXT_Color',,,,,u'NXT_Color'
ICON_LEFT = '\x01',2,,,,,,,,,,
"(u'left', PLUS, MINUS),",2,,,,,"u'left',",,,,,"u'left',"
type_str = u'EV3_MEDIUM_MOTOR',2,,,,,u'EV3_MEDIUM_MOTOR',,,,,u'EV3_MEDIUM_MOTOR'
ICON_KEY = '\x0F',2,,,,,,,,,,
u'rate',2,,,,,u'rate',,,,,u'rate'
"print u""That is not a valid option""",2,,,,,"u""That","print u""That is not a valid option""",,,,"u""That print u""That is not a valid option"""
opJr_Neq8 = '\x70',2,,,,,,,,,,
ICON_UP = '\x12',2,,,,,,,,,,
if 'memory_map' in _3to2kwargs: memory_map = _3to2kwargs['memory_map']; del _3to2kwargs['memory_map'],2,,,,,,,,,,
"u'Port_1',",2,,,,,"u'Port_1',",,,,,"u'Port_1',"
DELETE_FILE = '\x9C',2,,,,,,,,,,
"kwargs = dict((k, arguments.get(k)) for k in [u""timeout"", u""port"", u""source"", u""source_port"", u""one_rr_per_rrset""])",2,,,,,"u""timeout"",",,,,,"u""timeout"","
DOWN_BUTTON = '\x03',2,,,,,,,,,,
"def _ops_busy(self, global_offset=0):",2,,,,,,,,,,
"args=(path + u'.rsf', ev3_path + u'.rsf'),",2,,,,,"u'.rsf',",,,,,"u'.rsf',"
"elif shaft_lmc == u""?"" and hole_lmc != u""?"" and clearance !=u""?"":",2,,,,,"u""?""",,,,,"u""?"""
NOTIFICATION = '\x0B',2,,,,,,,,,,
"u""white_balance takes exactly 3 color values""",2,,,,,"u""white_balance",,,,,"u""white_balance"
GET_FIGURES = '\x18',2,,,,,,,,,,
"self._physical_ev3._introspection[u""sensors""][self._port][u'used_by'] = None",2,,,,,"u""sensors""][self._port][u'used_by']",,,,,"u""sensors""][self._port][u'used_by']"
"resolver.lifetime = arguments.get(u""lifetime"")",2,,,,,"u""lifetime"")",,,,,"u""lifetime"")"
"def broadcast(self, data, source = None):",2,,,,,,,,,,
u'back must be a bool',2,,,,,u'back,,,,,u'back
"def verbosity(self, value):",2,,,,,,,,,,
"u'left',",2,,,,,"u'left',",,,,,"u'left',"
opJr_Gteq8 = '\x78',2,,,,,,,,,,
INIT16 = '\x09',2,,,,,,,,,,
"self.source = socket.inet_ntoa(struct.pack(u""<L"", self.raw_source))",2,,,,,"u""<L"",",,,,,"u""<L"","
opMove32_8 = '\x38',2,,,,,,,,,,
"kwargs.update({u""key_type"": ktype, u""key_content"": kcontent})",2,,,,,"u""key_type"":",,,,,"u""key_type"":"
opCom_Remove = '\xD6',2,,,,,,,,,,
REMOVE = '\x1E',2,,,,,,,,,,
"def write(self, address, data,",2,,,,,,,,,,
"edTxt2.insert(0,u'01_prep.csh')",2,,,,,u'01_prep.csh'),,,,,u'01_prep.csh')
u'Port_D',2,,,,,u'Port_D',,,,,u'Port_D'
progress_update = lambda *_: None):,2,,,,,,,,,,
VALUE_FORMATTED = '\x0B',2,,,,,,,,,,
start_pos_inner = cur_mov[u'start_motor_pos'][1],2,,,,,u'start_motor_pos'][1],,,,,u'start_motor_pos'][1]
SELECT_FONT = '\x11',2,,,,,,,,,,
ev3.LCS(u'Bernie'),2,,,,,u'Bernie'),,,,,u'Bernie')
"u""radius_wheel needs to be positive""",2,,,,,"u""radius_wheel",,,,,"u""radius_wheel"
"degrees, **_3to2kwargs",2,,,,,,,,,,
class Colors(object):,2,,,,,,,,,,
opSound_Ready = '\x96',2,,,,,,,,,,
TO_BLUETOOTH = '\x11',2,,,,,,,,,,
"u""global_mem needs to be an integer""",2,,,,,"u""global_mem",,,,,"u""global_mem"
"u'ramp_down': ramp_down,",2,,,,,u'ramp_down':,,,,,u'ramp_down':
"group.add_argument(u""port"", type = int, help = u""Target port."")",2,,,,,"u""port"",",,,,,"u""port"","
"assert isinstance(data, str), \",2,,,,,,,,,,
"values = struct.unpack(u'<8i', reply[:32])",2,,,,,"u'<8i',",,,,,"u'<8i',"
"assert isinstance(path, unicode), \",2,,,,,,,,,,
def any(*choices): return group(*choices) + u'*',2,,,,,u'*',,,,,u'*'
"print u""\n\nHole LMC = {0} in"".format(unicode(round(hole_lmc,4)))",2,,,,,"u""\n\nHole","print u""\n\nHole LMC = {0} in"".format(unicode(round(hole_lmc,4)))",unicode(,,,"u""\n\nHole print u""\n\nHole LMC = {0} in"".format(unicode(round(hole_lmc,4))) unicode("
opUI_Flush = '\x80'  # UI,2,,,,,,,,,,
self.setWindowTitle(u'Biology Experiment'),2,,,,,u'Biology,,,,,u'Biology
for i in xrange (Num_data):,2,,,xrange (,,,,,,,xrange (
"(u""g'"", 2)",2,,,,,"u""g'"",",,,,,"u""g'"","
READ_VALUE = '\x03',2,,,,,,,,,,
FLUSH = '\x04',2,,,,,,,,,,
"rb2.grid(row=3, column=4, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
"u""delta_time needs to be positive""",2,,,,,"u""delta_time",,,,,"u""delta_time"
"self._physical_ev3._introspection[u""network_mac_adr""]",2,,,,,"u""network_mac_adr""]",,,,,"u""network_mac_adr""]"
raise SysCmdError(u'directory ' + path_dest_dir + u' does not exist'),2,,,,,u'directory,,,,,u'directory
"u""duration needs to be a number""",2,,,,,"u""duration",,,,,"u""duration"
"output_file = raw_input(u""Provide your desired output filename: "")",2,,,,,"u""Provide",,,,raw_input(,"u""Provide raw_input("
"dump_command.add_argument(u'-f', u'--file',",2,,,,,"u'-f',",,,,,"u'-f',"
RuntimeError(u'unknown movement'),2,,,,,u'unknown,,,,,u'unknown
def motor_pos(self):,2,,,,,,,,,,
GET_IP = '\x1B',2,,,,,,,,,,
"u'bool':ir.IntType(1),",2,,,,,"u'bool':ir.IntType(1),",,,,,"u'bool':ir.IntType(1),"
data.decode(u'utf-8'),2,,,,,u'utf-8'),,,,,u'utf-8')
print u'raw value: ' + val,2,,,,,u'raw,print u'raw value: ' + val,,,,u'raw print u'raw value: ' + val
+ u' > tmp_file\n',2,,,,,u' >,,,,,u' >
"busy = struct.unpack(u'B', reply)[0]",2,,,,,"u'B',",,,,,"u'B',"
[u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
WRITE_FLUSH = '\x01',2,,,,,,,,,,
"_, _, _, _, options[u""uat""] = struct.unpack(u""!BBHIQ"", raw_options[:16])",2,,,,,"u""uat""]",,,,,"u""uat""]"
last_pos_inner = cur_mov[u'last_motor_pos'][1],2,,,,,u'last_motor_pos'][1],,,,,u'last_motor_pos'][1]
"edTxt1.config(state=u""readonly"")",2,,,,,"u""readonly"")",,,,,"u""readonly"")"
"u""tempo"": 100,",2,,,,,"u""tempo"":",,,,,"u""tempo"":"
@_(u'NAME LPAREN params RPAREN'),2,,,,,u'NAME,,,,,u'NAME
"allowance = vin(u""Allowance"", u""?"", units=u""in"")",2,,,,,"u""Allowance"",",,,,,"u""Allowance"","
USB = u'USB',2,,,,,u'USB',,,,,u'USB'
u'target_position': position + degrees,2,,,,,u'target_position':,,,,,u'target_position':
"u'str':ir.ArrayType(ir.IntType(8),1), # Note i8 in most languages are characters",2,,,,,"u'str':ir.ArrayType(ir.IntType(8),1),",,,,,"u'str':ir.ArrayType(ir.IntType(8),1),"
"u"" when reading folder "" +",2,,,,,"u"" when",,,,,"u"" when"
self.dhumVal.setText((data[3]) +  u' %' ),2,,,,,u' %',,,,,u' %'
TAN = '\x0D'  # !<,2,,,,,,,,,,
"Beacon = namedtuple(u'Beacon', [",2,,,,,"u'Beacon',",,,,,"u'Beacon',"
"container.pack(side=u""top"", fill=u""both"", expand=True)",2,,,,,"u""top"",",,,,,"u""top"","
"if ct == u""application/json"":",2,,,,,"u""application/json"":",,,,,"u""application/json"":"
if u'last_motor_pos' not in cur_mov:,2,,,,,u'last_motor_pos',,,,,u'last_motor_pos'
USER_SLOT = '\x01',2,,,,,,,,,,
"self._current_movement[u'duration_rest'],",2,,,,,"u'duration_rest'],",,,,,"u'duration_rest'],"
"u""ramp_up must be positive""",2,,,,,"u""ramp_up",,,,,"u""ramp_up"
"for attribute in imap(lambda name: getattr(module, name), ifilter(lambda x: not x.startswith(u""_""), dir(module))):",2,,,,,"u""_""),",,,,,"u""_""),"
"pcap_file = (u""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s"" % self.pcap)",2,,,,,"u""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s""",,,,,"u""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s"""
TO_USBSTICK = '\x10',2,,,,,,,,,,
"direction=self._current_movement[u'direction'],",2,,,,,"u'direction'],",,,,,"u'direction'],"
"size, handle = struct.unpack(u'<IB', reply[1:6])",2,,,,,"u'<IB',",,,,,"u'<IB',"
"0x45: u""SAT-MON"",   0x46: u""VISA"",        0x47: u""IPCU"",",2,,,,,"u""SAT-MON"",",,,,,"u""SAT-MON"","
"if u""Bootstrapped"" in line:",2,,,,,"u""Bootstrapped""",,,,,"u""Bootstrapped"""
port_str = u'PORT_D',2,,,,,u'PORT_D',,,,,u'PORT_D'
"u'blue_up',",2,,,,,"u'blue_up',",,,,,"u'blue_up',"
"super(FullContact, self).__init__()",2,,,,,,,,,,
opCp_Lt16 = '\x45',2,,,,,,,,,,
raise NoEV3(u'No EV3 device found'),2,,,,,u'No,,,,,u'No
WRITE_LOG = '\x10',2,,,,,,,,,,
"kwargs = {u""type"": u""json""}",2,,,,,"u""type"":",,,,,"u""type"":"
"erase_command.add_argument(u'-m', u'--memory-map', default=None,",2,,,,,"u'-m',",,,,,"u'-m',"
print u'NOTE: Clearance = Loosest fit & Allowance = tighest fit',2,,,,,u'NOTE:,print u'NOTE: Clearance = Loosest fit & Allowance = tighest fit',,,,u'NOTE: print u'NOTE: Clearance = Loosest fit & Allowance = tighest fit'
"elif tone.startswith(u""d""):",2,,,,,"u""d""):",,,,,"u""d""):"
"super(Motor, self).__del__()",2,,,,,,,,,,
"u""duration must be at least one millisecond""",2,,,,,"u""duration",,,,,"u""duration"
BROWSE = '\x0E',2,,,,,,,,,,
DEL_SUBFOLDER = '\x18',2,,,,,,,,,,
opMoveF_32 = '\x3E',2,,,,,,,,,,
"0x18: u""TRUNK-2"",   0x19: u""LEAF-1"",      0x1A: u""LEAF-2"",",2,,,,,"u""TRUNK-2"",",,,,,"u""TRUNK-2"","
CREATE_DIR = '\x9B',2,,,,,,,,,,
STRIP = '\x08',2,,,,,,,,,,
"command=lambda: self.controller.show_frame(u""Info""))",2,,,,,"u""Info""))",,,,,"u""Info""))"
u''',2,,,,,u''',,,,,u'''
WARN_BATT = '\x09',2,,,,,,,,,,
BACK_BUTTON = '\x06',2,,,,,,,,,,
"0x12: u""MUX"",       0x13: u""DCN-MEAS"",    0x14: u""HMP"",",2,,,,,"u""MUX"",",,,,,"u""MUX"","
"def __init__(self, address, port, *args, **kwargs):",2,,,,,,,,,,
"print u""Both values must either a number or ?""",2,,,,,"u""Both","print u""Both values must either a number or ?""",,,,"u""Both print u""Both values must either a number or ?"""
"u'step1_right': step1_right,",2,,,,,u'step1_right':,,,,,u'step1_right':
TST_CLOSE = '\x0B',2,,,,,,,,,,
GET_NAME = '\x15',2,,,,,,,,,,
print u'resp = ' + resp,2,,,,,u'resp,print u'resp = ' + resp,,,,u'resp print u'resp = ' + resp
LED_ORANGE_FLASH = '\x06',2,,,,,,,,,,
DATA_A = '\x05'  # Array handle,2,,,,,,,,,,
if 'ramp_up_time' in _3to2kwargs: ramp_up_time = _3to2kwargs['ramp_up_time']; del _3to2kwargs['ramp_up_time'],2,,,,,,,,,,
SET_RAW = '\x17',2,,,,,,,,,,
"response = api.person(self.arguments.twitter, u""twitter"", **kwargs, **pkwargs)",2,,,,,"u""twitter"",",,,,,"u""twitter"","
else: tld =  u'com',2,,,,,u'com',,,,,u'com'
TST_READ_ADC = '\x0E',2,,,,,,,,,,
"0x33: u""AH"",        0x34: u""I-NLSP"",      0x35: u""SWIPE"",",2,,,,,"u""AH"",",,,,,"u""AH"","
else: temperament =  440,2,,,,,,,,,,
tmp=u'',2,,,,,u'',,,,,u''
"fits = json.load(open(u'betterfits.json', u'r'))",2,,,,,"u'betterfits.json',",,,,,"u'betterfits.json',"
"folders.append(line.rstrip('\x2F').decode(u""utf8""))",2,,,,,"u""utf8""))",,,,,"u""utf8""))"
raise SensorError(u'no ultrasonic connected at ' + port_str),2,,,,,u'no,,,,,u'no
TST_READ_UART = '\x10',2,,,,,,,,,,
"actions.add_argument(u""-c"", u""--company"", type = unicode, metavar = u""name"", help = u""Request information about a specific company by name."")",2,,,,,"u""-c"",",,,,,"u""-c"","
"assert u'beats_per_bar' in song, \",2,,,,,u'beats_per_bar',,,,,u'beats_per_bar'
opMailbox_Write = '\xD9',2,,,,,,,,,,
opWrite8 = '\xCC',2,,,,,,,,,,
last_pos_inner = cur_mov[u'last_motor_pos'][0],2,,,,,u'last_motor_pos'][0],,,,,u'last_motor_pos'][0]
"u""system command {:02X}:{:02X} replied error"".format(",2,,,,,"u""system",,,,,"u""system"
u'temperament needs to be positive',2,,,,,u'temperament,,,,,u'temperament
"u'<IB',",2,,,,,"u'<IB',",,,,,"u'<IB',"
"u'expr TIMES expr',",2,,,,,u'expr,,,,,u'expr
"u'read memory': 0x11,",2,,,,,u'read,,,,,u'read
NAME[u'until'] = UNTIL,2,,,,,u'until'],,,,,u'until']
"u'Port_3',",2,,,,,"u'Port_3',",,,,,"u'Port_3',"
_DIRECT_REPLY_ERROR = '\x04',2,,,,,,,,,,
"__builtins__.long(""01"", 2))  # ECN Capable Transport, ECT(1)",2,,,,,,,,,,
"while_loop_otherwise = self.builder.append_basic_block(u""while_loop_otherwise""+unicode(self.i))",2,,,,,"u""while_loop_otherwise""+unicode(self.i))",,unicode(,,,"u""while_loop_otherwise""+unicode(self.i)) unicode("
for i in xrange (len(polar_check)):,2,,,xrange (,,,,,,,xrange (
"u""ops needs to be of type bytes""",2,,,,,"u""ops",,,,,"u""ops"
"def introspection(self, verbosity):",2,,,,,,,,,,
opCp_Eq32 = '\x4E',2,,,,,,,,,,
"brake=self._current_movement[u'brake'],",2,,,,,"u'brake'],",,,,,"u'brake'],"
if 'reply' in _3to2kwargs: reply = _3to2kwargs['reply']; del _3to2kwargs['reply'],2,,,,,,,,,,
"actions.add_argument(u""-l"", u""--list"", type = unicode, nargs = u""?"", const = u"""", metavar = u""DIR"", help = u""List available programs."")",2,,,,,"u""-l"",",,,,,"u""-l"","
"print u""You must enter at least 2 items! (4 values total)""",2,,,,,"u""You","print u""You must enter at least 2 items! (4",,,,"u""You print u""You must enter at least 2 items! (4"
"u""1"": self.audio_scraper,",2,,,,,"u""1"":",,,,,"u""1"":"
"__all__ = [u""API""]",2,,,,,"u""API""]",,,,,"u""API""]"
else: volume = None,2,,,,,,,,,,
"def copy_file(self, path_source, path_dest):",2,,,,,,,,,,
"def _write_memory_chunk(self, address, data):",2,,,,,,,,,,
opTst = '\xDD',2,,,,,,,,,,
html_theme = u'sphinx_rtd_theme',2,,,,,u'sphinx_rtd_theme',,,,,u'sphinx_rtd_theme'
"return self._physical_ev3._introspection[u""sleep""]",2,,,,,"u""sleep""]",,,,,"u""sleep""]"
"assert isinstance(value, int), u""volume needs to be of type int""",2,,,,,"u""volume",,,,,"u""volume"
u''',2,,,,,u''',,,,,u'''
"STD = u'STD'  # reply if global_mem, wait for reply",2,,,,,u'STD',,,,,u'STD'
else: local =  False,2,,,,,,,,,,
self._current_movement[u'op'] == u'Speed' and,2,,,,,u'op'],,,,,u'op']
"self.geometry(u""760x400"")",2,,,,,"u""760x400"")",,,,,"u""760x400"")"
"self.parser.add_argument(u""-c"", u""--rdclass"", type=unicode, default=1, help=u""Query class."")",2,,,,,"u""-c"",",,,,,"u""-c"","
TYPE_RESTART_BROWSER = '\x21',2,,,,,,,,,,
raise MotorError(u'no motor connected at ' + port_str),2,,,,,u'no,,,,,u'no
"domain = self.parser.add_argument_group(u""Domain Lookup"")",2,,,,,"u""Domain",,,,,"u""Domain"
def cont_as_task(self):,2,,,,,,,,,,
from itertools import imap,2,,,,,,,,,,
"u""verbosity needs to be of type int""",2,,,,,"u""verbosity",,,,,"u""verbosity"
"(u""c'"", 1),",2,,,,,"u""c'"",",,,,,"u""c'"","
body = branch[1][u'body'],2,,,,,u'body'],,,,,u'body']
"u'-i', u'-',  # read from stdin",2,,,,,"u'-i',",,,,,"u'-i',"
"self.parser.add_argument(u""-S"", u""--want-dnssec"", action=u""store_true"", help=u""Indicate that DNSSEC is desired."")",2,,,,,"u""-S"",",,,,,"u""-S"","
"if not basedir.startswith(u""_"") and basedir not in [u""modules""]:",2,,,,,"u""_"")",,,,,"u""_"")"
"self.headers[u""X-FullContact-APIKey""] = key",2,,,,,"u""X-FullContact-APIKey""]",,,,,"u""X-FullContact-APIKey""]"
"def domain(self, query, keyPeople = False, prettyPrint = False):",2,,,,,,,,,,
"import os, argparse, threading",2,,,,,,,,,,
opNop = '\x01',2,,,,,,,,,,
"u'Port_4',",2,,,,,"u'Port_4',",,,,,"u'Port_4',"
PORT_1 = '\x00',2,,,,,,,,,,
"u'get version and protection status': 0x01,",2,,,,,u'get,,,,,u'get
"if shaft_mmc != u""?"":",2,,,,,"u""?"":",,,,,"u""?"":"
TYPE_FOLDER = '\x01',2,,,,,,,,,,
"def create_dir(self, path):",2,,,,,,,,,,
ENCRYPT_WPA2 = '\x01',2,,,,,,,,,,
GET_ENCRYPT = '\x10',2,,,,,,,,,,
"__all__ = [u""Session"", u""parse""]",2,,,,,"u""Session"",",,,,,"u""Session"","
master_doc = u'index',2,,,,,u'index',,,,,u'index'
u'{:02X}'.format(byte) for byte in reply[5:len_data],2,,,,,u'{:02X}'.format(byte),,,,,u'{:02X}'.format(byte)
tmp=tmp+data_date[i]+u'  ',2,,,,,u'  ',,,,,u'  '
"assert value != u'', u""name may not be an empty string""",2,,,,,"u'',",,,,,"u'',"
"console.print(f""    {repr(text)}"", color = u""red"", dark = True, parse = False)",2,"print(f""",,,,"u""red"",",,,,,"print(f"" u""red"","
print u'Usage: python3 run.py <filename>',2,,,,,u'Usage:,print u'Usage: python3 run.py <filename>',,,,u'Usage: print u'Usage: python3 run.py <filename>'
opTimer_Read = '\x87',2,,,,,,,,,,
CAL_DEFAULT = '\x04',2,,,,,,,,,,
GET_ADDRESS = '\x0D',2,,,,,,,,,,
"u'speed': speed,",2,,,,,u'speed':,,,,,u'speed':
"u'red',",2,,,,,"u'red',",,,,,"u'red',"
SICON_BT_CONNVISIB = '\x0B',2,,,,,,,,,,
ignore = u' \t\r',2,,,,,u' \t\r',,,,,u' \t\r'
info=xml_list[i].split(u'.'),2,,,,,u'.'),,,,,u'.')
print f'Loading {args.file} ({len(firmware)} bytes) at {args.address}',2,,,,,,print f'Loading {args.file} ({len(firmware)},,,,print f'Loading {args.file} ({len(firmware)}
"u""in case of protocol BLUETOOTH, host needs to be set""",2,,,,,"u""in",,,,,"u""in"
"def _read_memory_chunk(self, address, size):",2,,,,,,,,,,
"u"" not reached""",2,,,,,"u"" not",,,,,"u"" not"
"label.grid(row=1, column=1, sticky=u'e')",2,,,,,u'e'),,,,,u'e')
ICON_FOLDER = '\x01',2,,,,,,,,,,
''.join((,2,,,,,,,,,,
raise NoEV3(u'No EV3 device found'),2,,,,,u'No,,,,,u'No
"0x30: u""DSR"",       0x31: u""BNA"",         0x32: u""ESP"",",2,,,,,"u""DSR"",",,,,,"u""DSR"","
os.chdir(u'../raw'),2,,,,,u'../raw'),,,,,u'../raw')
"self.config = {u""SocksPort"": 9150, u""ControlPort"": 9151}",2,,,,,"u""SocksPort"":",,,,,"u""SocksPort"":"
print u'Erasing whole memory...',2,,,,,u'Erasing,print u'Erasing whole memory...',,,,u'Erasing print u'Erasing whole memory...'
SERVICE = '\x04',2,,,,,,,,,,
FLOATVALUE = '\x02',2,,,,,,,,,,
"def _serial_write(self, data):",2,,,,,,,,,,
"assert 0 <= value <= 100, u""volume must be between 0 and 100""",2,,,,,"u""volume",,,,,"u""volume"
"0x41: u""KRYPTOLAN"", 0x42: u""RVD"",         0x43: u""IPPC"",",2,,,,,"u""KRYPTOLAN"",",,,,,"u""KRYPTOLAN"","
print u'An Error occurred Reset MCU and try again.',2,,,,,u'An,print u'An Error occurred Reset MCU and try again.',,,,u'An print u'An Error occurred Reset MCU and try again.'
"ur'Port: (\d{4,4})\s\n' +",2,,,,,,,,,,
"elif hole_lmc != u""?"" and hole_mmc == u""?"":",2,,,,,"u""?""",,,,,"u""?"""
else: ramp_up =  None,2,,,,,,,,,,
"size=18, weight=u""bold"", slant=u""italic"")",2,,,,,"u""bold"",",,,,,"u""bold"","
TINY_FONT = '\x03',2,,,,,,,,,,
"@_retry(_RETRIES, u'go', _serial_flush)",2,,,,,"u'go',",,,,,"u'go',"
"def volume(self, value):",2,,,,,,,,,,
opCp_Lt32 = '\x46',2,,,,,,,,,,
text=u'Problems:'),2,,,,,u'Problems:'),,,,,u'Problems:')
WRITE_VALUE = '\x04',2,,,,,,,,,,
"if arguments.pop(u""metaquery""):",2,,,,,"u""metaquery""):",,,,,"u""metaquery""):"
@_(u'RETURN expr'),2,,,,,u'RETURN,,,,,u'RETURN
"super(Gyro, self).__exit__(exc_type, exc_value, exc_traceback)",2,,,,,,,,,,
"self._introspection[u""network_name""],",2,,,,,"u""network_name""],",,,,,"u""network_name""],"
u':'.join(u'{:02X}'.format(byte) for byte in cmd[2:4]) + u'|' +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
"certificate.get(u""names"", []),",2,,,,,"u""names"",",,,,,"u""names"","
"LCX(1 if cur_mov[u'brake'] else 0),  # BRAKE",2,,,,,u'brake'],,,,,u'brake']
opInput_Read = '\x9A',2,,,,,,,,,,
"def __init__(self, expected, actual):",2,,,,,,,,,,
"(u""g'"", 1.5),",2,,,,,"u""g'"",",,,,,"u""g'"","
"self.parser.add_argument(u""-k"", u""--key"", type = argparse.FileType(u""ab+""), default = None, help = u""Key file."")",2,,,,,"u""-k"",",,,,,"u""-k"","
opMailbox_Read = '\xDA',2,,,,,,,,,,
"tone, **_3to2kwargs",2,,,,,,,,,,
"frame.grid(row=2, column=1, sticky=u'nw', rowspan=8, columnspan=2)",2,,,,,"u'nw',",,,,,"u'nw',"
BLUE = '\x02',2,,,,,,,,,,
GET_IMOTOR = '\x07',2,,,,,,,,,,
opCp_Lteq16 = '\x55',2,,,,,,,,,,
INIT_RUN = '\x18',2,,,,,,,,,,
"print u""Shaft LMC = {0} in"".format(unicode(round(shaft_lmc,4)))",2,,,,,"u""Shaft","print u""Shaft LMC = {0} in"".format(unicode(round(shaft_lmc,4)))",unicode(,,,"u""Shaft print u""Shaft LMC = {0} in"".format(unicode(round(shaft_lmc,4))) unicode("
"self._introspection[u""os_vers""] = os_vers.split('\x00')[0].decode(u""utf8"")",2,,,,,"u""os_vers""]",,,,,"u""os_vers""]"
"def person(self, query, method = u""email"", type = u""json"",",2,,,,,"u""email"",",,,,,"u""email"","
MOD = ur'%',2,,,,,,,,,,
"u'readout protect': 0x82,",2,,,,,u'readout,,,,,u'readout
for line in data.split(sep='\x0A'):,2,,,,,,,,,,
"tk.Button(self, text=u""Browse"", command=lambda *args:browse(4)),",2,,,,,"u""Browse"",",,,,,"u""Browse"","
WAIT_HORZ = '\x06',2,,,,,,,,,,
opRead8 = '\xC8',2,,,,,,,,,,
return dict((,2,,,,,,,,,,
"return bs4.BeautifulSoup(response.content, u""html.parser"")",2,,,,,"u""html.parser"")",,,,,"u""html.parser"")"
g.write(tmp+u'\n'),2,,,,,u'\n'),,,,,u'\n')
"u""sync_mode needs to be of type str""",2,,,,,"u""sync_mode",,,,,"u""sync_mode"
opObject_Return = '\x08',2,,,,,,,,,,
SYSTEM_CORRUPT_FILE = '\x03',2,,,,,,,,,,
def battery(self):,2,,,,,,,,,,
groupStyle = u''',2,,,,,u''',,,,,u'''
values = val.split(u' '),2,,,,,u' '),,,,,u' ')
opOutput_Get_Count = '\xB3',2,,,,,,,,,,
opSelect32 = '\x5E',2,,,,,,,,,,
"u'get id': 0x02,",2,,,,,u'get,,,,,u'get
opMulF = '\x1B',2,,,,,,,,,,
u'distance needs to be a number',2,,,,,u'distance,,,,,u'distance
STORE = '\x19',2,,,,,,,,,,
WIFI = u'WiFi',2,,,,,u'WiFi',,,,,u'WiFi'
"u""tones"": (",2,,,,,"u""tones"":",,,,,"u""tones"":"
SET_MOVEDOWN = '\x0A',2,,,,,,,,,,
"def _complete_len(self, progress):",2,,,,,,,,,,
ev3_path = u'../prjs/sound/tmp',2,,,,,u'../prjs/sound/tmp',,,,,u'../prjs/sound/tmp'
"def change_color(self, led_pattern):",2,,,,,,,,,,
self._device.open_path(devices[0][u'path']),2,,,,,u'path']),,,,,u'path'])
msg = u'GET /target?sn=' + serial_number + u'VMTP1.0\n' + \,2,,,,,u'GET,,,,,u'GET
"u'sphinx.ext.autodoc',",2,,,,,"u'sphinx.ext.autodoc',",,,,,"u'sphinx.ext.autodoc',"
"print f""[i] Request results for E-Mail Address based Person Lookup:""",2,,,,,,"print f""[i] Request results for E-Mail Address based Person Lookup:""",,,,"print f""[i] Request results for E-Mail Address based Person Lookup:"""
GET_POWER = '\x1D',2,,,,,,,,,,
opBp1 = '\x89',2,,,,,,,,,,
opUI_Draw = '\x84',2,,,,,,,,,,
opRead32 = '\xCA',2,,,,,,,,,,
ANY_BUTTON = '\x07',2,,,,,,,,,,
FILLRECT = '\x09',2,,,,,,,,,,
"u""ramp_up_time must be an number""",2,,,,,"u""ramp_up_time",,,,,"u""ramp_up_time"
def reflected(self):,2,,,,,,,,,,
ICON_SEARCH = '\x09',2,,,,,,,,,,
"0x69: u""SCPS"",      0x6A: u""QNX"",         0x6B: u""A/N"",",2,,,,,"u""SCPS"",",,,,,"u""SCPS"","
u'hw_version',2,,,,,u'hw_version',,,,,u'hw_version'
cur_mov[u'speed_left'] = speed,2,,,,,u'speed_left'],,,,,u'speed_left']
GET_IBATT = '\x02',2,,,,,,,,,,
"tkinter.ttk.Separator(self, orient=u'vertical').grid(column=2, row=2, rowspan=9, sticky=u'ns')",2,,,,,"u'vertical').grid(column=2,",,,,,"u'vertical').grid(column=2,"
STAMP = '\x03',2,,,,,,,,,,
"proxy = urlparse.urlparse(proxy, scheme = u""socks5"")",2,,,,,"u""socks5"")",,,,,"u""socks5"")"
step1 = cur_mov[u'step1_left'],2,,,,,u'step1_left'],,,,,u'step1_left']
def verbosity(self):,2,,,,,,,,,,
"assert port in (PORT_1, PORT_2, PORT_3, PORT_4), u""incorrect port""",2,,,,,"u""incorrect",,,,,"u""incorrect"
LED_ALL = '\x00'  # All LEDs,2,,,,,,,,,,
"ramp_up_time=self._current_movement[u'ramp_up_time'],",2,,,,,"u'ramp_up_time'],",,,,,"u'ramp_up_time'],"
"f'{"" ""*tail}] ...',; sys.stdout.write(u'')",2,,,,,u''),,,,,u'')
"rb1.grid(row=3, column=3, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
"super(Gyro, self).__del__()",2,,,,,,,,,,
opOr8 = '\x20'  # LOGIC,2,,,,,,,,,,
"(u""c''"", 3)",2,,,,,"u""c''"",",,,,,"u""c''"","
u'percentage',2,,,,,u'percentage',,,,,u'percentage'
"UDPSock.sendto(u' '.encode(u'utf-8'), (addr[0], int(port)))",2,,,,,"u' '.encode(u'utf-8'),",,,,,"u' '.encode(u'utf-8'),"
"(u'nonassoc', NE, LT, LE, GT, GE, EQEQ, XOR, OR),",2,,,,,"u'nonassoc',",,,,,"u'nonassoc',"
"_fields_ = [(u""_copied"", c_ubyte, 1),",2,,,,,"u""_copied"",",,,,,"u""_copied"","
src2a = u'sensor_output_ori.csv',2,,,,,u'sensor_output_ori.csv',,,,,u'sensor_output_ori.csv'
READY_PCT = '\x1B',2,,,,,,,,,,
'\x00\x00',2,,,,,,,,,,
"u'expr LSHIFT expr',",2,,,,,u'expr,,,,,u'expr
"print u""Clearance = {0} in"".format(unicode(round(clearance,4)))",2,,,,,"u""Clearance","print u""Clearance = {0} in"".format(unicode(round(clearance,4)))",unicode(,,,"u""Clearance print u""Clearance = {0} in"".format(unicode(round(clearance,4))) unicode("
GREEN = '\x01',2,,,,,,,,,,
SET_CONNECTION = '\x07',2,,,,,,,,,,
TERM_SLOT = '\x03',2,,,,,,,,,,
for port in xrange(len(ports)):,2,,,xrange(,,,,,,,xrange(
"0x4E: u""WB-MON"",    0x4F: u""WB-EXPAK"",    0x50: u""ISO-IP"",",2,,,,,"u""WB-MON"",",,,,,"u""WB-MON"","
"u'voltage',",2,,,,,"u'voltage',",,,,,"u'voltage',"
info2=unicode(info2),2,,,,,,,unicode(,,,unicode(
def color(self):,2,,,,,,,,,,
"group.add_argument(u""-t"", u""--timeout"", type = int, default = None, help = u""Float, giving in seconds the socket timeout. Setting this argument to 0 is the same as specifying the --blocking argument."")",2,,,,,"u""-t"",",,,,,"u""-t"","
from __future__ import with_statement,2,,__future__ ,,,,,,,,__future__ 
"super(CloudSnarf, self).__init__()",2,,,,,,,,,,
TST_POLL_MODE2 = '\x15',2,,,,,,,,,,
"0x7C: u""IS-IS"",     0x7D: u""FIRE"",        0x7E: u""CRTP"",",2,,,,,"u""IS-IS"",",,,,,"u""IS-IS"","
"reply = str(self._device.read(_EP_IN, 1024, 0))",2,,,,,,,,,,
print u'Yes clicked.',2,,,,,u'Yes,print u'Yes clicked.',,,,u'Yes print u'Yes clicked.'
CLOSE_FILEHANDLE = '\x98',2,,,,,,,,,,
opJr_LtF = '\x67',2,,,,,,,,,,
"pcap = raw_input(u""Enter the name of your pcap file in this folder: "")",2,,,,,"u""Enter",,,,raw_input(,"u""Enter raw_input("
print u'Error Serial2',2,,,,,u'Error,print u'Error Serial2',,,,u'Error print u'Error Serial2'
raise EnvironmentError(u'Unsupported platform'),2,,,,,u'Unsupported,,,,,u'Unsupported
TEXTBOX_READ = '\x15',2,,,,,,,,,,
"print u""Shaft MMC = {0} in"".format(unicode(round(shaft_mmc,4)))",2,,,,,"u""Shaft","print u""Shaft MMC = {0} in"".format(unicode(round(shaft_mmc,4)))",unicode(,,,"u""Shaft print u""Shaft MMC = {0} in"".format(unicode(round(shaft_mmc,4))) unicode("
SMALL_FONT = '\x01',2,,,,,,,,,,
"return self.from_buffer_copy(buffer[:2] if isinstance(buffer, str) else buffer)",2,,,,,,,,,,
u'blue',2,,,,,u'blue',,,,,u'blue'
u'concurrent movement in progress',2,,,,,u'concurrent,,,,,u'concurrent
"u'expr RSHIFT expr',",2,,,,,u'expr,,,,,u'expr
u'xx:xx:xx.xxxxxx Recv 0x|03:00|2B:00|02|' + u'\n',2,,,,,u'xx:xx:xx.xxxxxx,,,,,u'xx:xx:xx.xxxxxx
opOr16 = '\x21',2,,,,,,,,,,
DOTLINE = '\x15',2,,,,,,,,,,
opAdd16 = '\x11',2,,,,,,,,,,
"self._introspection[u""os_build""] = os_build.split('\x00')[0].decode(u""utf8"")",2,,,,,"u""os_build""]",,,,,"u""os_build""]"
u'Either protocol or ev3_obj needs to be given',2,,,,,u'Either,,,,,u'Either
"0x62: u""ENCAP"",     0x64: u""GMTP"",        0x65: u""IFMP"",",2,,,,,"u""ENCAP"",",,,,,"u""ENCAP"","
opJr_EqF = '\x6F',2,,,,,,,,,,
INVERSERECT = '\x10',2,,,,,,,,,,
def port_right(self):,2,,,,,,,,,,
GET_ERROR = '\x02',2,,,,,,,,,,
"@pytest.fixture(scope=u'module', params=[u'/dev/tty.usbserial-A9E59BZN'])",2,,,,,"u'module',",,,,,"u'module',"
"assert tld is None or isinstance(tld, unicode), \",2,,,,,,,,,,
raise SensorError(u'rgb works only with EV3 color sensor'),2,,,,,u'rgb,,,,,u'rgb
"def ramp_up_time(self, value):",2,,,,,,,,,,
if 'tracking_callback' in _3to2kwargs: tracking_callback = _3to2kwargs['tracking_callback']; del _3to2kwargs['tracking_callback'],2,,,,,,,,,,
@_(u'expr'),2,,,,,u'expr'),,,,,u'expr')
opInput_Device = '\x99',2,,,,,,,,,,
"super(Client, self).__init__()",2,,,,,,,,,,
"return utils.data(u'Float',float(p.FLOAT)*-1)",2,,,,,"u'Float',float(p.FLOAT)*-1)",,,,,"u'Float',float(p.FLOAT)*-1)"
PACK = '\x15',2,,,,,,,,,,
dir=os.getcwdu(),2,,,,,,,,,,
else: ramp_down =  15,2,,,,,,,,,,
opJr_Gt8 = '\x68',2,,,,,,,,,,
u'erase': u'Erase memory enough to store firmware',2,,,,,u'erase':,,,,,u'erase':
"btn2=tk.Button(self, text=u""Done"",",2,,,,,"u""Done"",",,,,,"u""Done"","
"u'start_motor_pos': data,",2,,,,,u'start_motor_pos':,,,,,u'start_motor_pos':
FLOOR = '\x03'  # !< Floor r = floor(x),2,,,,,,,,,,
")[0].split('\x00')[0].decode(u""ascii"")",2,,,,,"u""ascii"")",,,,,"u""ascii"")"
"60 * song[u""beats_per_bar""] / song[u""tempo""],",2,,,,,"u""beats_per_bar""]",,,,,"u""beats_per_bar""]"
"print f'Illegal character {t.value[0]}, in line {self.lineno}, index {self.index}'",2,,,,,,"print f'Illegal character {t.value[0]}, in line {self.lineno}, index {self.index}'",,,,"print f'Illegal character {t.value[0]}, in line {self.lineno}, index {self.index}'"
"u""reached end of file "" +",2,,,,,"u""reached",,,,,"u""reached"
"u""ramp_down must be an int""",2,,,,,"u""ramp_down",,,,,"u""ramp_down"
"self._introspection[u""name""] = name.split('\x00')[0].decode(u""utf8"")",2,,,,,"u""name""]",,,,,"u""name""]"
if sys.platform.startswith(u'win'):,2,,,,,u'win'):,,,,,u'win'):
"import urllib2, urllib, urlparse",2,,,,,,,,,,
GET_USBSTICK = '\x1F',2,,,,,,,,,,
@_(u'statements statement'),2,,,,,u'statements,,,,,u'statements
def sync_mode(self):,2,,,,,,,,,,
"elif direction == u""o"":",2,,,,,"u""o"":",,,,,"u""o"":"
"command=lambda: self.controller.show_frame(u""Step0""))",2,,,,,"u""Step0""))",,,,,"u""Step0""))"
TST_RAM_CHECK = '\x17',2,,,,,,,,,,
dataArray = pullData.split(u'\n'),2,,,,,u'\n'),,,,,u'\n')
"def reset(self, angle=0):",2,,,,,,,,,,
"(master_doc, u'ev3_dc', u'ev3_dc Documentation',",2,,,,,"u'ev3_dc',",,,,,"u'ev3_dc',"
COLON = ur':',2,,,,,,,,,,
"if self._physical_ev3._introspection[u""sensors""][self._port][u'used_by'] is not None:",2,,,,,"u""sensors""][self._port][u'used_by']",,,,,"u""sensors""][self._port][u'used_by']"
"clearance = vin(u""Clearance"", u""?"", units=u""in"")",2,,,,,"u""Clearance"",",,,,,"u""Clearance"","
"0x88: u""UDPLite"",   0x89: u""MPLS-in-IP"",  0x86: u""RSVP-E2E-IGNORE"",",2,,,,,"u""UDPLite"",",,,,,"u""UDPLite"","
"u""song must have a key 'beats_per_bar'""",2,,,,,"u""song",,,,,"u""song"
def sensors(self):,2,,,,,,,,,,
SICON_BATT_0 = '\x05',2,,,,,,,,,,
"value = self.builder.fcmp_ordered(u'!=',lhs,rhs)",2,,,,,"u'!=',lhs,rhs)",,,,,"u'!=',lhs,rhs)"
opOutput_Position = '\xAB',2,,,,,,,,,,
opInfo = '\x7C'  # VM,2,,,,,,,,,,
"return (u'Def',{u'name':name,u'return':ret,u'body':body, u'def_params':def_params if def_params else []})",2,,,,,"u'Def',{u'name':name,u'return':ret,u'body':body,",,,,,"u'Def',{u'name':name,u'return':ret,u'body':body,"
"def execute(self, file, *args):",2,,,,,,,,,,
"inpt = raw_input().encode(u""ascii"")",2,,,,,"u""ascii"")",,,,raw_input(,"u""ascii"") raw_input("
opMailbox_Test = '\xDB',2,,,,,,,,,,
"def __init__(self, address = u""127.0.0.1"", port = u""default"", password = None, chroot_path = None, protocolinfo_response=None):",2,,,,,"u""127.0.0.1"",",,,,,"u""127.0.0.1"","
opMailbox_Ready = '\xDC',2,,,,,,,,,,
GET_FOLDERNAME = '\x17',2,,,,,,,,,,
if self._current_movement[u'op'] == u'Time_Speed':,2,,,,,u'op'],,,,,u'op']
def tracking_callback(self):,2,,,,,,,,,,
"return (u'Until',{u'test':test,u'body':body})",2,,,,,"u'Until',{u'test':test,u'body':body})",,,,,"u'Until',{u'test':test,u'body':body})"
"self._introspection[u""volume""],",2,,,,,"u""volume""],",,,,,"u""volume""],"
"u""msg_cnt needs to be of type bytes""",2,,,,,"u""msg_cnt",,,,,"u""msg_cnt"
"return self._physical_ev3._introspection[u""volume""]",2,,,,,"u""volume""]",,,,,"u""volume""]"
"u'expr GT expr',",2,,,,,u'expr,,,,,u'expr
"self._introspection[u""fw_vers""] = fw_vers.split('\x00')[0].decode(u""utf8"")",2,,,,,"u""fw_vers""]",,,,,"u""fw_vers""]"
self.conButton = QPushButton(u'Measure'),2,,,,,u'Measure'),,,,,u'Measure')
"__all__ = [u""CloudSnarf""]",2,,,,,"u""CloudSnarf""]",,,,,"u""CloudSnarf""]"
u'volume must be between 0 and 100',2,,,,,u'volume,,,,,u'volume
"edTxt2.config(state=u""readonly"")",2,,,,,"u""readonly"")",,,,,"u""readonly"")"
opJr_Lteq8 = '\x74',2,,,,,,,,,,
if 'dark' in kwargs: dark = kwargs['dark']; del kwargs['dark'],2,,,,,,,,,,
):,2,,,,,,,,,,
opSound_Test = '\x95',2,,,,,,,,,,
Octnumber = ur'0[oO](?:_?[0-7])+',2,,,,,,,,,,
run_command = commands.add_parser(u'run'),2,,,,,u'run'),,,,,u'run')
"for raw, white in izip(rgb_raw, self._rgb_white_balance_raw)",2,,,,,,,,,,
"btn=[   tk.Button(self, text=u""Browse"", command=lambda *args:browse(0)),",2,,,,,"u""Browse"",",,,,,"u""Browse"","
self._send_command(self._COMMAND[u'get id']),2,,,,,u'get,,,,,u'get
u'reply with msg_cnt ' +,2,,,,,u'reply,,,,,u'reply
"(u""c''"", 0.25),",2,,,,,"u""c''"",",,,,,"u""c''"","
ops_get = ''.join((,2,,,,,,,,,,
def _abort(bar_thread = None):,2,,,,,,,,,,
BUSY = '\x01'  # Busy - try again,2,,,,,,,,,,
FAVOUR_ITEMS = '\x0A',2,,,,,,,,,,
"elif clearance == u""?"" and hole_lmc != u""?"" and shaft_lmc != u""?"":",2,,,,,"u""?""",,,,,"u""?"""
"for key, sensor in self._physical_ev3._introspection[u""sensors""].items())",2,,,,,"u""sensors""].items())",,,,,"u""sensors""].items())"
TO_BRICK = '\x0E',2,,,,,,,,,,
"''.join([(size - 1).to_bytes(1, u'big'), self._checksum(size - 1)]))",2,,,,,"u'big'),",,,,,"u'big'),"
ICON_QUESTIONMARK = '\x1B',2,,,,,,,,,,
@_(u'UNTIL expr LBRACE statements RBRACE'),2,,,,,u'UNTIL,,,,,u'UNTIL
"bumps = struct.unpack(u'<f', reply[:4])[0]",2,,,,,"u'<f',",,,,,"u'<f',"
ICON_NONE = '\x21',2,,,,,,,,,,
"0x4B: u""PVP"",       0x4C: u""BR-SAT-MON"",  0x4D: u""SUN-ND"",",2,,,,,"u""PVP"",",,,,,"u""PVP"","
"GyroState = namedtuple(u'GyroState', [",2,,,,,"u'GyroState',",,,,,"u'GyroState',"
"u'expr LT expr',",2,,,,,u'expr,,,,,u'expr
"struct.pack(u'<hh', len(cmd) + 3, msg_cnt),",2,,,,,"u'<hh',",,,,,"u'<hh',"
[port_motor_input(self._port_right)][u'used_by'] is not None:,2,,,,,u'used_by'],,,,,u'used_by']
"def start(self, quiet = True, msg_prefix = u"""", msg_color = u""yellow"", **config):",2,,,,,"u"""",",,,,,"u"""","
pygments_style = u'sphinx',2,,,,,u'sphinx',,,,,u'sphinx'
def clear(self):,2,,,,,,,,,,
if '_locked' in _3to2kwargs: _locked = _3to2kwargs['_locked']; del _3to2kwargs['_locked'],2,,,,,,,,,,
"def stop_as_task(self, **_3to2kwargs):",2,,,,,,,,,,
"load_command.add_argument(u'-e', u'--erase', action=u'store_true',",2,,,,,"u'-e',",,,,,"u'-e',"
"u""song must have a key 'tempo'""",2,,,,,"u""song",,,,,"u""song"
READ_BYTES = '\x1C',2,,,,,,,,,,
"u'ramp_down': ramp_down,",2,,,,,u'ramp_down':,,,,,u'ramp_down':
"except TypeError, e:",2,,,,,,,,,,
for n in xrange(4),2,,,xrange(,,,,,,,xrange(
SICON_CHARGING = '\x00',2,,,,,,,,,,
manifest_list.append(data_date[i]+u'_manifest.safe'),2,,,,,u'_manifest.safe'),,,,,u'_manifest.safe')
TST_WRITE_UART = '\x0F',2,,,,,,,,,,
"ax1.plot(xar,yar4,label=u'Humidity',linewidth=2)",2,,,,,"u'Humidity',linewidth=2)",,,,,"u'Humidity',linewidth=2)"
SICON_BT_CONNECTED = '\x0A',2,,,,,,,,,,
"data = ""\x00""",2,,,,,,,,,,
NO_NOTSEL = '\x02',2,,,,,,,,,,
tmp2=tmp1[0].split(u'/'),2,,,,,u'/'),,,,,u'/')
"assert isinstance(value, int), u""polarity_left needs to be of type int""",2,,,,,"u""polarity_left",,,,,"u""polarity_left"
BTTYPE_BRICK = '\x05'  # Bluetooth type BRICK,2,,,,,,,,,,
if self._current_movement[u'op'] != u'Step_Speed':,2,,,,,u'op'],,,,,u'op']
opJr_Lteq16 = '\x75',2,,,,,,,,,,
"@pytest.fixture(scope=u'module', params=[u'fw.bin'])",2,,,,,"u'module',",,,,,"u'module',"
print f'MCU will be running from {args.address}.',2,,,,,,print f'MCU will be running from {args.address}.',,,,print f'MCU will be running from {args.address}.'
ICON_VISIBILITY = '\x0E',2,,,,,,,,,,
TO_COPY = '\x14',2,,,,,,,,,,
opCp_Gt16 = '\x49',2,,,,,,,,,,
sensor_str = u'EV3_Color',2,,,,,u'EV3_Color',,,,,u'EV3_Color'
"self._introspection[u""network_ip_adr""]",2,,,,,"u""network_ip_adr""]",,,,,"u""network_ip_adr""]"
"socket_kinds.add_argument(u""--raw"", action = u""store_true"", help = u""Use Raw Sockets instead of TCP (SocketKind: SOCK_RAW)."")",2,,,,,"u""--raw"",",,,,,"u""--raw"","
POWER = '\x1D',2,,,,,,,,,,
self._current_movement[u'last_time'] = time.time(),2,,,,,u'last_time'],,,,,u'last_time']
opOutput_Step_Speed = '\xAE',2,,,,,,,,,,
"content=content.replace(u'master_image = ',",2,,,,,u'master_image,,,,,u'master_image
DATA_F = '\x03'  # DATAF (don't change),2,,,,,,,,,,
"0x06: u""TCP"",       0x07: u""CBT"",         0x08: u""EGP"",",2,,,,,"u""TCP"",",,,,,"u""TCP"","
opMemory_Usage = '\xC5',2,,,,,,,,,,
self.create_dir(u'../prjs/sound'),2,,,,,u'../prjs/sound'),,,,,u'../prjs/sound')
GET_FW_BUILD = '\x0B',2,,,,,,,,,,
"u'expr EQEQ expr',",2,,,,,u'expr,,,,,u'expr
"self._physical_ev3._introspection[u""sensors""][PORT_A_SENSOR][u""type""],",2,,,,,"u""sensors""][PORT_A_SENSOR][u""type""],",,,,,"u""sensors""][PORT_A_SENSOR][u""type""],"
opPort_Cnv_Output = '\x61',2,,,,,,,,,,
TYPE_DATALOG = '\x05',2,,,,,,,,,,
ICON_QUESTION = '\x1B',2,,,,,,,,,,
UNPACK = '\x16',2,,,,,,,,,,
"u"" when writing file "" +",2,,,,,"u"" when",,,,,"u"" when"
@_(ur'#.*'),2,,,,,,,,,,
opJr_Gteq32 = '\x7A',2,,,,,,,,,,
elif branch[0] == u'Expression':,2,,,,,u'Expression':,,,,,u'Expression':
CONTINUE_LIST_FILES = '\x9A',2,,,,,,,,,,
"u'baudrate': 115200,",2,,,,,u'baudrate':,,,,,u'baudrate':
"frame.grid(row=0, column=0, sticky=u""nsew"")",2,,,,,"u""nsew"")",,,,,"u""nsew"")"
GET_WARNING = '\x11',2,,,,,,,,,,
else: port_left =  PORT_A,2,,,,,,,,,,
TST_DISABLE_UART = '\x12',2,,,,,,,,,,
for i in xrange (len(info)):,2,,,xrange (,,,,,,,xrange (
SET_BACK_BLOCK = '\x0A',2,,,,,,,,,,
ADDRESS = '\x0D',2,,,,,,,,,,
"def __new__(self, buffer = """"):",2,,,,,,,,,,
ops_stop = ''.join((,2,,,,,,,,,,
speed = cur_mov[u'speed_right'],2,,,,,u'speed_right'],,,,,u'speed_right']
help=_ARGS_HELP[u'memmap']),2,,,,,u'memmap']),,,,,u'memmap'])
ICON_TEXT = '\x18',2,,,,,,,,,,
if line == '':,2,,,,,,,,,,
XOR]),2,,,,,,,,,,
LSHIFT = ur'<<',2,,,,,,,,,,
"string = string.replace(u'\\n',u'\n\0')",2,,,,,"u'\\n',u'\n\0')",,,,,"u'\\n',u'\n\0')"
"g.write(u""awk 'NR>1 {print $0}' < ../raw_orig/""",2,,,,,"u""awk","print $0}' < ../raw_orig/""",,,,"u""awk print $0}' < ../raw_orig/"""
"'\x1f\x40',  # 8000 (sampling rate)",2,,,,,,,,,,
raise SensorError(u'no gyrosensor connected at ' + port_str),2,,,,,u'no,,,,,u'no
"if arguments.get(u""tcp""):",2,,,,,"u""tcp""):",,,,,"u""tcp""):"
"btn_scene=tk.Button(self, text=u""Display"", command=lambda *args:Display(0))",2,,,,,"u""Display"",",,,,,"u""Display"","
mass_erase = '\xff\xff',2,,,,,,,,,,
"func = ir.Function(self.module, fnty, u'printf')",2,,,,,u'printf'),,,,,u'printf')
if 'back' in _3to2kwargs: back = _3to2kwargs['back']; del _3to2kwargs['back'],2,,,,,,,,,,
"(u""d'"", 0.75),",2,,,,,"u""d'"",",,,,,"u""d'"","
import tkMessageBox as tkMessageBox,2,,,,,,,,,,
opOutput_Clr_Count = '\xB2',2,,,,,,,,,,
TYPE_BYTECODE = '\x03',2,,,,,,,,,,
GET_OS_VERS = '\x03',2,,,,,,,,,,
COMPARE = '\x03',2,,,,,,,,,,
help=_ARGS_HELP[u'erase']),2,,,,,u'erase']),,,,,u'erase'])
"self.ast = (u'Module',{u'body':[]})",2,,,,,"u'Module',{u'body':[]})",,,,,"u'Module',{u'body':[]})"
"self._physical_ev3._introspection[u""os_build""],",2,,,,,"u""os_build""],",,,,,"u""os_build""],"
"for field in root.replace(self.location, u"""", 1)[1:].replace(u""\\"", u""/"").split(u""/""):",2,,,,,"u"""",",,,,,"u"""","
else: duration = None,2,,,,,,,,,,
style.use(u'ggplot'),2,,,,,u'ggplot'),,,,,u'ggplot')
"console.print(f""[!] {type(e).__name__}: ({filename.replace(csf.location, '.')} line #{line} in {function})"", color = u""red"")",2,"print(f""[!]",,,,"u""red"")",,,,,"print(f""[!] u""red"")"
opSub8 = '\x14',2,,,,,,,,,,
"certificate.get(u""common_name"", []),",2,,,,,"u""common_name"",",,,,,"u""common_name"","
u'check needs to be of type bool',2,,,,,u'check,,,,,u'check
opCp_Ne32 = '\x52',2,,,,,,,,,,
def rgb_raw(self):,2,,,,,,,,,,
u'radius needs to be a positive number',2,,,,,u'radius,,,,,u'radius
opTimer_Wait = '\x85'  # TIMER,2,,,,,,,,,,
"parity=self._DEFAULT_PARAMETERS[u'parity'],",2,,,,,"u'parity'],",,,,,"u'parity'],"
"u'<2i2B32s16s8s8s12s12s',",2,,,,,"u'<2i2B32s16s8s8s12s12s',",,,,,"u'<2i2B32s16s8s8s12s12s',"
"angle, rate = struct.unpack(u'<2i', reply)",2,,,,,"u'<2i',",,,,,"u'<2i',"
opJr_Eq32 = '\x6E',2,,,,,,,,,,
if 'brake' in _3to2kwargs: brake = _3to2kwargs['brake']; del _3to2kwargs['brake'],2,,,,,,,,,,
"def _ops_pos(self, global_offset=0):",2,,,,,,,,,,
if self._current_movement[u'op'] != u'Speed':,2,,,,,u'op'],,,,,u'op']
"angle,",2,,,,,,,,,,
"if os.name == u""nt"":",2,,,,,"u""nt"":",,,,,"u""nt"":"
"self.load_file(path + u'.rsf', u'../prjs/sound/tmp.rsf')",2,,,,,"u'.rsf',",,,,,"u'.rsf',"
"super(Infrared, self).__init__(",2,,,,,,,,,,
"0x51: u""VMTP"",      0x52: u""SECURE-VMTP"", 0x53: u""VINES"",",2,,,,,"u""VMTP"",",,,,,"u""VMTP"","
u'**': [,2,,,,,u'**':,,,,,u'**':
"self.destination = socket.inet_ntoa(struct.pack(u""<L"", self.raw_destination))",2,,,,,"u""<L"",",,,,,"u""<L"","
"0x8B: u""HIP"",       0x8C: u""Shim6"",       0x8D: u""WESP"",",2,,,,,"u""HIP"",",,,,,"u""HIP"","
opAddF = '\x13',2,,,,,,,,,,
MODE_KEEP = '\x21',2,,,,,,,,,,
GET_SIZE = '\x01',2,,,,,,,,,,
"resp = resp1.decode(u""utf-8"") + resp2.decode(u""utf-8"")",2,,,,,"u""utf-8"")",,,,,"u""utf-8"")"
"return utils.data(u'Number',int(p.NUMBER))",2,,,,,"u'Number',int(p.NUMBER))",,,,,"u'Number',int(p.NUMBER))"
"def __init__(self, buffer = """"):",2,,,,,,,,,,
"header(len(data) + safety_gap) + data + '\x80' * safety_gap,",2,,,,,,,,,,
OR = ur'\|',2,,,,,,,,,,
"def company(self, query, sort = u""relevance"", location = u"""", locality = u"""", region = u"""", country = u"""", prettyPrint = False):",2,,,,,"u""relevance"",",,,,,"u""relevance"","
"self._introspection[u""network_mac_adr""][i:i+2]",2,,,,,"u""network_mac_adr""][i:i+2]",,,,,"u""network_mac_adr""][i:i+2]"
"assert response[u""status""] == u""success"", Exception(f""{' - '.join(f'{key.title()}: {value}' for key, value in response.items())}"")",2,,,,,"u""status""]",,,,,"u""status""]"
GET_FORMAT = '\x02',2,,,,,,,,,,
PRESSED = '\x09',2,,,,,,,,,,
"resolver.use_edns(arguments.get(u""edns""), arguments.get(u""edns_flags""), arguments.get(u""edns_payload""))",2,,,,,"u""edns""),",,,,,"u""edns""),"
Decnumber = ur'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)',2,,,,,,,,,,
"self.parser.add_argument(u""-eP"", u""--edns-payload"", type=int, default=0, help=u""The EDNS payload size (Defaults to 0)."")",2,,,,,"u""-eP"",",,,,,"u""-eP"","
"self, **_3to2kwargs",2,,,,,,,,,,
+ u' tmp_file ../raw_orig/s1a-aux-cal.xml > ./',2,,,,,u' tmp_file,,,,,u' tmp_file
[port_motor_input(self._port_left)][u'used_by'] is not None:,2,,,,,u'used_by'],,,,,u'used_by']
print u'The llvm IR generated is:',2,,,,,u'The,print u'The llvm IR generated is:',,,,u'The print u'The llvm IR generated is:'
assert u':'.join(u'{:02X}'.format(byte) for byte in msg_cnt_1) == u'2F:00',2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
if 'ramp_up' in _3to2kwargs: ramp_up = _3to2kwargs['ramp_up']; del _3to2kwargs['ramp_up'],2,,,,,,,,,,
"u""ramp_down must be positive""",2,,,,,"u""ramp_down",,,,,"u""ramp_down"
"(u""g'"", 4),",2,,,,,"u""g'"",",,,,,"u""g'"","
DATA_32 = '\x02'  # DATA32 (don't change),2,,,,,,,,,,
"if locality: url += u""&locality="" + locality",2,,,,,"u""&locality=""",,,,,"u""&locality="""
"if __name__ == u""__main__"":",2,,,,,"u""__main__"":",,,,,"u""__main__"":"
"self.parser.add_argument(u""-r"", u""--retry-servfail"", action=u""store_true"", help=u""Retry a nameserver if it says SERVFAIL."")",2,,,,,"u""-r"",",,,,,"u""-r"","
"u'ramp_down_time': ramp_down_time,",2,,,,,u'ramp_down_time':,,,,,u'ramp_down_time':
"timeout = None, blocking = False, proxy = u"""", rdns = True):",2,,,,,"u"""",",,,,,"u"""","
ARROW_ICON = '\x04'  # 8x12_miniArrows.bmp,2,,,,,,,,,,
"self._introspection[u""mem_total""],",2,,,,,"u""mem_total""],",,,,,"u""mem_total""],"
"self._physical_ev3._introspection[u""sensors""][PORT_4][u""type""],",2,,,,,"u""sensors""][PORT_4][u""type""],",,,,,"u""sensors""][PORT_4][u""type""],"
"console.print(f""    {repr(text)}"", color = u""red"", dark = True, parse = False)",2,"print(f""",,,,"u""red"",",,,,,"print(f"" u""red"","
"print f""[i] Request results for Twitter Username based Person Lookup:""",2,,,,,,"print f""[i] Request results for Twitter Username based Person Lookup:""",,,,"print f""[i] Request results for Twitter Username based Person Lookup:"""
"super(Infrared, self).__exit__(exc_type, exc_value, exc_traceback)",2,,,,,,,,,,
SICON_WIFI_CONNECTED = '\x0F',2,,,,,,,,,,
"memory_map = None,",2,,,,,,,,,,
"self.parser.add_argument(u""-e"", u""--edns"", type=int, default=-1, help=u""The EDNS level to use (Defaults to -1, no Edns)."")",2,,,,,"u""-e"",",,,,,"u""-e"","
assert reply == u'2D:00',2,,,,,u'2D:00',,,,,u'2D:00'
print packet,2,,,,,,print packet,,,,print packet
TST_READ_PINS = '\x0C',2,,,,,,,,,,
"0x56: u""DGP"",       0x57: u""TCF"",         0x58: u""EIGRP"",",2,,,,,"u""DGP"",",,,,,"u""DGP"","
ramp_down = _3to2kwargs['ramp_down']; del _3to2kwargs['ramp_down'],2,,,,,,,,,,
"self.controller.show_frame(u""Step0"")",2,,,,,"u""Step0"")",,,,,"u""Step0"")"
"print u""\nFinished outputing raw audio: %s"" % out_file",2,,,,,"u""\nFinished","print u""\nFinished outputing raw audio: %s"" % out_file",,,,"u""\nFinished print u""\nFinished outputing raw audio: %s"" % out_file"
"pullData = open(filename,u""r"").read()",2,,,,,"u""r"").read()",,,,,"u""r"").read()"
if path.endswith(u'.rsf'):,2,,,,,u'.rsf'):,,,,,u'.rsf'):
opProgram_Stop = '\x02',2,,,,,,,,,,
"kwargs={u'repeat': False, u'volume': volume},",2,,,,,u'repeat':,,,,,u'repeat':
raise AttributeError(u'unknown tone: ' + tone),2,,,,,u'unknown,,,,,u'unknown
u'Protocol: ' + protocol,2,,,,,u'Protocol:,,,,,u'Protocol:
DEVCMD_RESET = '\x11'  # UART device reset,2,,,,,,,,,,
opLabel = '\x0D',2,,,,,,,,,,
"def speed(self, value):",2,,,,,,,,,,
ICON_UNKNOWN = '\x06'  # Bluetooth type UNKNOWN,2,,,,,,,,,,
"__doc__ = u""Multi class module to interact with tor processes, hidden services, sockets, etc ...""",2,,,,,"u""Multi",,,,,"u""Multi"
"@_retry(_RETRIES, u'DFU init', _serial_flush)",2,,,,,u'DFU,,,,,u'DFU
u'{:02X}'.format(,2,,,,,u'{:02X}'.format(,,,,,u'{:02X}'.format(
else: _locked = False,2,,,,,,,,,,
"if hasattr(sys, u""_MEIPASS""):",2,,,,,"u""_MEIPASS""):",,,,,"u""_MEIPASS""):"
if 'prefix' in kwargs: prefix = kwargs['prefix']; del kwargs['prefix'],2,,,,,,,,,,
"value = self.builder.icmp_signed(u'!=',lhs,rhs)",2,,,,,"u'!=',lhs,rhs)",,,,,"u'!=',lhs,rhs)"
"assert isinstance(led_pattern, str), \",2,,,,,,,,,,
"rbtn=tk.Checkbutton(self, text=u""Not use."",",2,,,,,"u""Not",,,,,"u""Not"
GET_CLICK = '\x0F',2,,,,,,,,,,
"for i in xrange(0, 100):",2,,,xrange(,,,,,,,xrange(
if 'slow' in _3to2kwargs: slow = _3to2kwargs['slow']; del _3to2kwargs['slow'],2,,,,,,,,,,
opCp_LtF = '\x47',2,,,,,,,,,,
"size = int.from_bytes(self._serial_read(1), u'big') + 1",2,,,,,u'big'),,,,,u'big')
"u'EV3_IR',",2,,,,,"u'EV3_IR',",,,,,"u'EV3_IR',"
DEL_LINEFEED = '\x06'  # Use line feed as delimiter,2,,,,,,,,,,
"u""error "" +",2,,,,,"u""error",,,,,"u""error"
opRl32 = '\x2E',2,,,,,,,,,,
assert exc.args[0] == u'direct command 2B:00 replied error',2,,,,,u'direct,,,,,u'direct
opCp_Gt32 = '\x4A',2,,,,,,,,,,
def name(self):,2,,,,,,,,,,
_SYSTEM_COMMAND_REPLY = '\x01',2,,,,,,,,,,
opMove16_32 = '\x36',2,,,,,,,,,,
GET_CONNECTION = '\x0C',2,,,,,,,,,,
"if sercon1 == u""OK"":",2,,,,,"u""OK"":",,,,,"u""OK"":"
"u'brake': brake,",2,,,,,u'brake':,,,,,u'brake':
PRESS = '\x05',2,,,,,,,,,,
"0x6C: u""IPComp"",    0x6D: u""SNP"",         0x6E: u""Compaq-Peer"",",2,,,,,"u""IPComp"",",,,,,"u""IPComp"","
TST_CLOSE_MODE2 = '\x16',2,,,,,,,,,,
type_str = u'EV3_LARGE_MOTOR',2,,,,,u'EV3_LARGE_MOTOR',,,,,u'EV3_LARGE_MOTOR'
ICON_BRICK1 = '\x22',2,,,,,,,,,,
u'mac_adr',2,,,,,u'mac_adr',,,,,u'mac_adr'
"def write_file(self, path, data, **_3to2kwargs):",2,,,,,,,,,,
FILLWINDOW = '\x13',2,,,,,,,,,,
"btn_pwd=tk.Button(self, text=u""Get pwd"", command=Get_pwd)",2,,,,,"u""Get",,,,,"u""Get"
"f'{"" ""*self._incomplete_len(progress)}] {progress}%',; sys.stdout.write(u'')",2,,,,,u''),,,,,u'')
"0x03: u""GGP"",       0x04: u""IP-in-IP"",    0x05: u""ST"",",2,,,,,"u""GGP"",",,,,,"u""GGP"","
class ProgressBar(object):,2,,,,,,,,,,
self.dhumVal = QLabel(unicode(y4) +  u' %' ),2,,,,,u' %',,unicode(,,,u' %' unicode(
"console.print(data.decode(u""ascii"", errors=u""backslashreplace""))",2,"print(data.decode(u""ascii"",",,,,"u""ascii"",",,,,,"print(data.decode(u""ascii"", u""ascii"","
else: delta_time =  None,2,,,,,,,,,,
"frame=tk.LabelFrame(self, text=u'Sub-swath')",2,,,,,u'Sub-swath'),,,,,u'Sub-swath')
self.atemLabel2 = QLabel(u'Analog Temperature2'),2,,,,,u'Analog,,,,,u'Analog
config[key] = unicode(value),2,,,,,,,unicode(,,,unicode(
u':'.join(u'{:02X}'.format(byte) for byte in cmd[7:]) + u'|',2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
"erase_command.add_argument(u'-s', u'--size', default=None,",2,,,,,"u'-s',",,,,,"u'-s',"
"elif tone.endswith(u""''""):",2,,,,,"u""''""):",,,,,"u""''""):"
"u'B',",2,,,,,"u'B',",,,,,"u'B',"
if 'lang' in _3to2kwargs: lang = _3to2kwargs['lang']; del _3to2kwargs['lang'],2,,,,,,,,,,
u'EV3_ULTRASONIC',2,,,,,u'EV3_ULTRASONIC',,,,,u'EV3_ULTRASONIC'
"u'64s',",2,,,,,"u'64s',",,,,,"u'64s',"
else: _control =  False,2,,,,,,,,,,
"u'back': back,",2,,,,,u'back':,,,,,u'back':
ICON_PHONE = '\x04'  # Bluetooth type PHONE,2,,,,,,,,,,
OPEN_WRITE = '\x02',2,,,,,,,,,,
"out_file = (u""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s"" % self.outfile)",2,,,,,"u""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s""",,,,,"u""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s"""
"self._physical_ev3._introspection[u""sensors""][PORT_1][u""type""],",2,,,,,"u""sensors""][PORT_1][u""type""],",,,,,"u""sensors""][PORT_1][u""type""],"
"u""speed must be lower or equal 100""",2,,,,,"u""speed",,,,,"u""speed"
self._tones = song[u'tones'],2,,,,,u'tones'],,,,,u'tones']
"(u""version"", c_ubyte, 4),",2,,,,,"u""version"",",,,,,"u""version"","
self._send_command(self._COMMAND[u'write memory']),2,,,,,u'write,,,,,u'write
if self._current_movement[u'duration_rest'] < 0.001:,2,,,,,u'duration_rest'],,,,,u'duration_rest']
"u'expr MINUS expr',",2,,,,,u'expr,,,,,u'expr
"0x6F: u""IPX-in-IP"", 0x70: u""VRRP"",        0x71: u""PGM"",",2,,,,,"u""IPX-in-IP"",",,,,,"u""IPX-in-IP"","
"print f'\r[{""█""*self._BAR_MAX_LEN}] done.'",2,,,,,,"print f'\r[{""█""*self._BAR_MAX_LEN}] done.'",,,,"print f'\r[{""█""*self._BAR_MAX_LEN}] done.'"
"self._physical_ev3._introspection[u""network_ip_adr""],",2,,,,,"u""network_ip_adr""],",,,,,"u""network_ip_adr""],"
"src2 = resource_path(os.path.join(u'src', src2a))",2,,,,,"u'src',",,,,,"u'src',"
"response = api.person(self.arguments.email, u""email"", **kwargs, **pkwargs)",2,,,,,"u""email"",",,,,,"u""email"","
"key, sensor[u""type""])",2,,,,,"u""type""])",,,,,"u""type""])"
ur'^Serial-Number: (\w*)\s\n' +,2,,,,,,,,,,
COPY = '\x07',2,,,,,,,,,,
"position, **_3to2kwargs",2,,,,,,,,,,
"u'expr AND expr',",2,,,,,u'expr,,,,,u'expr
"port_str = u'PORT_' + unicode(1 + struct.unpack(u""<B"", self._port)[0])",2,,,,,u'PORT_',,unicode(,,,u'PORT_' unicode(
GET_VBATT = '\x01',2,,,,,,,,,,
"self.arguments.key = open(u""./hkbit.key"", u""ab+"")",2,,,,,"u""./hkbit.key"",",,,,,"u""./hkbit.key"","
"import requests, bs4",2,,,,,,,,,,
"host=u'00:16:53:42:2B:99',",2,,,,,"u'00:16:53:42:2B:99',",,,,,"u'00:16:53:42:2B:99',"
"return utils.data(u'Number',int(p.NUMBER)*-1)",2,,,,,"u'Number',int(p.NUMBER)*-1)",,,,,"u'Number',int(p.NUMBER)*-1)"
print module,2,,,,,,print module,,,,print module
NUMBER_FORMATTED = '\x0C',2,,,,,,,,,,
def connect_bluetooth(self):,2,,,,,,,,,,
"u""duration must be a number""",2,,,,,"u""duration",,,,,"u""duration"
PORT_4 = '\x03',2,,,,,,,,,,
u'path needs to be a str',2,,,,,u'path,,,,,u'path
DEVCMD_FIRE = '\x11'  # UART device fire (ultrasonic),2,,,,,,,,,,
"u'speed_right': speed_right,",2,,,,,u'speed_right':,,,,,u'speed_right':
elif op == u'&':,2,,,,,u'&':,,,,,u'&':
ops = ''.join((,2,,,,,,,,,,
"connections = lambda pid=None, resolver=None: stem.util.connection.get_connections(resolver if resolver else self.resolvers[0], process_pid = pid if pid else self.pids()[0], process_name = u""tor"") if self.resolvers and self.pids else None",2,,,,,"u""tor"")",,,,,"u""tor"")"
for i in xrange(8):,2,,,xrange(,,,,,,,xrange(
"self.parser.add_argument(u""-d"", u""--debug"", action = u""store_true"", help = u""Debug program listing (-l/--list must be specified)."")",2,,,,,"u""-d"",",,,,,"u""-d"","
opEN_LOG = '\x1B',2,,,,,,,,,,
def remote(self):,2,,,,,,,,,,
NO_SEL = '\x03',2,,,,,,,,,,
print line,2,,,,,,print line,,,,print line
"if country: url += u""&country="" + country",2,,,,,"u""&country=""",,,,,"u""&country="""
label.config(fg=u'#000000'),2,,,,,u'#000000'),,,,,u'#000000')
for i in xrange (len(del_index)):,2,,,xrange (,,,,,,,xrange (
"g=open(u'batch_tops.config', u'w')",2,,,,,"u'batch_tops.config',",,,,,"u'batch_tops.config',"
if 'port_left' in _3to2kwargs: port_left = _3to2kwargs['port_left']; del _3to2kwargs['port_left'],2,,,,,,,,,,
os.chdir(u'..'),2,,,,,u'..'),,,,,u'..')
for i in xrange (len(image_list)):,2,,,xrange (,,,,,,,xrange (
"u""port_right needs to be an integer""",2,,,,,"u""port_right",,,,,"u""port_right"
opMove16_16 = '\x35',2,,,,,,,,,,
"with open(request.param, u'rb') as fw:",2,,,,,u'rb'),,,,,u'rb')
del self._current_movement[u'stopped'],2,,,,,u'stopped'],,,,,u'stopped']
u'''the art of doing nothing''',2,,,,,u'''the,,,,,u'''the
u'target_motor_pos': (,2,,,,,u'target_motor_pos':,,,,,u'target_motor_pos':
ops = '',2,,,,,,,,,,
ABS = '\x06'  # !< Absolute r = fabs(x),2,,,,,,,,,,
elif sys.platform.startswith(u'linux') or sys.platform.startswith(u'cygwin'):,2,,,,,u'linux'),,,,,u'linux')
opInit_Bytes = '\x2F'  # MOVE,2,,,,,,,,,,
opOutput_Power = '\xA4',2,,,,,,,,,,
"print f""[i] Request results for Account Statistics endpoint:""",2,,,,,,"print f""[i] Request results for Account Statistics endpoint:""",,,,"print f""[i] Request results for Account Statistics endpoint:"""
u'|' +,2,,,,,u'|',,,,,u'|'
"value = self.builder.icmp_signed(u'<',lhs,rhs)",2,,,,,"u'<',lhs,rhs)",,,,,"u'<',lhs,rhs)"
BREAK = '\x00',2,,,,,,,,,,
"values = struct.unpack(u'<4i', reply[:16])",2,,,,,"u'<4i',",,,,,"u'<4i',"
opOutput_Test = '\xA9',2,,,,,,,,,,
if __name__ ==  u'__main__':,2,,,,,u'__main__':,,,,,u'__main__':
def rgb_white_balance(self):,2,,,,,,,,,,
"'\x00\x01',",2,,,,,,,,,,
u'path_dest needs to be of type str',2,,,,,u'path_dest,,,,,u'path_dest
"self._physical_ev3._introspection[u""mem_free""]",2,,,,,"u""mem_free""]",,,,,"u""mem_free""]"
GT = ur'>',2,,,,,,,,,,
"u""system command {:02X}:{:02X} replied error"".format(",2,,,,,"u""system",,,,,"u""system"
GET_OS_BUILD = '\x0C',2,,,,,,,,,,
if 'pause' in _3to2kwargs: pause = _3to2kwargs['pause']; del _3to2kwargs['pause'],2,,,,,,,,,,
assert captured.out == u'',2,,,,,u'',,,,,u''
SIZE = '\x0C',2,,,,,,,,,,
"buttonReply = QMessageBox.question(self, u'Save file', u""Save file at ""+ dst +u"" ?"", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)",2,,,,,u'Save,,,,,u'Save
"(u""bb'"", .5),",2,,,,,"u""bb'"",",,,,,"u""bb'"","
opCp_Ne8 = '\x50',2,,,,,,,,,,
"def _incomplete_len(self, progress):",2,,,,,,,,,,
tmp=glob.glob(info+u'/manifest.safe'),2,,,,,u'/manifest.safe'),,,,,u'/manifest.safe')
"self.parser.add_argument(u""-o"", u""--output"", type = argparse.FileType(u""wb""), default = sys.stdout.buffer, help = u""Output file."")",2,,,,,"u""-o"",",,,,,"u""-o"","
"), u""tracking_callback must be a callable""",2,,,,,"u""tracking_callback",,,,,"u""tracking_callback"
ICON_INFO_FILE = '\x1C',2,,,,,,,,,,
"text=u'Step 0. Select data date',",2,,,,,u'Step,,,,,u'Step
"u""can't continue unstopped movement""",2,,,,,"u""can't",,,,,"u""can't"
"(u""fragment_offset"", c_ushort, 13),",2,,,,,"u""fragment_offset"",",,,,,"u""fragment_offset"","
else: callback = None,2,,,,,,,,,,
print u'MCU ID: 0x{}'.format(dfu.id.hex()),2,,,,,u'MCU,print u'MCU ID: 0x{}'.format(dfu.id.hex()),,,,u'MCU print u'MCU ID: 0x{}'.format(dfu.id.hex())
GET_HW_VERS = '\x09',2,,,,,,,,,,
"def position(self, value):",2,,,,,,,,,,
"print u'MMC = MAX MATERIAL CONDITION, LMC = LEAST MATERIAL CONDITION'",2,,,,,u'MMC,"print u'MMC = MAX MATERIAL CONDITION, LMC = LEAST MATERIAL CONDITION'",,,,"u'MMC print u'MMC = MAX MATERIAL CONDITION, LMC = LEAST MATERIAL CONDITION'"
"info=[  u'Processing directory ',",2,,,,,u'Processing,,,,,u'Processing
if 'speed' in _3to2kwargs: speed = _3to2kwargs['speed']; del _3to2kwargs['speed'],2,,,,,,,,,,
u'xx:xx:xx.xxxxxx Sent 0x|06:00|2C:00|80|00:00|01|' + u'\n',2,,,,,u'xx:xx:xx.xxxxxx,,,,,u'xx:xx:xx.xxxxxx
GET_BUMPS = '\x1F',2,,,,,,,,,,
font=u'Helvetica 12 bold italic'),2,,,,,u'Helvetica,,,,,u'Helvetica
SET_ERROR = '\x01',2,,,,,,,,,,
opBp2 = '\x8A',2,,,,,,,,,,
"def sync_mode(self, value):",2,,,,,,,,,,
"phone.add_argument(u""--country-code"", type = unicode, metavar = u""code"", default = u"""", help = u""This parameter must be passed when using non US/Canada based phone numbers. Use the ISO-3166 two-digit country code (Great Britain = GB). If not entered it defaults to US."")",2,,,,,"u""--country-code"",",,,,,"u""--country-code"","
FILLCIRCLE = '\x18',2,,,,,,,,,,
GET_BRICKNAME = '\x0D',2,,,,,,,,,,
opArray_Append = '\xC4',2,,,,,,,,,,
opMul8 = '\x18',2,,,,,,,,,,
self.conButton.setText(u'Measure'),2,,,,,u'Measure'),,,,,u'Measure')
print u'ENTER ANY TWO KNOWNS (HOLE/SHAFT/FIT)',2,,,,,u'ENTER,print u'ENTER ANY TWO KNOWNS (HOLE/SHAFT/FIT)',,,,u'ENTER print u'ENTER ANY TWO KNOWNS (HOLE/SHAFT/FIT)'
OFF = '\x04',2,,,,,,,,,,
"int(sector[u'address'], 0) + int(sector[u'size'], 0))",2,,,,,"u'address'],",,,,,"u'address'],"
opBp0 = '\x88'  # VM,2,,,,,,,,,,
"(u""d''"", .25),",2,,,,,"u""d''"",",,,,,"u""d''"","
assert '\x00\x01\x02\x11\x21\x31\x44' in dfu.commands,2,,,,,,,,,,
GET_LOG_SYNC_TIME = '\x0E',2,,,,,,,,,,
"u""volume needs to be in range [0 - 100]""",2,,,,,"u""volume",,,,,"u""volume"
opCp_GtF = '\x4B',2,,,,,,,,,,
self._socket.send(msg.encode(u'utf-8')),2,,,,,u'utf-8')),,,,,u'utf-8'))
"self._physical_ev3._introspection[u""sensors""] \",2,,,,,"u""sensors""]",,,,,"u""sensors""]"
if self.conButton.text() == u'Measure' and port_serial != u'':,2,,,,,u'Measure',,,,,u'Measure'
HW_WIFI = '\x03',2,,,,,,,,,,
u''',2,,,,,u''',,,,,u'''
"size = (int(memory_map[-1][u'address'], 0) +",2,,,,,"u'address'],",,,,,"u'address'],"
"flags.append(u""Don't Fragment (DF)"")",2,,,,,"u""Don't",,,,,"u""Don't"
serial_number = u':'.join(,2,,,,,u':'.join(,,,,,u':'.join(
BEGIN_GETFILE = '\x96',2,,,,,,,,,,
if 'ev3_obj' in _3to2kwargs: ev3_obj = _3to2kwargs['ev3_obj']; del _3to2kwargs['ev3_obj'],2,,,,,,,,,,
"info1=eval(u""info1[0:4]+info1[5:7]+info1[8:10]"")",2,,,,,"u""info1[0:4]+info1[5:7]+info1[8:10]"")",,,,,"u""info1[0:4]+info1[5:7]+info1[8:10]"")"
[port_motor_input(self._port)][u'used_by'] = self,2,,,,,u'used_by'],,,,,u'used_by']
"super(Ultrasonic, self).__init__(",2,,,,,,,,,,
opNote_To_Freq = '\x63',2,,,,,,,,,,
"rb1.config(state=u""disabled"")",2,,,,,"u""disabled"")",,,,,"u""disabled"")"
info1=unicode(info1),2,,,,,,,unicode(,,,unicode(
def memory(self):,2,,,,,,,,,,
"return u""\n"".join([f""[IPv{self.version}] [Proto.{self.raw_protocol} ({self.protocol})] {self.source} -> {self.destination}"",",2,,,,,"u""\n"".join([f""[IPv{self.version}]",,,,,"u""\n"".join([f""[IPv{self.version}]"
"return (u'While',{u'test':test,u'body':body})",2,,,,,"u'While',{u'test':test,u'body':body})",,,,,"u'While',{u'test':test,u'body':body})"
"elif clearance != u""?"" and allowance == u""?"":",2,,,,,"u""?""",,,,,"u""?"""
_SYSTEM_COMMAND_NO_REPLY = '\x81',2,,,,,,,,,,
opBp3 = '\x8B',2,,,,,,,,,,
@_(u'IF expr LBRACE statements RBRACE ELSE LBRACE statements RBRACE'),2,,,,,u'IF,,,,,u'IF
elif op == u'<':,2,,,,,u'<':,,,,,u'<':
SYSTEM_REPLY_OK = '\x00',2,,,,,,,,,,
u''',2,,,,,u''',,,,,u'''
"QMessageBox.about(self, u""Error1!"", u""Error1, check the usb connection, then click 'Refresh Port'"")",2,,,,,"u""Error1!"",",,,,,"u""Error1!"","
u'''representation of the object in a str context''',2,,,,,u'''representation,,,,,u'''representation
opSystem = '\x60'  # VM,2,,,,,,,,,,
RED = '\x00',2,,,,,,,,,,
self.ser.write('g'),2,,,,,,,,,,
start_pos_outer = cur_mov[u'start_motor_pos'][1],2,,,,,u'start_motor_pos'][1],,,,,u'start_motor_pos'][1]
u' established',2,,,,,u' established',,,,,u' established'
FILETYPE_UNKNOWN = '\x00',2,,,,,,,,,,
"super(ProgressBarThread, self).__init__(target=self._run)",2,,,,,,,,,,
opMove8_F = '\x33',2,,,,,,,,,,
LARGE_ICON = '\x02'  # 24x22_Yes_No_OFF_FILEOps.bmp,2,,,,,,,,,,
EQ = ur'=',2,,,,,,,,,,
"self._physical_ev3._introspection[u""sensors""][PORT_C_SENSOR][u""type""],",2,,,,,"u""sensors""][PORT_C_SENSOR][u""type""],",,,,,"u""sensors""][PORT_C_SENSOR][u""type""],"
"super(TorConsole, self).__init__()",2,,,,,,,,,,
"u""allowed verbosity values are: 0, 1 or 2""",2,,,,,"u""allowed",,,,,"u""allowed"
message = '1\r\n',2,,,,,,,,,,
COS = '\x0C'  # !<,2,,,,,,,,,,
LARGE_FONT = '\x02',2,,,,,,,,,,
FILL = '\x06',2,,,,,,,,,,
"QMessageBox.about(self, u""Info"", u""File was saved at "" + dst)",2,,,,,"u""Info"",",,,,,"u""Info"","
"winIcon = resource_path(os.path.join(u'src', winIcon1))",2,,,,,"u'src',",,,,,"u'src',"
"assert 0 <= value <= 120, u""sleep must be between 0 and 120""",2,,,,,"u""sleep",,,,,"u""sleep"
CLR_CHANGES = '\x1A',2,,,,,,,,,,
"position = round(struct.unpack(u'<f', reply)[0])",2,,,,,"u'<f',",,,,,"u'<f',"
"def read_file(self, path):",2,,,,,,,,,,
TOPLINE = '\x12',2,,,,,,,,,,
NE = ur'!=',2,,,,,,,,,,
def _run(self):,2,,,,,,,,,,
opOutput_Get_Type = '\xA0'  # OUTPUT,2,,,,,,,,,,
"struct.pack(u'<I', size),      # SIZE",2,,,,,"u'<I',",,,,,"u'<I',"
"u""song must have a key 'led_sequence'""",2,,,,,"u""song",,,,,"u""song"
"duration, **_3to2kwargs",2,,,,,,,,,,
else: speed =  None,2,,,,,,,,,,
STOPPED = '\x40'  # Object is stopped or not triggered yet,2,,,,,,,,,,
CAL_MINMAX = '\x03',2,,,,,,,,,,
def ambient(self):,2,,,,,,,,,,
CREATE8 = '\x01',2,,,,,,,,,,
"self._physical_ev3._introspection[u""sensors""][PORT_D_SENSOR][u""type""]",2,,,,,"u""sensors""][PORT_D_SENSOR][u""type""]",,,,,"u""sensors""][PORT_D_SENSOR][u""type""]"
u'stopped' in self._current_movement,2,,,,,u'stopped',,,,,u'stopped'
params_type = [self.type_map[x[u'type']] for x in params],2,,,,,u'type']],,,,,u'type']]
"u""ramp_down_time must be an number""",2,,,,,"u""ramp_down_time",,,,,"u""ramp_down_time"
"return utils.data(u'String',p.STRING)",2,,,,,"u'String',p.STRING)",,,,,"u'String',p.STRING)"
GET_HORZ = '\x07',2,,,,,,,,,,
opOutput_Step_Sync = '\xB0',2,,,,,,,,,,
os.chdir(u'../raw'),2,,,,,u'../raw'),,,,,u'../raw')
"tk.Button(self, text=u""Browse"", command=lambda *args:browse(1)),",2,,,,,"u""Browse"",",,,,,"u""Browse"","
ICON_CONNECTED = '\x1E',2,,,,,,,,,,
"super(TwoWheelVehicle, self).__del__()",2,,,,,,,,,,
reply_1_str = u':'.join(u'{:02X}'.format(byte) for byte in reply_1),2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
"speed=abs(self._current_movement[u'speed']),",2,,,,,"u'speed']),",,,,,"u'speed']),"
SQRT = '\x08'  # !< Squareroot r = sqrt(x),2,,,,,,,,,,
"super(Infrared, self).__del__()",2,,,,,,,,,,
"if value != self._physical_ev3._introspection[u""sleep""]:",2,,,,,"u""sleep""]:",,,,,"u""sleep""]:"
"COMMA = ur','",2,,,,,,,,,,
value = branch[1][u'value'],2,,,,,u'value'],,,,,u'value']
Binnumber = ur'0[bB](?:_?[01])+',2,,,,,,,,,,
"@_retry(_RETRIES, u'erase', _serial_flush)",2,,,,,"u'erase',",,,,,"u'erase',"
"assert u'stopped' in self._current_movement, \",2,,,,,u'stopped',,,,,u'stopped'
print u'open1',2,,,,,u'open1',print u'open1',,,,u'open1' print u'open1'
DATA_PCT = '\x10'  # Percent (used in opINPUT_READEXT),2,,,,,,,,,,
HW_USB = '\x01',2,,,,,,,,,,
"Sensors = namedtuple(u'Sensors', [",2,,,,,"u'Sensors',",,,,,"u'Sensors',"
info2=unicode(info2),2,,,,,,,unicode(,,,unicode(
opOutput_Ready = '\xAA',2,,,,,,,,,,
"print u""Hole MMC = {0} in"".format(unicode(round(hole_mmc,4)))",2,,,,,"u""Hole","print u""Hole MMC = {0} in"".format(unicode(round(hole_mmc,4)))",unicode(,,,"u""Hole print u""Hole MMC = {0} in"".format(unicode(round(hole_mmc,4))) unicode("
self.groupBox2 = QGroupBox(u''),2,,,,,u''),,,,,u'')
opCp_Lteq8 = '\x54',2,,,,,,,,,,
self.base_url = urlparse.urlparse(url),2,,,,,,,,,,
TO_FILE = '\x15',2,,,,,,,,,,
def version(self):,2,,,,,,,,,,
"assert lang is None or isinstance(lang, unicode), \",2,,,,,,,,,,
COPY_ERROR = '\x17',2,,,,,,,,,,
"name.add_argument(u""--locality"", type = unicode, help = u""If supplied, only companies matching given locality/city will be returned. For example, --locality=New York or --locality=Dallas."")",2,,,,,"u""--locality"",",,,,,"u""--locality"","
speed = cur_mov[u'speed_left'],2,,,,,u'speed_left'],,,,,u'speed_left']
LBRACE = ur'\{',2,,,,,,,,,,
TOTALSIZE = '\x11',2,,,,,,,,,,
print fits,2,,,,,,print fits,,,,print fits
"), u'LED pattern ' + led_pattern + u' not provided'",2,,,,,u'LED,,,,,u'LED
"super(Color, self).__init__(",2,,,,,,,,,,
"u""tread needs to be a number""",2,,,,,"u""tread",,,,,"u""tread"
"u""type"": socket.SOCK_DGRAM if self.arguments.udp else socket.SOCK_STREAM,",2,,,,,"u""type"":",,,,,"u""type"":"
step3 = cur_mov[u'step3_left'],2,,,,,u'step3_left'],,,,,u'step3_left']
"value = self.builder.icmp_signed(u'>=',lhs,rhs)",2,,,,,"u'>=',lhs,rhs)",,,,,"u'>=',lhs,rhs)"
"self.parser.add_argument(u""domain"", type = unicode, help = u""Target domain name."")",2,,,,,"u""domain"",",,,,,"u""domain"","
u':'.join(u'{:02X}'.format(byte) for byte in reply[4:5]) +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
self._current_movement[u'duration'] - (,2,,,,,u'duration'],,,,,u'duration']
"help=u' '.join([_ARGS_HELP[u'address'], u'erasing.']))",2,,,,,"u' '.join([_ARGS_HELP[u'address'],",,,,,"u' '.join([_ARGS_HELP[u'address'],"
u'xx:xx:xx.xxxxxx Sent 0x|06:00|2B:00|00|00:00|01|' + u'\n' +,2,,,,,u'xx:xx:xx.xxxxxx,,,,,u'xx:xx:xx.xxxxxx
"assert u'tempo' in song, \",2,,,,,u'tempo',,,,,u'tempo'
opAdd32 = '\x12',2,,,,,,,,,,
elif op == u'==':,2,,,,,u'==':,,,,,u'==':
"raise DirCmdError(u""Folder "" + path + u"" doesn't exist"")",2,,,,,"u""Folder",,,,,"u""Folder"
"u'Directory for POD precise orbit ephemerides (EOF) ',",2,,,,,u'Directory,,,,,u'Directory
"super(DfuAcknowledgeException, self).__init__(f'Acknowledge error (dfu response: {response}')",2,,,,,,,,,,
self._send_command(self._COMMAND[u'read memory']),2,,,,,u'read,,,,,u'read
AND = ur'\&',2,,,,,,,,,,
"struct.pack(u'<HH', len(ops) + 5, msg_cnt),",2,,,,,"u'<HH',",,,,,"u'<HH',"
"if value != self._physical_ev3._introspection[u""name""]:",2,,,,,"u""name""]:",,,,,"u""name""]:"
"self._physical_ev3._introspection[u""mem_total""],",2,,,,,"u""mem_total""],",,,,,"u""mem_total""],"
opDiv32 = '\x1E',2,,,,,,,,,,
u'{:02X}'.format(byte) for byte in reply[7:len_data],2,,,,,u'{:02X}'.format(byte),,,,,u'{:02X}'.format(byte)
"u""local_mem needs to be an integer""",2,,,,,"u""local_mem",,,,,"u""local_mem"
"def read(self, address = None, size = None,",2,,,,,,,,,,
SET_ON_OFF = '\x01',2,,,,,,,,,,
UPDATE_RUN = '\x1A',2,,,,,,,,,,
elif branch[0] == u'While':,2,,,,,u'While':,,,,,u'While':
"picon = resource_path(os.path.join(u'src', picon1))",2,,,,,"u'src',",,,,,"u'src',"
YES_SEL = '\x01',2,,,,,,,,,,
NEGATE = '\x07'  # !< Negate r = 0.0 - x,2,,,,,,,,,,
SET_TESTPIN = '\x17',2,,,,,,,,,,
"assert isinstance(value, int), u""port needs to be of type int""",2,,,,,"u""port",,,,,"u""port"
def busy(self):,2,,,,,,,,,,
opWrite32 = '\xCE',2,,,,,,,,,,
REPLY = '\x0E',2,,,,,,,,,,
"u'red_down',",2,,,,,"u'red_down',",,,,,"u'red_down',"
dir_dest = u'/'.join(path_dest.split(u'/')[:-1]),2,,,,,u'/'.join(path_dest.split(u'/')[:-1]),,,,,u'/'.join(path_dest.split(u'/')[:-1])
''.join((,2,,,,,,,,,,
"math.copysign(1, self._current_movement[u'speed'])",2,,,,,u'speed']),,,,,u'speed'])
ICON_INFO = '\x17',2,,,,,,,,,,
class Audio_Scraper(object):,2,,,,,,,,,,
"(u""d'"", 1),",2,,,,,"u""d'"",",,,,,"u""d'"","
opJr_False = '\x41',2,,,,,,,,,,
params = branch[1][u'params'],2,,,,,u'params'],,,,,u'params']
"os.link(tmp[0],data_date[i]+u'_manifest.safe')",2,,,,,u'_manifest.safe'),,,,,u'_manifest.safe')
GE = ur'>=',2,,,,,,,,,,
if 'verbosity' in _3to2kwargs: verbosity = _3to2kwargs['verbosity']; del _3to2kwargs['verbosity'],2,,,,,,,,,,
"self.parser.add_argument(u""-i"", u""--api-id"", type = unicode, default = u"""", help = u""Censys API ID."")",2,,,,,"u""-i"",",,,,,"u""-i"","
SYSTEM_UNKNOWN_HANDLE = '\x01',2,,,,,,,,,,
opSelect8 = '\x5C'  # SELECT,2,,,,,,,,,,
"info1=eval(u""info1[0:4]+info1[5:7]+info1[8:10]"")",2,,,,,"u""info1[0:4]+info1[5:7]+info1[8:10]"")",,,,,"u""info1[0:4]+info1[5:7]+info1[8:10]"")"
"if countryCode: url += u""&countryCode="" + countryCode",2,,,,,"u""&countryCode=""",,,,,"u""&countryCode="""
"QMessageBox.about(self, u""Error3!"", u""Error3, check the usb connection, then click 'Refresh Port'"")",2,,,,,"u""Error3!"",",,,,,"u""Error3!"","
TO_TRASH = '\x13',2,,,,,,,,,,
PORT_A_SENSOR = '\x10',2,,,,,,,,,,
print u'\nExecuted in {:f} sec'.format(end_time - start_time),2,,,,,u'\nExecuted,print u'\nExecuted in {:f} sec'.format(end_time,,,,u'\nExecuted print u'\nExecuted in {:f} sec'.format(end_time
"programs = len(list(ifilter(lambda x: isinstance(x[1], unicode), value.items())))",2,,,,,,,,,,
opSleep = '\x0B',2,,,,,,,,,,
ICON_XED = '\x0A',2,,,,,,,,,,
def host(self):,2,,,,,,,,,,
u'speed needs to be an integer',2,,,,,u'speed,,,,,u'speed
else: ramp_up_time =  None,2,,,,,,,,,,
"u""temperament needs to be an int""",2,,,,,"u""temperament",,,,,"u""temperament"
"@_retry(_RETRIES, u'read memory', _serial_flush)",2,,,,,u'read,,,,,u'read
if self._current_movement[u'op'] == u'Time_Speed':,2,,,,,u'op'],,,,,u'op']
opJr_Neq16 = '\x71',2,,,,,,,,,,
g.write(u'preproc_batch_tops_esd.csh data.in dem.grd 1\n'),2,,,,,u'preproc_batch_tops_esd.csh,,,,,u'preproc_batch_tops_esd.csh
"if unicode(e) != u""issubclass() arg 1 must be a class"":",2,,,,,"u""issubclass()",,unicode(,,,"u""issubclass() unicode("
MERGE = '\x13',2,,,,,,,,,,
opCp_GteqF = '\x5B',2,,,,,,,,,,
opOr32 = '\x22',2,,,,,,,,,,
rest = self._current_movement[u'target_position'] - current_position,2,,,,,u'target_position'],,,,,u'target_position']
assert u':'.join(u'{:02X}'.format(byte) for byte in msg_cnt_2) == u'30:00',2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
RuntimeError(u'concurrent movements'),2,,,,,u'concurrent,,,,,u'concurrent
titlestyle= u''',2,,,,,u''',,,,,u'''
for i in xrange (Num_data):,2,,,xrange (,,,,,,,xrange (
"u'type': None,",2,,,,,u'type':,,,,,u'type':
opMove16_8 = '\x34',2,,,,,,,,,,
ICON_SETTINGS = '\x07',2,,,,,,,,,,
kwargs={u'brake': brake},2,,,,,u'brake':,,,,,u'brake':
"requirements = set([u""dnspython3""])",2,,,,,"u""dnspython3""])",,,,,"u""dnspython3""])"
self.atemVal1 = QLabel(unicode(y1) +  u' °' ),2,,,,,u' °',,unicode(,,,u' °' unicode(
else: verbosity =  None,2,,,,,,,,,,
"hole_mmc = vin(u""Hole MMC"", u""?"", units=u""in"")",2,,,,,"u""Hole",,,,,"u""Hole"
"self.parser.add_argument(u""-s"", u""--api-secret"", type = unicode, default = u"""", help = u""Censys API Secret."")",2,,,,,"u""-s"",",,,,,"u""-s"","
"return utils.data(u'Float',float(p.FLOAT))",2,,,,,"u'Float',float(p.FLOAT))",,,,,"u'Float',float(p.FLOAT))"
READ_SIZE = '\x0F',2,,,,,,,,,,
opJr_Lt32 = '\x66',2,,,,,,,,,,
u'started_at': datetime.now(),2,,,,,u'started_at':,,,,,u'started_at':
TO_WIFI = '\x12',2,,,,,,,,,,
u'song needs to be a dict',2,,,,,u'song,,,,,u'song
"STRING = ur'(\"".*?\"")|(\'.*?\')'",2,,,,,,,,,,
g.write(u'#!/bin/csh -f\n'),2,,,,,u'#!/bin/csh,,,,,u'#!/bin/csh
"u""delta_time must be a number""",2,,,,,"u""delta_time",,,,,"u""delta_time"
"EOL = ""\r\n"" if self.arguments.crlf else ""\n""",2,,,,,,,,,,
"0x73: u""L2TP"",      0x74: u""DDX"",         0x75: u""IATP"",",2,,,,,"u""L2TP"",",,,,,"u""L2TP"","
return u' '.join((,2,,,,,u' '.join((,,,,,u' '.join((
"0x0F: u""XNET"",      0x10: u""CHAOS"",       0x11: u""UDP"",",2,,,,,"u""XNET"",",,,,,"u""XNET"","
print dat + u'|',2,,,,,u'|',print dat + u'|',,,,u'|' print dat + u'|'
u'''set and read brickname''',2,,,,,u'''set,,,,,u'''set
def header(size):,2,,,,,,,,,,
@_(u'IF expr LBRACE statements RBRACE'),2,,,,,u'IF,,,,,u'IF
step3 = cur_mov[u'step3_right'],2,,,,,u'step3_right'],,,,,u'step3_right']
if 'local_mem' in _3to2kwargs: local_mem = _3to2kwargs['local_mem']; del _3to2kwargs['local_mem'],2,,,,,,,,,,
SYSTEM_UNKNOWN_ERROR = '\x0A',2,,,,,,,,,,
PORT_D_SENSOR = '\x13',2,,,,,,,,,,
"u'Miscellaneous'),",2,,,,,"u'Miscellaneous'),",,,,,"u'Miscellaneous'),"
"RawRGBColor = namedtuple(u'RawRGBColor', [",2,,,,,"u'RawRGBColor',",,,,,"u'RawRGBColor',"
REPEAT = '\x03',2,,,,,,,,,,
def beacon(self):,2,,,,,,,,,,
else: polarity_right =  1,2,,,,,,,,,,
ICON_TRASHBIN = '\x0D',2,,,,,,,,,,
SET_ENCRYPT = '\x0B',2,,,,,,,,,,
"raw_audio = open(out_file,u'wb')",2,,,,,u'wb'),,,,,u'wb')
@_(u''),2,,,,,u''),,,,,u'')
[port_motor_input(self._port_right)][u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
u'''direct command error''',2,,,,,u'''direct,,,,,u'''direct
if 'secure' in _3to2kwargs: secure = _3to2kwargs['secure']; del _3to2kwargs['secure'],2,,,,,,,,,,
VERTBAR = '\x0F',2,,,,,,,,,,
"info2=eval(u""info2[0:4]+info2[5:7]+info2[8:10]"")",2,,,,,"u""info2[0:4]+info2[5:7]+info2[8:10]"")",,,,,"u""info2[0:4]+info2[5:7]+info2[8:10]"")"
PUT_STRING = '\x08',2,,,,,,,,,,
CHECK = '\x14',2,,,,,,,,,,
autodoc_member_order = u'groupwise',2,,,,,u'groupwise',,,,,u'groupwise'
"u""ramp_down_time must be positive""",2,,,,,"u""ramp_down_time",,,,,"u""ramp_down_time"
if 'repeat' in _3to2kwargs: repeat = _3to2kwargs['repeat']; del _3to2kwargs['repeat'],2,,,,,,,,,,
"u'write memory': 0x31,",2,,,,,u'write,,,,,u'write
"value = self.builder.icmp_signed(u'==',lhs,rhs)",2,,,,,"u'==',lhs,rhs)",,,,,"u'==',lhs,rhs)"
"phbs = dict((v.value, k) for k, v in DSCP.__members__.items())",2,,,,,,,,,,
print u'TIME CONVERTER\n',2,,,,,u'TIME,print u'TIME CONVERTER\n',,,,u'TIME print u'TIME CONVERTER\n'
"distance, **_3to2kwargs",2,,,,,,,,,,
def beacons(self):,2,,,,,,,,,,
elif op == u'^':,2,,,,,u'^':,,,,,u'^':
opJr_NeqF = '\x73',2,,,,,,,,,,
LIST_FILES = '\x99',2,,,,,,,,,,
"(u""c''"", .75),",2,,,,,"u""c''"",",,,,,"u""c''"","
"*struct.unpack(u'<2fB', reply)",2,,,,,"u'<2fB',",,,,,"u'<2fB',"
"value = self.builder.fcmp_ordered(u'>=',lhs,rhs)",2,,,,,"u'>=',lhs,rhs)",,,,,"u'>=',lhs,rhs)"
import tkFont as tkFont,2,,,,,,,,,,
"def _checksum(data, init = 0):",2,,,,,,,,,,
self.dtemVal.setText((data[2]) +  u' °' ),2,,,,,u' °',,,,,u' °'
u'(whole memory if no memory map).',2,,,,,u'(whole,,,,,u'(whole
"help=u' '.join([_ARGS_HELP[u'size'], u'erased.']))",2,,,,,"u' '.join([_ARGS_HELP[u'size'],",,,,,"u' '.join([_ARGS_HELP[u'size'],"
"(u'left', LSHIFT, RSHIFT),",2,,,,,"u'left',",,,,,"u'left',"
"self.parser.add_argument(u""-f"", u""--flags"", type=int, default=None, help=u""The message flags to use (Defaults to None (i.e. not overwritten))."")",2,,,,,"u""-f"",",,,,,"u""-f"","
"def __init__(self, address, controller = None):",2,,,,,,,,,,
"kwargs = dict((k, arguments.get(k)) for k in [u""rdtype"", u""rdclass"", u""tcp"", u""source"", u""source_port""])",2,,,,,"u""rdtype"",",,,,,"u""rdtype"","
"credits = {u""Base"": u""chokepoint@github.com"",",2,,,,,"u""Base"":",,,,,"u""Base"":"
"0x2A: u""SDRP"",      0x2B: u""IPv6-Route"",  0x2C: u""IPv6-Frag"",",2,,,,,"u""SDRP"",",,,,,"u""SDRP"","
GET_IINT = '\x06',2,,,,,,,,,,
opCom_Read = '\x91'  # COM,2,,,,,,,,,,
GET_STRING = '\x08',2,,,,,,,,,,
self._current_movement[u'last_position'] = position,2,,,,,u'last_position'],,,,,u'last_position']
"self._physical_ev3._introspection[u""name""] = value",2,,,,,"u""name""]",,,,,"u""name""]"
if 'callback' in _3to2kwargs: callback = _3to2kwargs['callback']; del _3to2kwargs['callback'],2,,,,,,,,,,
CMD_SLOT = '\x02',2,,,,,,,,,,
font=u'Helvetica 10 bold italic'),2,,,,,u'Helvetica,,,,,u'Helvetica
"super(DNAsk, self).__init__()",2,,,,,,,,,,
"name.add_argument(u""--sort"", type = unicode, metavar = u""option"", default = u""traffic"", choices = [u""traffic"", u""relevance"", u""employees""], help = u""Controls how results will be sorted. There are three options: traffic (default): Sort high-traffic domains to the top; relevance: Sort by how closely the company name matches; employees: Sort companies with many employees to the top."")",2,,,,,"u""--sort"",",,,,,"u""--sort"","
"self.address = (address + u"".onion"" if len(address) == 16 else address).lower()",2,,,,,"u"".onion""",,,,,"u"".onion"""
"MotorPositions = namedtuple(u'MotorPositions', [",2,,,,,"u'MotorPositions',",,,,,"u'MotorPositions',"
"if value != self._physical_ev3._introspection[u""volume""]:",2,,,,,"u""volume""]:",,,,,"u""volume""]:"
src1 = u'sensor_output.csv',2,,,,,u'sensor_output.csv',,,,,u'sensor_output.csv'
"author, u'ev3_dc', u'One line description of project.',",2,,,,,"u'ev3_dc',",,,,,"u'ev3_dc',"
VALUE8 = '\x09',2,,,,,,,,,,
"ax1.plot(xar,yar3,label=u'Digital Temperature',linewidth=2)",2,,,,,u'Digital,,,,,u'Digital
u'direction must be an int value',2,,,,,u'direction,,,,,u'direction
cur_mov[u'start_motor_pos'][0],2,,,,,u'start_motor_pos'][0],,,,,u'start_motor_pos'][0]
"print f""[i] Request results for Domain Name based Company Lookup:""",2,,,,,,"print f""[i] Request results for Domain Name based Company Lookup:""",,,,"print f""[i] Request results for Domain Name based Company Lookup:"""
"u'searchbox.html',",2,,,,,"u'searchbox.html',",,,,,"u'searchbox.html',"
"self.parser.add_argument(u""input"", type = argparse.FileType(u""rb""), help = u""Input file."")",2,,,,,"u""input"",",,,,,"u""input"","
for i in xrange (len(date_list)):,2,,,xrange (,,,,,,,xrange (
u':'.join(u'{:02X}'.format(byte) for byte in cmd[4:5]) + u'|' +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
port_settings[u'timeout'] = 5 * 60,2,,,,,u'timeout'],,,,,u'timeout']
PROGRAM_ERROR = '\x18',2,,,,,,,,,,
[port_motor_input(self._port_right)][u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
dir_dest = u'/'.join(path.split(u'/')[:-1]),2,,,,,u'/'.join(path.split(u'/')[:-1]),,,,,u'/'.join(path.split(u'/')[:-1])
"help=u' '.join([_ARGS_HELP[u'address'], u'run.']))",2,,,,,"u' '.join([_ARGS_HELP[u'address'],",,,,,"u' '.join([_ARGS_HELP[u'address'],"
self.goBtn1.setToolTip(u'Click to Enter <b>Calorimeter</b> experiment!'),2,,,,,u'Click,,,,,u'Click
"super(ProgressBarThread, self).start()",2,,,,,,,,,,
"g=open(u'intf.in',u'w')",2,,,,,"u'intf.in',u'w')",,,,,"u'intf.in',u'w')"
else: tld =  None,2,,,,,,,,,,
"mac_addr = u':'.join((tmp[i:i + 2] for i in xrange(0, len(tmp), 2)))",2,,,xrange(,,u':'.join((tmp[i:i,,,,,xrange( u':'.join((tmp[i:i
"cmd, **_3to2kwargs",2,,,,,,,,,,
+ u'cat ../raw_orig/',2,,,,,u'cat,,,,,u'cat
DATA_SI = '\x13'  # SI unit (used in opINPUT_READEXT),2,,,,,,,,,,
EQEQ = ur'==',2,,,,,,,,,,
"console.print(f""[!] Keyboard Interrupted!"", color = u""red"")",2,"print(f""[!]",,,,"u""red"")",,,,,"print(f""[!] u""red"")"
def bumps(self):,2,,,,,,,,,,
ICON_LOCKSTAR = '\x01',2,,,,,,,,,,
elif op == u'<=':,2,,,,,u'<=':,,,,,u'<=':
@_(u'param'),2,,,,,u'param'),,,,,u'param')
def port_left(self):,2,,,,,,,,,,
"kwargs = {u""addr"": proxy.hostname, u""rdns"": rdns}",2,,,,,"u""addr"":",,,,,"u""addr"":"
"u'write unprotect': 0x73,",2,,,,,u'write,,,,,u'write
PUT_CACHE_FILE = '\x15',2,,,,,,,,,,
"u"" when writing file "" +",2,,,,,"u"" when",,,,,"u"" when"
"u""polarity_right needs to be -1 or 1""",2,,,,,"u""polarity_right",,,,,"u""polarity_right"
"radius_wheel,",2,,,,,,,,,,
"u""value of bumps: "" + unicode(value) + u"" is invalid (must be 0)""",2,,,,,"u""value",,unicode(,,,"u""value unicode("
"u'-ar', u'8000',",2,,,,,"u'-ar',",,,,,"u'-ar',"
DUPLICATE = '\x05',2,,,,,,,,,,
if 'polarity_right' in _3to2kwargs: polarity_right = _3to2kwargs['polarity_right']; del _3to2kwargs['polarity_right'],2,,,,,,,,,,
"ptr,Type = self.variables[branch[1][u'value']]",2,,,,,u'value']],,,,,u'value']]
"dump_command.add_argument(u'-a', u'--address', default=u'0x8000000',",2,,,,,"u'-a',",,,,,"u'-a',"
"super(HKBit, self).__init__()",2,,,,,,,,,,
"u'xx:xx:xx.xxxxxx',",2,,,,,"u'xx:xx:xx.xxxxxx',",,,,,"u'xx:xx:xx.xxxxxx',"
"print f""[i] Request results for Name based Company Lookup:""",2,,,,,,"print f""[i] Request results for Name based Company Lookup:""",,,,"print f""[i] Request results for Name based Company Lookup:"""
"def update(self, progress = None):",2,,,,,,,,,,
"super(IPv4, self).__init__()",2,,,,,,,,,,
u'channel must be of type int',2,,,,,u'channel,,,,,u'channel
"0x54: u""TTP"",       0x54: u""IPTM"",        0x55: u""NSFNET-IGP"",",2,,,,,"u""TTP"",",,,,,"u""TTP"","
opMailbox_Open = '\xD8',2,,,,,,,,,,
"resolver.retry_servfail = arguments.get(u""retry_servfail"")",2,,,,,"u""retry_servfail"")",,,,,"u""retry_servfail"")"
"touched = struct.unpack(u'<f', reply[:4])[0]",2,,,,,"u'<f',",,,,,"u'<f',"
"def __init__(self, response):",2,,,,,,,,,,
"u""beats_per_bar"": 4,",2,,,,,"u""beats_per_bar"":",,,,,"u""beats_per_bar"":"
TYPE_GRAPHICS = '\x04',2,,,,,,,,,,
target_pos_outer = cur_mov[u'target_motor_pos'][0],2,,,,,u'target_motor_pos'][0],,,,,u'target_motor_pos'][0]
"actions.add_argument(u""-p"", u""--phone"", type = unicode, metavar = u""number"", help = u""Request information about a specific person by phone."")",2,,,,,"u""-p"",",,,,,"u""-p"","
"def __init__(self, key = u"""", version = 2):",2,,,,,"u"""",",,,,,"u"""","
"0x7F: u""CRUDP"",     0x80: u""SSCOPMCE"",    0x81: u""IPLT"",",2,,,,,"u""CRUDP"",",,,,,"u""CRUDP"","
elif op == u'<<':,2,,,,,u'<<':,,,,,u'<<':
"initialdir=os.getcwdu(),",2,,,,,,,,,,
SEARCH_ITEM = '\x09',2,,,,,,,,,,
opCom_Writedata = '\xD2',2,,,,,,,,,,
"label=u'Max. day interval',",2,,,,,u'Max.,,,,,u'Max.
"u""cmd needs to be of type bytes""",2,,,,,"u""cmd",,,,,"u""cmd"
opProgram_Start = '\x03',2,,,,,,,,,,
def is_endless(self):,2,,,,,,,,,,
"ops, **_3to2kwargs",2,,,,,,,,,,
else: ramp_down =  None,2,,,,,,,,,,
NAME[u'def'] = DEF,2,,,,,u'def'],,,,,u'def']
"), u""concurrent movement in progress""",2,,,,,"u""concurrent",,,,,"u""concurrent"
"def channel(self, value):",2,,,,,,,,,,
"btn_EOF_check=tk.Button(self, text=u""      POD      "", command=lambda *args:Display(2))",2,,,,,"u""      POD",,,,,"u""      POD"
PORT_2 = '\x01',2,,,,,,,,,,
"u""end of folder-data "" +",2,,,,,"u""end",,,,,"u""end"
"def crypt(data, key = None):",2,,,,,,,,,,
"u'sphinx.ext.doctest',",2,,,,,"u'sphinx.ext.doctest',",,,,,"u'sphinx.ext.doctest',"
Exponent = ur'[eE][-+]?[0-9](?:_?[0-9])*',2,,,,,,,,,,
"flags.append(u""More Fragments (MF)"")",2,,,,,"u""More",,,,,"u""More"
self._target_position = self._current_movement[u'target_position'],2,,,,,u'target_position'],,,,,u'target_position']
LINE = '\x03',2,,,,,,,,,,
"x,y1,y2,y3,y4 = eachLine.split(u',')",2,,,,,"u',')",,,,,"u',')"
SHORTPRESS = '\x01',2,,,,,,,,,,
GET_LOG_NAME = '\x19',2,,,,,,,,,,
S1AB=S1AB[0].split(u'/'),2,,,,,u'/'),,,,,u'/')
self.downLoad = QPushButton(u'Reset and Save Data'),2,,,,,u'Reset,,,,,u'Reset
winIcon1 = u'ico-bio.png',2,,,,,u'ico-bio.png',,,,,u'ico-bio.png'
"def port_right(self, value):",2,,,,,,,,,,
opCp_Gteq8 = '\x58',2,,,,,,,,,,
"motor_pos, **_3to2kwargs",2,,,,,,,,,,
opOutput_Step_Power = '\xAC',2,,,,,,,,,,
"u'ramp_down_time': ramp_down_time,",2,,,,,u'ramp_down_time':,,,,,u'ramp_down_time':
GET_PIN = '\x05',2,,,,,,,,,,
OPEN_APPEND = '\x00',2,,,,,,,,,,
for i in xrange (len(EOF_check)):,2,,,xrange (,,,,,,,xrange (
else: volume =  None,2,,,,,,,,,,
"u'speed_left': speed_left,",2,,,,,u'speed_left':,,,,,u'speed_left':
text=u'POD files',2,,,,,u'POD,,,,,u'POD
"u'write protect': 0x63,",2,,,,,u'write,,,,,u'write
else: reply =  True,2,,,,,,,,,,
SICON_BATT_2 = '\x03',2,,,,,,,,,,
LED_LR = '\x03'  # Left red,2,,,,,,,,,,
_SYSTEM_REPLY = '\x03',2,,,,,,,,,,
"def update(self, progress):",2,,,,,,,,,,
RPAREN = ur'\)',2,,,,,,,,,,
class Stm32UartDfu(object):,2,,,,,,,,,,
self._current_movement[u'last'] = True,2,,,,,u'last'],,,,,u'last']
"self._physical_ev3._introspection[u""volume""] = value",2,,,,,"u""volume""]",,,,,"u""volume""]"
"u'step1_left': step1_left,",2,,,,,u'step1_left':,,,,,u'step1_left':
SEARCH_ITEMS = '\x08',2,,,,,,,,,,
"def sleep(self, value):",2,,,,,,,,,,
self.dtemLabel = QLabel(u'Digital Temperature'),2,,,,,u'Digital,,,,,u'Digital
tmp1=unicode(tmp1[0]),2,,,,,,,unicode(,,,unicode(
"def __init__(self, address = u"""", port = 0, *args, **kwargs):",2,,,,,"u"""",",,,,,"u"""","
"0x1E: u""NETBLT"",    0x1F: u""MFE-NSP"",     0x20: u""MERIT-INP"",",2,,,,,"u""NETBLT"",",,,,,"u""NETBLT"","
"resolver = dns.resolver.Resolver(arguments.get(u""filename""), arguments.get(u""configure_resolver""))",2,,,,,"u""filename""),",,,,,"u""filename""),"
"u'Format: [{""address"": ""value"", ""size"": ""value""}, ...]',",2,,,,,u'Format:,,,,,u'Format:
opMul16 = '\x19',2,,,,,,,,,,
if 'color' in kwargs: color = kwargs['color']; del kwargs['color'],2,,,,,,,,,,
"0x39: u""SKIP"",      0x3A: u""IPv6-ICMP"",   0x3B: u""IPv6-NoNxt"",",2,,,,,"u""SKIP"",",,,,,"u""SKIP"","
"u""tempo"": 80,",2,,,,,"u""tempo"":",,,,,"u""tempo"":"
WAIT_VERT = '\x05',2,,,,,,,,,,
u'duration must be positive',2,,,,,u'duration,,,,,u'duration
else: slow =  None,2,,,,,,,,,,
"def print(*messages, **kwargs):",2,"print(*messages,",,,,,,,,,"print(*messages,"
"if direction == u""c"":",2,,,,,"u""c"":",,,,,"u""c"":"
"def __init__(self, endless = False):",2,,,,,,,,,,
dat = u':'.join(,2,,,,,u':'.join(,,,,,u':'.join(
self._send_command(self._COMMAND[u'extended erase']),2,,,,,u'extended,,,,,u'extended
tmp1=glob.glob(info+u'/measurement/*'+iw+u'*'+polar+u'*'+u'.tiff'),2,,,,,u'/measurement/*'+iw+u'*'+polar+u'*'+u'.tiff'),,,,,u'/measurement/*'+iw+u'*'+polar+u'*'+u'.tiff')
DEL_CRLF = '\x07'  # Use return+line feed as delimiter,2,,,,,,,,,,
GET_PRGRESULT = '\x18',2,,,,,,,,,,
[port_motor_input(self._port)][u'used_by'] is not None:,2,,,,,u'used_by'],,,,,u'used_by']
print f'Erasing {args.size} bytes from {args.address}...',2,,,,,,print f'Erasing {args.size} bytes from {args.address}...',,,,print f'Erasing {args.size} bytes from {args.address}...'
"hosts.add(host[u""ip""])",2,,,,,"u""ip""])",,,,,"u""ip""])"
"u'32s',",2,,,,,"u'32s',",,,,,"u'32s',"
"(u""raw_ecn"", c_ubyte, 2),",2,,,,,"u""raw_ecn"",",,,,,"u""raw_ecn"","
"frame.grid(row=2, column=3, sticky=u'nw', rowspan=8, columnspan=2)",2,,,,,"u'nw',",,,,,"u'nw',"
"(tmp[i:i + 2] for i in xrange(0, len(tmp), 2))",2,,,xrange(,,,,,,,xrange(
"u'sphinx.ext.coverage',",2,,,,,"u'sphinx.ext.coverage',",,,,,"u'sphinx.ext.coverage',"
VIEW_VALUE = '\x16',2,,,,,,,,,,
"u'ack': 0x79.to_bytes(length=1, byteorder=u'little'),",2,,,,,u'ack':,,,,,u'ack':
GET_VOLUME = '\x04',2,,,,,,,,,,
opSub32 = '\x16',2,,,,,,,,,,
WARNING_MEMORY = '\x08',2,,,,,,,,,,
"references = {u""Base Script"": u""https://gist.github.com/chokepoint/28bed027606c5086ed9eeb274f3b840a""}",2,,,,,"u""Base",,,,,"u""Base"
"requirements = set([u""censys""])",2,,,,,"u""censys""])",,,,,"u""censys""])"
"SYNC = u'SYNC'  # always with reply, always wait for reply",2,,,,,u'SYNC',,,,,u'SYNC'
print datetime.now().strftime(u'%H:%M:%S.%f') +,2,,,,,u'%H:%M:%S.%f'),print datetime.now().strftime(u'%H:%M:%S.%f'),,,,u'%H:%M:%S.%f') print datetime.now().strftime(u'%H:%M:%S.%f')
ops += ''.join((,2,,,,,,,,,,
"def get_id(dfu, args):",2,,,,,,,,,,
"md5.decode(u""utf8"")",2,,,,,"u""utf8"")",,,,,"u""utf8"")"
ICON_DISC = '\x1D',2,,,,,,,,,,
"f=open(path_config,u'r')",2,,,,,u'r'),,,,,u'r')
HW_BT = '\x02',2,,,,,,,,,,
elif op == u'|':,2,,,,,u'|':,,,,,u'|':
NORMAL_FONT = '\x00',2,,,,,,,,,,
self.atemVal1.setText((data[0]) +  u' °' ),2,,,,,u' °',,,,,u' °'
if 'volume' in _3to2kwargs: volume = _3to2kwargs['volume']; del _3to2kwargs['volume'],2,,,,,,,,,,
"port, **_3to2kwargs",2,,,,,,,,,,
ASIN = '\x0E'  # !<,2,,,,,,,,,,
WARNING_CURRENT = '\x02',2,,,,,,,,,,
opMailbox_Close = '\xDD',2,,,,,,,,,,
filename1=u'sensor_output.csv',2,,,,,u'sensor_output.csv',,,,,u'sensor_output.csv'
ICON_CHECKBOX = '\x08',2,,,,,,,,,,
GET_VERT = '\x08',2,,,,,,,,,,
opJr_LteqF = '\x77',2,,,,,,,,,,
reply = self._socket.recv(16).decode(u'utf-8'),2,,,,,u'utf-8'),,,,,u'utf-8')
"self._physical_ev3._introspection[u""sensors""][PORT_2][u""type""],",2,,,,,"u""sensors""][PORT_2][u""type""],",,,,,"u""sensors""][PORT_2][u""type""],"
NAME[u'continue'] = CONTINUE,2,,,,,u'continue'],,,,,u'continue']
"u'direction': direction,",2,,,,,u'direction':,,,,,u'direction':
"domain.add_argument(u""--key-people"", action = u""store_true"", help = u""List Executive and VP level employees at this company."")",2,,,,,"u""--key-people"",",,,,,"u""--key-people"","
"elif direction == u""q"":",2,,,,,"u""q"":",,,,,"u""q"":"
else: channel =  None,2,,,,,,,,,,
CLOSE = '\x07',2,,,,,,,,,,
RSHIFT = ur'>>',2,,,,,,,,,,
def port(self):,2,,,,,,,,,,
"val = valraw.decode(u""utf-8"").rstrip()",2,,,,,"u""utf-8"").rstrip()",,,,,"u""utf-8"").rstrip()"
"u'get version': 0x0,",2,,,,,u'get,,,,,u'get
"if tone[1] == u""#"":",2,,,,,"u""#"":",,,,,"u""#"":"
"*struct.unpack(u'<3i', reply)",2,,,,,"u'<3i',",,,,,"u'<3i',"
for i in xrange(num):,2,,,xrange(,,,,,,,xrange(
opInput_ReadExt = '\x9E',2,,,,,,,,,,
print u'No clicked.',2,,,,,u'No,print u'No clicked.',,,,u'No print u'No clicked.'
"u""led_sequence"": (LED_ORANGE, LED_RED_FLASH),",2,,,,,"u""led_sequence"":",,,,,"u""led_sequence"":"
"0x66: u""PNNI"",      0x67: u""PIM"",         0x68: u""ARIS"",",2,,,,,"u""PNNI"",",,,,,"u""PNNI"","
"assert isinstance(value, unicode), u""name needs to be of type str""",2,,,,,"u""name",,,,,"u""name"
"print f'\r[{""-""*self._BAR_MAX_LEN}] failed.'",2,,,,,,"print f'\r[{""-""*self._BAR_MAX_LEN}] failed.'",,,,"print f'\r[{""-""*self._BAR_MAX_LEN}] failed.'"
"name.add_argument(u""--region"", type = unicode, help = u""If supplied, only companies matching given region/state will be returned. For example, --region=New York or --region=NY."")",2,,,,,"u""--region"",",,,,,"u""--region"","
"(u""d''"", 1),",2,,,,,"u""d''"",",,,,,"u""d''"","
else: ramp_up =  15,2,,,,,,,,,,
"if hole_lmc == u""?"" and hole_mmc != u""?"":",2,,,,,"u""?""",,,,,"u""?"""
"elif ct.split(u""/"")[0] == u""text"" and ct.endswith(u""+xml""):",2,,,,,"u""/"")[0]",,,,,"u""/"")[0]"
SICON_WAIT2 = '\x07',2,,,,,,,,,,
PLAY = '\x02',2,,,,,,,,,,
BROWSE_CACHE = '\x02'  # cached / recent files,2,,,,,,,,,,
else u'NXT_ULTRASONIC',2,,,,,u'NXT_ULTRASONIC',,,,,u'NXT_ULTRASONIC'
opSub16 = '\x15',2,,,,,,,,,,
"nameservers = arguments.get(u""nameservers"")",2,,,,,"u""nameservers"")",,,,,"u""nameservers"")"
else: secure =  True,2,,,,,,,,,,
GET_MINUTES = '\x06',2,,,,,,,,,,
TYPE_KEEP = '\x00',2,,,,,,,,,,
"POW = '\x14'  # !< Exponent r = powf(x,y)",2,,,,,,,,,,
u'not the expected movement: ' + self._current_movement[u'op'],2,,,,,u'not,,,,,u'not
"u""ramp_up_time must be positive""",2,,,,,"u""ramp_up_time",,,,,"u""ramp_up_time"
opXor32 = '\x2A',2,,,,,,,,,,
"@_retry(_RETRIES, u'write memory', _serial_flush)",2,,,,,u'write,,,,,u'write
"data=u""null""",2,,,,,"u""null""",,,,,"u""null"""
opMemory_Read = '\x7F',2,,,,,,,,,,
self.ast[1][u'body'] = p.statements,2,,,,,u'body'],,,,,u'body']
@_(u'LPAREN expr RPAREN'),2,,,,,u'LPAREN,,,,,u'LPAREN
def polarity_left(self):,2,,,,,,,,,,
"for certificate in ifilter(lambda cert: self.arguments.domain in cert.get(u""names"", []) and not any(imap(lambda d: d.endswith(u"".cloudflaressl.com"") or d.endswith(u"".cloudflare.com""), cert[u""common_name""])), certificates):",2,,,,,"u""names"",",,,,,"u""names"","
LE = ur'<=',2,,,,,,,,,,
"shaft_mmc = vin(u""Shaft MMC"", u""?"", units=u""in"")",2,,,,,"u""Shaft",,,,,"u""Shaft"
"self.parser.add_argument(u""-p"", u""--port"", type=int, default=53, help=u""The port to which to send queries (Defaults to 53)."")",2,,,,,"u""-p"",",,,,,"u""-p"","
CREATE32 = '\x03',2,,,,,,,,,,
"def put_to_reply_buffer(self, msg_cnt, reply):",2,,,,,,,,,,
print u'Error: checksum mismatch!',2,,,,,u'Error:,print u'Error: checksum mismatch!',,,,u'Error: print u'Error: checksum mismatch!'
"u""beats_per_bar"": 3,",2,,,,,"u""beats_per_bar"":",,,,,"u""beats_per_bar"":"
tmp=glob.glob(info+u'/annotation/*'+iw+u'*'+polar+u'*.xml'),2,,,,,u'/annotation/*'+iw+u'*'+polar+u'*.xml'),,,,,u'/annotation/*'+iw+u'*'+polar+u'*.xml')
"socket_kinds.add_argument(u""--udp"", action = u""store_true"", help = u""Use UDP instead of TCP (SocketKind: SOCK_DGRAM)."")",2,,,,,"u""--udp"",",,,,,"u""--udp"","
EXP = '\x01'  # !< e^x r = expf(x),2,,,,,,,,,,
opMove16_F = '\x37',2,,,,,,,,,,
elif op == u'%':,2,,,,,u'%':,,,,,u'%':
class Compiler(object):,2,,,,,,,,,,
"u""secure needs to be of type bool""",2,,,,,"u""secure",,,,,"u""secure"
ICON_FROM_FOLDER = '\x07',2,,,,,,,,,,
def commands(self):,2,,,,,,,,,,
"direction = unicode(vin(u""Convert [c]urrent timezone to other timezone, or (o)ther timezone to current, or (q)uit"", u""c""))",2,,,,,"u""Convert",,unicode(,,,"u""Convert unicode("
"edTxt.config(state=u""readonly"")",2,,,,,"u""readonly"")",,,,,"u""readonly"")"
u'brake must be a boolean',2,,,,,u'brake,,,,,u'brake
"if hole_lmc != u""?"":",2,,,,,"u""?"":",,,,,"u""?"":"
"0x15: u""PRM"",       0x16: u""XNS-IDP"",     0x17: u""TRUNK-1"",",2,,,,,"u""PRM"",",,,,,"u""PRM"","
for n in xrange(4):,2,,,xrange(,,,,,,,xrange(
GET_EVENT = '\x04',2,,,,,,,,,,
"self.show_frame(u""Info"")",2,,,,,"u""Info"")",,,,,"u""Info"")"
def parse_options(raw_options):,2,,,,,,,,,,
@_(u'DEF NAME LPAREN def_params RPAREN COLON NAME LBRACE statements RBRACE'),2,,,,,u'DEF,,,,,u'DEF
"btn_create=tk.Button(self, text=u""Create"", command=Create)",2,,,,,"u""Create"",",,,,,"u""Create"","
"assert isinstance(tld, unicode), \",2,,,,,,,,,,
"console.print(f"" -  {e}"", color = u""red"", dark = True)",2,"print(f""",,,,"u""red"",",,,,,"print(f"" u""red"","
TO_EXECUTE = '\x0D',2,,,,,,,,,,
"u'Select the dem.grd file ',",2,,,,,u'Select,,,,,u'Select
opCp_Gteq32 = '\x5A',2,,,,,,,,,,
"if keyPeople: url += u""&keyPeople=true""",2,,,,,"u""&keyPeople=true""",,,,,"u""&keyPeople=true"""
u'duration must be a number',2,,,,,u'duration,,,,,u'duration
"u'Port_A',",2,,,,,"u'Port_A',",,,,,"u'Port_A',"
GRAPH_SETUP = '\x1E',2,,,,,,,,,,
g.write(u'preproc_batch_tops_esd.csh data.in dem.grd 2\n'),2,,,,,u'preproc_batch_tops_esd.csh,,,,,u'preproc_batch_tops_esd.csh
else: protocol =  None,2,,,,,,,,,,
opJr_Neq32 = '\x72',2,,,,,,,,,,
"def __init__(self, song, jukebox):",2,,,,,,,,,,
"return (u'FuncCall',{u'params':params,u'name':name})",2,,,,,"u'FuncCall',{u'params':params,u'name':name})",,,,,"u'FuncCall',{u'params':params,u'name':name})"
"print u'Current time is: {0} or {1}'.format(time.asctime(gmtime()) + u""z"", time.asctime(localtime()) + u"" "" + time.tzname[0]) + u""/"" + unicode(int(time.timezone/60/60)) + u""hrs""",2,,,,,u'Current,print u'Current time is: {0} or {1}'.format(time.asctime(gmtime()),unicode(,,,u'Current print u'Current time is: {0} or {1}'.format(time.asctime(gmtime()) unicode(
"u'ip_adr',",2,,,,,"u'ip_adr',",,,,,"u'ip_adr',"
elif branch[0] == u'Def':,2,,,,,u'Def':,,,,,u'Def':
TYPE_REFRESH_BROWSER = '\x22',2,,,,,,,,,,
def channel(self):,2,,,,,,,,,,
ICON_OPENFOLDER = '\x21',2,,,,,,,,,,
u'Erase memory failed: can not find boundaries ',2,,,,,u'Erase,,,,,u'Erase
"struct.pack(u'<H', 1012),      # SIZE",2,,,,,"u'<H',",,,,,"u'<H',"
"label=tk.Label(self, text=u'File name for step 1.')",2,,,,,u'File,,,,,u'File
u'led_pattern must be of type bytes',2,,,,,u'led_pattern,,,,,u'led_pattern
assert reply == u'2C:00',2,,,,,u'2C:00',,,,,u'2C:00'
opMoveF_8 = '\x3C',2,,,,,,,,,,
"self, **_3to2kwargs",2,,,,,,,,,,
"lhs, lhs_type = self.visit_value(branch[1][u'lhs'])",2,,,,,u'lhs']),,,,,u'lhs'])
"value = self.builder.fcmp_ordered(u'==',lhs,rhs)",2,,,,,"u'==',lhs,rhs)",,,,,"u'==',lhs,rhs)"
def touched(self):,2,,,,,,,,,,
"if proxy.port: kwargs[u""port""] = proxy.port",2,,,,,"u""port""]",,,,,"u""port""]"
"rb2.config(state=u""disabled"")",2,,,,,"u""disabled"")",,,,,"u""disabled"")"
"u'float':ir.FloatType(),",2,,,,,"u'float':ir.FloatType(),",,,,,"u'float':ir.FloatType(),"
"if proxy.username: kwargs[u""username""] = proxy.username",2,,,,,"u""username""]",,,,,"u""username""]"
GRAPH_SAMPLE = '\x1E',2,,,,,,,,,,
"if self._physical_ev3._introspection[u""sensors""] \",2,,,,,"u""sensors""]",,,,,"u""sensors""]"
opMove32_16 = '\x39',2,,,,,,,,,,
u'angle needs to be a number',2,,,,,u'angle,,,,,u'angle
NAME[u'return'] = RETURN,2,,,,,u'return'],,,,,u'return']
u'ev3_obj needs to be active',2,,,,,u'ev3_obj,,,,,u'ev3_obj
class _Tracking(object):,2,,,,,,,,,,
"(u""c''"", 1),",2,,,,,"u""c''"",",,,,,"u""c''"","
elif op == u'>=':,2,,,,,u'>=':,,,,,u'>=':
"(u""g'"", .5),",2,,,,,"u""g'"",",,,,,"u""g'"","
NO_BUTTON = '\x00',2,,,,,,,,,,
ast = ast[1][u'body'],2,,,,,u'body'],,,,,u'body']
GET_ON_OFF = '\x01',2,,,,,,,,,,
u':'.join(u'{:02X}'.format(byte) for byte in reply[6:7]) +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
port_str = u'PORT_D',2,,,,,u'PORT_D',,,,,u'PORT_D'
"self.parser.add_argument(u""query"", type=unicode, help=u""Query string."")",2,,,,,"u""query"",",,,,,"u""query"","
"actions.add_argument(u""-s"", u""--stats"", type = unicode, metavar = u""period"", const = u"""", nargs = u""?"", help = u""Query FullContact to view your API account usage for the current month or a previous month defined by you. The format is YYYY-MM (e.g: --stats 2017-10)."")",2,,,,,"u""-s"",",,,,,"u""-s"","
print u'rawclose = ' + rawclose,2,,,,,u'rawclose,print u'rawclose = ' + rawclose,,,,u'rawclose print u'rawclose = ' + rawclose
"resolver.set_flags(arguments.get(u""flags""))",2,,,,,"u""flags""))",,,,,"u""flags""))"
WAIT_FOR_PRESS = '\x03',2,,,,,,,,,,
WRITEMAILBOX = '\x9E',2,,,,,,,,,,
"0x1B: u""RDP"",       0x1C: u""IRTP"",        0x1D: u""ISO-TP4"",",2,,,,,"u""RDP"",",,,,,"u""RDP"","
GET_POOL = '\x0B',2,,,,,,,,,,
def sensor_type(self):,2,,,,,,,,,,
self.dtemVal = QLabel(unicode(y3) +  u' °' ),2,,,,,u' °',,unicode(,,,u' °' unicode(
"u""upbeat"": 1,",2,,,,,"u""upbeat"":",,,,,"u""upbeat"":"
"response = api.person(self.arguments.phone, u""phone"", countryCode = self.arguments.country_code, **kwargs, **pkwargs)",2,,,,,"u""phone"",",,,,,"u""phone"","
"print u""\x1B\x5B2J"",; sys.stdout.write(u"""")",2,,,,,"u""\x1B\x5B2J"",;","print u""\x1B\x5B2J"",; sys.stdout.write(u"""")",,,,"u""\x1B\x5B2J"",; print u""\x1B\x5B2J"",; sys.stdout.write(u"""")"
u'Protocol ' + protocol + u'is not valid',2,,,,,u'Protocol,,,,,u'Protocol
VALUE32 = '\x0B',2,,,,,,,,,,
"super(API, self).__init__(f""https://api.fullcontact.com/v{version}/"")",2,,,,,,,,,,
BTTYPE_PHONE = '\x04'  # Bluetooth type PHONE,2,,,,,,,,,,
"assert commands, u""Invalid executable Program!""",2,,,,,"u""Invalid",,,,,"u""Invalid"
u'''pytest ev3_dc.EV3''',2,,,,,u'''pytest,,,,,u'''pytest
"u""port_right needs to be one of (PORT_A, PORT_B, PORT_C, PORT_D)""",2,,,,,"u""port_right",,,,,"u""port_right"
file_dest = path.split(u'/')[-1],2,,,,,u'/')[-1],,,,,u'/')[-1]
"prefix = u""|  "" * depth",2,,,,,"u""|",,,,,"u""|"
opCom_Set = '\xD4',2,,,,,,,,,,
"file_add = open(filename, u""a"")",2,,,,,"u""a"")",,,,,"u""a"")"
"len_data = struct.unpack(u'<H', reply[:2])[0] + 2",2,,,,,"u'<H',",,,,,"u'<H',"
SICON_BT_ON = '\x08',2,,,,,,,,,,
reply_2_str = u':'.join(u'{:02X}'.format(byte) for byte in reply_2),2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
"super(Color, self).__del__()",2,,,,,,,,,,
LED = '\x1B',2,,,,,,,,,,
GET_SYMBOL = '\x06',2,,,,,,,,,,
"self._introspection[u""hw_vers""] = hw_vers.split('\x00')[0].decode(u""utf8"")",2,,,,,"u""hw_vers""]",,,,,"u""hw_vers""]"
"song, **_3to2kwargs",2,,,,,,,,,,
"kwargs[u""type""] = SOCK_RAW",2,,,,,"u""type""]",,,,,"u""type""]"
self._led_sequence = song[u'led_sequence'],2,,,,,u'led_sequence'],,,,,u'led_sequence']
"u""ramp_up must be an int""",2,,,,,"u""ramp_up",,,,,"u""ramp_up"
"super(DfuSerialIOException, self).__init__(",2,,,,,,,,,,
"u'direction': direction,",2,,,,,u'direction':,,,,,u'direction':
SICON_WAIT1 = '\x06',2,,,,,,,,,,
def ramp_down(self):,2,,,,,,,,,,
SCROLL = '\x14',2,,,,,,,,,,
opOutput_Time_Speed = '\xAF',2,,,,,,,,,,
"return (u'Expression',{u'op':op,u'lhs':lhs,u'rhs':rhs})",2,,,,,"u'Expression',{u'op':op,u'lhs':lhs,u'rhs':rhs})",,,,,"u'Expression',{u'op':op,u'lhs':lhs,u'rhs':rhs})"
def distance(self):,2,,,,,,,,,,
CONNEC_ITEM = '\x12',2,,,,,,,,,,
SICON_USB = '\x15',2,,,,,,,,,,
from functools import wraps,2,,,,,,,,,,
"self.parser.add_argument(u""-R"", u""--one-rr-per-rrset"", action=u""store_true"", help=u""Put each RR into its own RRset (Only useful when executing MetaQueries)."")",2,,,,,"u""-R"",",,,,,"u""-R"","
"(u""e'"", 1),",2,,,,,"u""e'"",",,,,,"u""e'"","
"elif tone[1] == u""b"":",2,,,,,"u""b"":",,,,,"u""b"":"
"u'brake': brake,",2,,,,,u'brake':,,,,,u'brake':
"if shaft_lmc != u""?"":",2,,,,,"u""?"":",,,,,"u""?"":"
"return(Type,{u'value':value})",2,,,,,u'value':value}),,,,,u'value':value})
ports = [u'COM%s' % (i + 1) for i in xrange(256)],2,,,xrange(,,u'COM%s',,,,,xrange( u'COM%s'
ICON_CONNECT = '\x10',2,,,,,,,,,,
RELEASE = '\x06',2,,,,,,,,,,
"u""data needs to be of type bytes""",2,,,,,"u""data",,,,,"u""data"
ICON_WAIT2 = '\x15',2,,,,,,,,,,
return (raw_input(input_prompt) or defvalue),2,,,,,,,,,raw_input(,raw_input(
self._current_movement[u'target_position'],2,,,,,u'target_position'],,,,,u'target_position']
opCp_NeF = '\x53',2,,,,,,,,,,
"(u""raw_source"", c_ulong),",2,,,,,"u""raw_source"",",,,,,"u""raw_source"","
"elif tone.endswith(u""'""):",2,,,,,"u""'""):",,,,,"u""'""):"
"self._serial_write(0x7f.to_bytes(1, u'big'))",2,,,,,u'big')),,,,,u'big'))
ramp_up = _3to2kwargs['ramp_up']; del _3to2kwargs['ramp_up'],2,,,,,,,,,,
"u'ramp_up_time': ramp_up_time,",2,,,,,u'ramp_up_time':,,,,,u'ramp_up_time':
"u""song must have a key 'tones'""",2,,,,,"u""song",,,,,"u""song"
opProgram_Info = '\x0C',2,,,,,,,,,,
def cont(self):,2,,,,,,,,,,
"txt, **_3to2kwargs",2,,,,,,,,,,
"u""turn needs to be in range [-200 - 200]""",2,,,,,"u""turn",,,,,"u""turn"
"kwargs_cont={u'repeat': True, u'volume': volume},",2,,,,,u'repeat':,,,,,u'repeat':
class Tones(object):,2,,,,,,,,,,
"ramp_up=self._current_movement[u'ramp_up'],",2,,,,,"u'ramp_up'],",,,,,"u'ramp_up'],"
"(u""opt_number"", c_ubyte, 5),",2,,,,,"u""opt_number"",",,,,,"u""opt_number"","
"super(Touch, self).__exit__(exc_type, exc_value, exc_traceback)",2,,,,,,,,,,
"u'Jukebox as',",2,,,,,u'Jukebox,,,,,u'Jukebox
for i in xrange(6),2,,,xrange(,,,,,,,xrange(
return_type = self.type_map[branch[1][u'return']],2,,,,,u'return']],,,,,u'return']]
"self.controller.show_frame(u""Step2"")",2,,,,,"u""Step2"")",,,,,"u""Step2"")"
input_prompt = prompt + u' [' + unicode(defvalue) + u'] ? ',2,,,,,u' [',,unicode(,,,u' [' unicode(
"def send_and_play(data, **_3to2kwargs):",2,,,,,,,,,,
"actions.add_argument(u""-e"", u""--exec"", u""--execute"", dest = u""executable"", metavar = u""PROGRAM"", type = unicode, help = u""Execute the specified program."")",2,,,,,"u""-e"",",,,,,"u""-e"","
opMoveF_16 = '\x3D',2,,,,,,,,,,
"self.parser.add_argument(u""-T"", u""--timeout"", type=int, default=8, help=u""The number of seconds to wait for a response from a server, before timing out."")",2,,,,,"u""-T"",",,,,,"u""-T"","
"radius, **_3to2kwargs",2,,,,,,,,,,
"u""delta_time must be positive""",2,,,,,"u""delta_time",,,,,"u""delta_time"
opTimer_Read_Us = '\x8F'  # TIMER,2,,,,,,,,,,
QUESTION = '\x0C',2,,,,,,,,,,
"def _retry(retry_num = 0, action = u'', exc_call = None):",2,,,,,"u'',",,,,,"u'',"
"def erase(self, dfu, args):",2,,,,,,,,,,
SET_LOG_SYNC_TIME = '\x0C',2,,,,,,,,,,
"mac_addr = u':'.join((tmp[i:i + 2] for i in xrange(0, len(tmp), 2)))",2,,,xrange(,,u':'.join((tmp[i:i,,,,,xrange( u':'.join((tmp[i:i
opCom_Get = '\xD3',2,,,,,,,,,,
opJr_Lteq32 = '\x76',2,,,,,,,,,,
"binary = [(byte >> bit) & 1 for bit in xrange(7, -1, -1)]",2,,,xrange(,,,,,,,xrange(
"u""Can't erase specified size of memory without memory map."")",2,,,,,"u""Can't",,,,,"u""Can't"
assert dump.count('\xff') == len(dump),2,,,,,,,,,,
GET_PRESENT = '\x0F',2,,,,,,,,,,
TO_MANUAL = '\x07',2,,,,,,,,,,
"phone = self.parser.add_argument_group(u""Phone Lookup"")",2,,,,,"u""Phone",,,,,"u""Phone"
print answer.response,2,,,,,,print answer.response,,,,print answer.response
LED_GREEN = '\x01',2,,,,,,,,,,
@_(u'def_params COMMA def_param'),2,,,,,u'def_params,,,,,u'def_params
ERRORTEXT = '\x03',2,,,,,,,,,,
"self.iw_tmp=[u'iw1',u'iw2',u'iw3']",2,,,,,"u'iw1',u'iw2',u'iw3']",,,,,"u'iw1',u'iw2',u'iw3']"
def volume(self):,2,,,,,,,,,,
LED_ORANGE = '\x03',2,,,,,,,,,,
"u'address': u'Memory address for ',",2,,,,,u'address':,,,,,u'address':
from __future__ import division,2,,__future__ ,,,,,,,,__future__ 
"u""volume needs to be an int""",2,,,,,"u""volume",,,,,"u""volume"
self._send_command(self._COMMAND[u'get version and protection status']),2,,,,,u'get,,,,,u'get
"super(Touch, self).__init__(",2,,,,,,,,,,
"assert u'led_sequence' in song, \",2,,,,,u'led_sequence',,,,,u'led_sequence'
else: speed =  10,2,,,,,,,,,,
opJr_Gt16 = '\x69',2,,,,,,,,,,
"fingerprint, common_name, names, sdn = (certificate[u""fingerprint_sha256""],",2,,,,,"u""fingerprint_sha256""],",,,,,"u""fingerprint_sha256""],"
"reply = str(self._device.read(1024, 0))",2,,,,,,,,,,
"super(Voice, self).__init__(",2,,,,,,,,,,
DELETE = '\x00',2,,,,,,,,,,
u'master_image = S1_'+Master_date+u'_ALL_F'+iw[-1]),2,,,,,u'master_image,,,,,u'master_image
"self._physical_ev3._introspection[u""sleep""] = value",2,,,,,"u""sleep""]",,,,,"u""sleep""]"
opCp_Lteq32 = '\x56',2,,,,,,,,,,
u'speed  must be in range [1 - 100]',2,,,,,u'speed,,,,,u'speed
"elif shaft_lmc != u""?"" and shaft_mmc == u""?"":",2,,,,,"u""?""",,,,,"u""?"""
opMove32_F = '\x3B',2,,,,,,,,,,
opOutput_Polarity = '\xA7',2,,,,,,,,,,
BEGIN_UPLOAD = '\x94',2,,,,,,,,,,
"port_str = u'PORT_' + unicode(1 + struct.unpack(u""<B"", self._port)[0])",2,,,,,u'PORT_',,unicode(,,,u'PORT_' unicode(
opCom_Writefile = '\xD7',2,,,,,,,,,,
else: tracking_callback =  None,2,,,,,,,,,,
WRITE_BYTES = '\x1D',2,,,,,,,,,,
if branch[0] == u'Number':,2,,,,,u'Number':,,,,,u'Number':
u'port_left must be different from port_right',2,,,,,u'port_left,,,,,u'port_left
SYSTEM_FILE_EXITS = '\x07',2,,,,,,,,,,
opMath = '\x8D',2,,,,,,,,,,
"if clearance != u""?"":",2,,,,,"u""?"":",,,,,"u""?"":"
PORT_C_SENSOR = '\x12',2,,,,,,,,,,
self.dhumLabel = QLabel(u'Digital Humidity'),2,,,,,u'Digital,,,,,u'Digital
WARN_MEMORY = '\x1B',2,,,,,,,,,,
NAME[u'if'] = IF,2,,,,,u'if'],,,,,u'if']
LPAREN = ur'\(',2,,,,,,,,,,
"load_command.add_argument(u'-r', u'--run', action=u'store_true',",2,,,,,"u'-r',",,,,,"u'-r',"
@_(u'NAME COLON NAME'),2,,,,,u'NAME,,,,,u'NAME
[u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
"return str(output), key",2,,,,,,,,,,
"if shaft_lmc == u""?"" and shaft_mmc != u""?"":",2,,,,,"u""?""",,,,,"u""?"""
"help=u' '.join([_ARGS_HELP[u'address'], u'loading binary file.']))",2,,,,,"u' '.join([_ARGS_HELP[u'address'],",,,,,"u' '.join([_ARGS_HELP[u'address'],"
"speed,",2,,,,,,,,,,
opDiv16 = '\x1D',2,,,,,,,,,,
SET_PIN = '\x05',2,,,,,,,,,,
MINUS = ur'-',2,,,,,,,,,,
if branch[0] == u'VarAssign':,2,,,,,u'VarAssign':,,,,,u'VarAssign':
"def del_file(self, path):",2,,,,,,,,,,
return ''.join((,2,,,,,,,,,,
[port_motor_input(self._port_right)][u'used_by'] = self,2,,,,,u'used_by'],,,,,u'used_by']
splash_pic1 = u'12.jpg',2,,,,,u'12.jpg',,,,,u'12.jpg'
"text=u'Basic Information',",2,,,,,u'Basic,,,,,u'Basic
"tk.Button(self, text=u""Browse"", command=lambda *args:browse(2)),",2,,,,,"u""Browse"",",,,,,"u""Browse"","
"tread, **_3to2kwargs",2,,,,,,,,,,
name = branch[1][u'name'],2,,,,,u'name'],,,,,u'name']
orelse = branch[1][u'orelse'],2,,,,,u'orelse'],,,,,u'orelse']
u'timeout': 1  # seconds,2,,,,,u'timeout':,,,,,u'timeout':
opObject_Start = '\x05',2,,,,,,,,,,
PLUS = ur'\+',2,,,,,,,,,,
XOR = ur'\^',2,,,,,,,,,,
opAnd32 = '\x26',2,,,,,,,,,,
os.makedirs(u'topo'),2,,,,,u'topo'),,,,,u'topo')
round(cur_mov[u'target_motor_pos'][1]) -,2,,,,,u'target_motor_pos'][1]),,,,,u'target_motor_pos'][1])
CURRENT_SLOT = '\x21',2,,,,,,,,,,
"0x27: u""TP++"",      0x28: u""IL"",          0x29: u""IPv6"",",2,,,,,"u""TP++"",",,,,,"u""TP++"","
"u'relations.html',  # needs 'show_related': True theme option to display",2,,,,,"u'relations.html',",,,,,"u'relations.html',"
VALUE_TO_STRING = '\x06',2,,,,,,,,,,
target_position = self._current_movement[u'target_position'],2,,,,,u'target_position'],,,,,u'target_position']
self._current_movement[u'last_time'] = now,2,,,,,u'last_time'],,,,,u'last_time']
"title=u""Select a directory"")",2,,,,,"u""Select",,,,,"u""Select"
def next_msg_cnt(self):,2,,,,,,,,,,
+ xml_list[i] +u'\n'),2,,,,,u'\n'),,,,,u'\n')
if platform.system() == u'Darwin':,2,,,,,u'Darwin':,,,,,u'Darwin':
"if method is u""phone"":",2,,,,,"u""phone"":",,,,,"u""phone"":"
SET_MODE2 = '\x0D',2,,,,,,,,,,
"u'void':ir.VoidType(),",2,,,,,"u'void':ir.VoidType(),",,,,,"u'void':ir.VoidType(),"
"self.parser.add_argument(u""-c"", u""--crlf"", action = u""store_true"", help = u""Use CRLF for EOL sequences."")",2,,,,,"u""-c"",",,,,,"u""-c"","
SUB = '\x0A',2,,,,,,,,,,
Hexnumber = ur'0[xX](?:_?[0-9a-fA-F])+',2,,,,,,,,,,
ENCRYPT_NONE = '\x00',2,,,,,,,,,,
"self.api_id = self.api_secret = u""""",2,,,,,"u""""",,,,,"u"""""
"super(Motor, self).__exit__(exc_type, exc_value, exc_traceback)",2,,,,,,,,,,
"def _set_address(self, address):",2,,,,,,,,,,
if err != '':,2,,,,,,,,,,
u'no controlled movement',2,,,,,u'no,,,,,u'no
data = '',2,,,,,,,,,,
TST_OPEN = '\x0A',2,,,,,,,,,,
).quantize(Decimal(u'1.0000')),2,,,,,u'1.0000')),,,,,u'1.0000'))
opCp_Ne16 = '\x51',2,,,,,,,,,,
"def run(dfu, args):",2,,,,,,,,,,
"@pytest.fixture(scope=u'module', params=[u'memory_map/stm32f407.json'])",2,,,,,"u'module',",,,,,"u'module',"
KEYBOARD = '\x0D',2,,,,,,,,,,
"def list_dir(self, path):",2,,,,,,,,,,
"def __init__(self, ports = {80: 80}, discard_key = False, detached = False, private_key = None, controller = None):",2,,,,,,,,,,
tmp=image_list[i].split(u'.'),2,,,,,u'.'),,,,,u'.')
VALUE16 = '\x0A',2,,,,,,,,,,
"def delta_time(self, value):",2,,,,,,,,,,
file_dest = path_dest.split(u'/')[-1],2,,,,,u'/')[-1],,,,,u'/')[-1]
"u""global_mem needs to be positive""",2,,,,,"u""global_mem",,,,,"u""global_mem"
"(u""raw_dscp"", c_ubyte, 6),",2,,,,,"u""raw_dscp"",",,,,,"u""raw_dscp"","
ICON_FOLDER2 = '\x02',2,,,,,,,,,,
else: dark =  False,2,,,,,,,,,,
"tk.Button(self, text=u""Browse"", command=lambda *args:browse(5))]",2,,,,,"u""Browse"",",,,,,"u""Browse"","
print fileName,2,,,,,,print fileName,,,,print fileName
"self.sensors_as_dict[port_motor_input(self._port)] = struct.unpack(u'<b', reply)[0]",2,,,,,"u'<b',",,,,,"u'<b',"
ops = ''.join((,2,,,,,,,,,,
GET_TBATT = '\x05',2,,,,,,,,,,
"print u""Open file "" + filename",2,,,,,"u""Open","print u""Open file "" + filename",,,,"u""Open print u""Open file "" + filename"
def remotes(self):,2,,,,,,,,,,
round(cur_mov[u'target_motor_pos'][0]) -,2,,,,,u'target_motor_pos'][0]),,,,,u'target_motor_pos'][0])
u'tld must be a str',2,,,,,u'tld,,,,,u'tld
LED_RED = '\x02',2,,,,,,,,,,
"help=u' '.join([_ARGS_HELP[u'address'], u'dump.']))",2,,,,,"u' '.join([_ARGS_HELP[u'address'],",,,,,"u' '.join([_ARGS_HELP[u'address'],"
help=_ARGS_HELP[u'memmap']),2,,,,,u'memmap']),,,,,u'memmap'])
[self._port][u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
"0x8E: u""ROHC""}",2,,,,,"u""ROHC""}",,,,,"u""ROHC""}"
print rtp.payload,2,,,,,,print rtp.payload,,,,print rtp.payload
@_(u'def_param'),2,,,,,u'def_param'),,,,,u'def_param')
u'''reads busy state of motors (returns operations),2,,,,,u'''reads,,,,,u'''reads
"def __init__(self, api_id = u"""", api_secret = u""""):",2,,,,,"u"""",",,,,,"u"""","
"u""global_mem has a maximum of 1019""",2,,,,,"u""global_mem",,,,,"u""global_mem"
"0x59: u""OSPF"",      0x5A: u""Sprite-RPC"",  0x5B: u""LARP"",",2,,,,,"u""OSPF"",",,,,,"u""OSPF"","
else: sync_mode =  None,2,,,,,,,,,,
self._send_command(self._COMMAND[u'go']),2,,,,,u'go']),,,,,u'go'])
"kwargs = dict((v, arguments.get(k)) for k, v in {u""rdclass"": u""rdclass"", u""edns"": u""use_edns"", u""want_dnssec"": u""want_dnssec"", u""edns_flags"": u""ednsflags"", u""edns_payload"": u""request_payload""}.items())",2,,,,,"u""rdclass"":",,,,,"u""rdclass"":"
"def _print(self, progress = None):",2,,,,,,,,,,
"progress_update = lambda *_: None, **_3to2kwargs):",2,,,,,,,,,,
"for dict in {u""Notes"": notes, u""References"": references, u""Credits"": credits}.items():",2,,,,,"u""Notes"":",,,,,"u""Notes"":"
ICON_WIFI = '\x0A',2,,,,,,,,,,
"text=u'Step 2. Processing (DInSAR)',",2,,,,,u'Step,,,,,u'Step
GET_ITEM = '\x13',2,,,,,,,,,,
"(u""opt_length"", c_ubyte, 8)]",2,,,,,"u""opt_length"",",,,,,"u""opt_length"","
opMoveF_F = '\x3F',2,,,,,,,,,,
"super(Color, self).__exit__(exc_type, exc_value, exc_traceback)",2,,,,,,,,,,
"print u""File was saved at "" + dst",2,,,,,"u""File","print u""File was saved at "" + dst",,,,"u""File print u""File was saved at "" + dst"
"if u""OK"" in resp:",2,,,,,"u""OK""",,,,,"u""OK"""
ur'\.[0-9](?:_?[0-9])*') + maybe(Exponent),2,,,,,,,,,,
u'used_by': None,2,,,,,u'used_by':,,,,,u'used_by':
params_name = [x[u'name'] for x in params],2,,,,,u'name'],,,,,u'name']
DEL_TAB = '\x01'  # Use tab as delimiter,2,,,,,,,,,,
"protocol,",2,,,,,,,,,,
"elif tone.startswith(u""e""):",2,,,,,"u""e""):",,,,,"u""e""):"
"if u""v4"" in val:",2,,,,,"u""v4""",,,,,"u""v4"""
"value = self.builder.fcmp_ordered(u'<',lhs,rhs)",2,,,,,"u'<',lhs,rhs)",,,,,"u'<',lhs,rhs)"
speed = _3to2kwargs['speed']; del _3to2kwargs['speed'],2,,,,,,,,,,
def _final_move_for(self):,2,,,,,,,,,,
cur_mov[u'last_motor_pos'] = cur_mov[u'start_motor_pos'],2,,,,,u'last_motor_pos'],,,,,u'last_motor_pos']
FAVOUR_ITEM = '\x0B',2,,,,,,,,,,
GET_ID = '\x0C',2,,,,,,,,,,
"except TypeError, e:",2,,,,,,,,,,
"for j in xrange (i+1,Num_data):",2,,,xrange (,,,,,,,xrange (
"state=u""disabled"",",2,,,,,"u""disabled"",",,,,,"u""disabled"","
else: ramp_up_time =  0.15,2,,,,,,,,,,
opJr_Lt8 = '\x64'  # BRANCH,2,,,,,,,,,,
"def erase(self, address = None, size = None,",2,,,,,,,,,,
"u""error "" +",2,,,,,"u""error",,,,,"u""error"
@_(ur'\n'),2,,,,,,,,,,
"u'go': 0x21,",2,,,,,u'go':,,,,,u'go':
opInput_Write = '\x9F',2,,,,,,,,,,
"return (0xff & val).to_bytes(1, u'big')",2,,,,,u'big'),,,,,u'big')
HALTED = '\x80',2,,,,,,,,,,
"btn2.config(state=u""normal"")",2,,,,,"u""normal"")",,,,,"u""normal"")"
"u'ramp_up_time': ramp_up_time,",2,,,,,u'ramp_up_time':,,,,,u'ramp_up_time':
port_str = u'PORT_A',2,,,,,u'PORT_A',,,,,u'PORT_A'
CONNEC_ITEMS = '\x11',2,,,,,,,,,,
"), u'current movement in progress'",2,,,,,u'current,,,,,u'current
PICTURE = '\x07',2,,,,,,,,,,
TIMES = ur'\*',2,,,,,,,,,,
")[0].split('\x00')[0].decode(u""utf8"")",2,,,,,"u""utf8"")",,,,,"u""utf8"")"
author = u'Christoph Gaukel',2,,,,,u'Christoph,,,,,u'Christoph
"super(Gyro, self).__init__(",2,,,,,,,,,,
"assert isinstance(value, unicode), \",2,,,,,,,,,,
"dump_command.add_argument(u'-s', u'--size', default=None,",2,,,,,"u'-s',",,,,,"u'-s',"
g.write(u'\nintf_tops.csh intf.in batch_tops.config\n'),2,,,,,u'\nintf_tops.csh,,,,,u'\nintf_tops.csh
GET_IMAGE = '\x12',2,,,,,,,,,,
elif op == u'!=':,2,,,,,u'!=':,,,,,u'!=':
"(u""raw_destination"", c_ulong)]",2,,,,,"u""raw_destination"",",,,,,"u""raw_destination"","
if 'delta_time' in _3to2kwargs: delta_time = _3to2kwargs['delta_time']; del _3to2kwargs['delta_time'],2,,,,,,,,,,
"self.parser.add_argument(u""-m"", u""--metaquery"", action=u""store_true"", help=u""Execute as MetaQuery."")",2,,,,,"u""-m"",",,,,,"u""-m"","
u'free',2,,,,,u'free',,,,,u'free'
"UDPSock.bind((u'', 3015))",2,,,,,"u'',",,,,,"u'',"
"speed=self._current_movement[u'speed'],",2,,,,,"u'speed'],",,,,,"u'speed'],"
if platform.system() == u'Darwin':,2,,,,,u'Darwin':,,,,,u'Darwin':
NAME[u'while'] = WHILE,2,,,,,u'while'],,,,,u'while']
opOutput_Prg_Stop = '\xB4',2,,,,,,,,,,
"self.parser.add_argument(u""-ns"", u""--nameservers"", nargs=u""+"", type=unicode, help=u""A list of nameservers to query. Each nameserver is a string which contains the IP address of a nameserver."")",2,,,,,"u""-ns"",",,,,,"u""-ns"","
os.chdir(u'../raw'),2,,,,,u'../raw'),,,,,u'../raw')
"u'sB' + unicode(part_size) + u's',",2,,,,,u'sB',,unicode(,,,u'sB' unicode(
"title=u""Select a file"")",2,,,,,"u""Select",,,,,"u""Select"
LED_ORANGE_PULSE = '\x09',2,,,,,,,,,,
"assert isinstance(path_source, unicode), \",2,,,,,,,,,,
"filename=resource_path(os.path.join(u'src', filename1))",2,,,,,"u'src',",,,,,"u'src',"
"test,Type = self.visit_value(branch[1][u'test'])",2,,,,,u'test']),,,,,u'test'])
"u""duration needs to be positive""",2,,,,,"u""duration",,,,,"u""duration"
"u'run': u'Run program after loading.',",2,,,,,u'run':,,,,,u'run':
TYPE_PROGRAM = '\x06',2,,,,,,,,,,
NO_USBSTICK = '\x0C',2,,,,,,,,,,
"rb1=tk.Radiobutton(self, text=u'yes',",2,,,,,"u'yes',",,,,,"u'yes',"
opJr_Nan = '\x43',2,,,,,,,,,,
"u'expr LE expr',",2,,,,,u'expr,,,,,u'expr
GET_STATUS = '\x16',2,,,,,,,,,,
"parameters = ''.join([parameters, self._checksum(parameters)])",2,,,,,,,,,,
else: ramp_up =  30,2,,,,,,,,,,
"u""led_sequence"": (",2,,,,,"u""led_sequence"":",,,,,"u""led_sequence"":"
"struct.pack(u'<BH', handle, part_size)  # HANDLE, SIZE",2,,,,,"u'<BH',",,,,,"u'<BH',"
os.makedirs(u'raw_orig'),2,,,,,u'raw_orig'),,,,,u'raw_orig')
"return struct.unpack(u'<i', reply)[0]",2,,,,,"u'<i',",,,,,"u'<i',"
"raise NoEV3(u'multiple EV3 found, you need to set argument host')",2,,,,,u'multiple,,,,,u'multiple
opCp_Eq16 = '\x4D',2,,,,,,,,,,
start_pos_outer = cur_mov[u'start_motor_pos'][0],2,,,,,u'start_motor_pos'][0],,,,,u'start_motor_pos'][0]
"output.append(int(u"""".join(imap(unicode, binary)), 2))",2,,,,,"u"""".join(imap(unicode,",,,,,"u"""".join(imap(unicode,"
"def check_sum(data, udp = False):",2,,,,,,,,,,
"rb2=tk.Radiobutton(self, text=u'no',",2,,,,,"u'no',",,,,,"u'no',"
"frame=tk.LabelFrame(self, text=u'Polarization')",2,,,,,u'Polarization'),,,,,u'Polarization')
"self.parser.add_argument(u""-t"", u""--rdtype"", type=unicode, default=1, help=u""Query type."")",2,,,,,"u""-t"",",,,,,"u""-t"","
opMove8_16 = '\x31',2,,,,,,,,,,
"if location: url += u""&location="" + location",2,,,,,"u""&location=""",,,,,"u""&location="""
ports = glob.glob(u'/dev/tty.*'),2,,,,,u'/dev/tty.*'),,,,,u'/dev/tty.*')
if '_control' in _3to2kwargs: _control = _3to2kwargs['_control']; del _3to2kwargs['_control'],2,,,,,,,,,,
"self._physical_ev3._introspection[u""network_name""],",2,,,,,"u""network_name""],",,,,,"u""network_name""],"
"0x5C: u""MTP"",       0x5D: u""AX.25"",       0x5E: u""OS"",",2,,,,,"u""MTP"",",,,,,"u""MTP"","
elif sys.platform.startswith(u'darwin'):,2,,,,,u'darwin'):,,,,,u'darwin'):
from itertools import izip,2,,,,,,,,,,
"self.titlePage1 = QLabel(u"" Biology Experiment List"")",2,,,,,"u"" Biology",,,,,"u"" Biology"
"if region: url += u""&region="" + region",2,,,,,"u""&region=""",,,,,"u""&region="""
"for attribute in imap(lambda name: getattr(module, name), ifilter(lambda x: not x.startswith(u""_""), dir(module))):",2,,,,,"u""_""),",,,,,"u""_""),"
print datetime.now().strftime(u'%H:%M:%S.%f') +,2,,,,,u'%H:%M:%S.%f'),print datetime.now().strftime(u'%H:%M:%S.%f'),,,,u'%H:%M:%S.%f') print datetime.now().strftime(u'%H:%M:%S.%f')
"tmp=tmp+u'\n\nPlease add them into the directory of POD before you click ""Create"" button.'",2,,,,,u'\n\nPlease,,,,,u'\n\nPlease
"fullname += u"".py""",2,,,,,"u"".py""",,,,,"u"".py"""
"(u""f'"", 1),",2,,,,,"u""f'"",",,,,,"u""f'"","
PORT_B_SENSOR = '\x11',2,,,,,,,,,,
if 'host' in _3to2kwargs: host = _3to2kwargs['host']; del _3to2kwargs['host'],2,,,,,,,,,,
"u""msg_cnt must be 2 bytes long""",2,,,,,"u""msg_cnt",,,,,"u""msg_cnt"
SET_MOVEUP = '\x09',2,,,,,,,,,,
"value,Type = branch[1][u'value'],self.type_map[u'int']",2,,,,,"u'value'],self.type_map[u'int']",,,,,"u'value'],self.type_map[u'int']"
"u""freq must be a number""",2,,,,,"u""freq",,,,,"u""freq"
else: ramp_down_time =  None,2,,,,,,,,,,
"person.add_argument(u""--stylesheet"", type = unicode, metavar = u""url"", default = u"""", help = u""CSS file used to customize the look of person.html."")",2,,,,,"u""--stylesheet"",",,,,,"u""--stylesheet"","
LED_GREEN_FLASH = '\x04',2,,,,,,,,,,
"action, retry_num))",2,,,,,,,,,,
INIT8 = '\x08',2,,,,,,,,,,
tmp=tmp+EOF_check[i]+u'  ',2,,,,,u'  ',,,,,u'  '
"certificates = [dict((key.rsplit(u""."", 1)[-1], value) for key, value in cert.items()) for cert in censys.certificates.search(f""{self.arguments.domain} and tags: trusted"", fields = fields) if cert]",2,,,,,"u""."",",,,,,"u""."","
"u'int':ir.IntType(32),",2,,,,,"u'int':ir.IntType(32),",,,,,"u'int':ir.IntType(32),"
"(u""raw_flags"", c_ushort, 3),",2,,,,,"u""raw_flags"",",,,,,"u""raw_flags"","
"label.grid(row=6, column=3, columnspan=5, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
"''.join([address.to_bytes(4, u'big'),",2,,,,,"u'big'),",,,,,"u'big'),"
"super(sniffer, self).close()",2,,,,,,,,,,
"0x24: u""XTP"",       0x25: u""DDP"",         0x26: u""IDPR-CMTP"",",2,,,,,"u""XTP"",",,,,,"u""XTP"","
class SerialWrapper1(object):,2,,,,,,,,,,
"if hole_mmc != u""?"":",2,,,,,"u""?"":",,,,,"u""?"":"
"answer = resolver.query(arguments.pop(u""query""), **kwargs)",2,,,,,"u""query""),",,,,,"u""query""),"
def polarity_right(self):,2,,,,,,,,,,
opJr_Gt32 = '\x6A',2,,,,,,,,,,
"ramp_down_time=self._current_movement[u'ramp_down_time'],",2,,,,,"u'ramp_down_time'],",,,,,"u'ramp_down_time'],"
"super(Session, self).__init__()",2,,,,,,,,,,
self._device.open_path(dev[u'path']),2,,,,,u'path']),,,,,u'path'])
VIEW_UNIT = '\x17',2,,,,,,,,,,
OPEN_READ = '\x01',2,,,,,,,,,,
arg_parser = argparse.ArgumentParser(description=u'Stm32 uart dfu utility.'),2,,,,,u'Stm32,,,,,u'Stm32
ICON_IMAGE = '\x06',2,,,,,,,,,,
def protocol(self):,2,,,,,,,,,,
GET_MODENAME = '\x16',2,,,,,,,,,,
opJr_True = '\x42',2,,,,,,,,,,
opXor8 = '\x28',2,,,,,,,,,,
raise RuntimeError(u'unknown op in current movement'),2,,,,,u'unknown,,,,,u'unknown
CONTINUE_GETFILE = '\x97',2,,,,,,,,,,
"(u""e'"", 2),",2,,,,,"u""e'"",",,,,,"u""e'"","
def read_protection_status(self):,2,,,,,,,,,,
"self.parser.add_argument(u""-l"", u""--lifetime"", type=int, default=8, help=u""The total number of seconds to spend trying to get an answer to the question. If the lifetime expires, a Timeout exception will occur."")",2,,,,,"u""-l"",",,,,,"u""-l"","
"u'x',",2,,,,,"u'x',",,,,,"u'x',"
"name.add_argument(u""--country"", type = unicode, help = u""If supplied, only companies matching given country will be returned. For example, country=United States or country=US."")",2,,,,,"u""--country"",",,,,,"u""--country"","
last_pos_outer = cur_mov[u'last_motor_pos'][1],2,,,,,u'last_motor_pos'][1],,,,,u'last_motor_pos'][1]
def parse(response):,2,,,,,,,,,,
self.listLabel2 = QLabel(u''),2,,,,,u''),,,,,u'')
"name.decode(u""utf8""),",2,,,,,"u""utf8""),",,,,,"u""utf8""),"
"self._physical_ev3._introspection[u""os_vers""],",2,,,,,"u""os_vers""],",,,,,"u""os_vers""],"
LED_RED_FLASH = '\x05',2,,,,,,,,,,
GET_SHUTDOWN = '\x10',2,,,,,,,,,,
u'readout unprotect': 0x92,2,,,,,u'readout,,,,,u'readout
opCom_Ready = '\xD0',2,,,,,,,,,,
"timeout = None, blocking = False):",2,,,,,,,,,,
"(u""f#'"", 1),",2,,,,,"u""f#'"",",,,,,"u""f#'"","
value = branch[1][u'value'],2,,,,,u'value'],,,,,u'value']
if 'duration' in _3to2kwargs: duration = _3to2kwargs['duration']; del _3to2kwargs['duration'],2,,,,,,,,,,
g.write(u'S1_'+data_date[i]+u'_ALL_F'+iw[-1],2,,,,,u'S1_'+data_date[i]+u'_ALL_F'+iw[-1],,,,,u'S1_'+data_date[i]+u'_ALL_F'+iw[-1]
"with open(args.file, u'wb') as dump:",2,,,,,u'wb'),,,,,u'wb')
"port=port, baudrate=self._DEFAULT_PARAMETERS[u'baudrate'],",2,,,,,"u'baudrate'],",,,,,"u'baudrate'],"
GET_NETWORK = '\x0E',2,,,,,,,,,,
"struct.pack(u'<H', local_mem * 1024 + global_mem),",2,,,,,"u'<H',",,,,,"u'<H',"
from io import open,2,,,,,,,,,,
CIRCLE = '\x04',2,,,,,,,,,,
"label.grid(row=4, column=0, columnspan=3, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
opCp_Gt8 = '\x48',2,,,,,,,,,,
"self.parser.add_argument(u""--configure-resolver"", action=u""store_false"", help=u""If True (the default), the resolver instance is configured in the normal fashion for the operating system the resolver is running on. (I.e. a /etc/resolv.conf file on POSIX systems and from the registry on Windows systems."")",2,,,,,"u""--configure-resolver"",",,,,,"u""--configure-resolver"","
"u""speed needs to be an integer""",2,,,,,"u""speed",,,,,"u""speed"
SICON_BATT_1 = '\x04',2,,,,,,,,,,
"super(Ultrasonic, self).__del__()",2,,,,,,,,,,
RIGHT_BUTTON = '\x04',2,,,,,,,,,,
opOutput_Speed = '\xA5',2,,,,,,,,,,
DATA_RAW = '\x12'  # Raw (used in opINPUT_READEXT),2,,,,,,,,,,
dump_command = commands.add_parser(u'dump'),2,,,,,u'dump'),,,,,u'dump')
cur_mov[u'start_motor_pos'][1],2,,,,,u'start_motor_pos'][1],,,,,u'start_motor_pos'][1]
FAIL = '\x02'  # Something failed,2,,,,,,,,,,
u'speed  needs to be in range [1 - 100]',2,,,,,u'speed,,,,,u'speed
"for i,x in enumerate(izip(params_type,params_name)):",2,,,,,,,,,,
GET_CACHE_FILES = '\x14',2,,,,,,,,,,
for port in xrange(len(ports)):,2,,,xrange(,,,,,,,xrange(
"print f'\r[{""█""*self._complete_len(progress)}'",2,,,,,,"print f'\r[{""█""*self._complete_len(progress)}'",,,,"print f'\r[{""█""*self._complete_len(progress)}'"
"(u""g'"", 1),",2,,,,,"u""g'"",",,,,,"u""g'"","
LOAD_IMAGE = '\x08',2,,,,,,,,,,
"self.parser.description = (self.__doc__ or u""No description available."").split(u""\n"", 1)[-1].strip()",2,,,,,"u""No",,,,,"u""No"
SET_VISIBLE = '\x02',2,,,,,,,,,,
def _uart_dfu_init(self):,2,,,,,,,,,,
u'available only for WiFi connected devices',2,,,,,u'available,,,,,u'available
"super(Options, self).__init__()",2,,,,,,,,,,
elif branch[0] == u'Float':,2,,,,,u'Float':,,,,,u'Float':
"int(memory_map[-1][u'size'], 0) - address)",2,,,,,"u'size'],",,,,,"u'size'],"
"u'type': sensor_type,",2,,,,,u'type':,,,,,u'type':
"self._serial_write((len(data) - 1).to_bytes(1, u'big'))",2,,,,,u'big')),,,,,u'big'))
else: repeat =  False,2,,,,,,,,,,
"(u""_opt_class"", c_ubyte, 2),",2,,,,,"u""_opt_class"",",,,,,"u""_opt_class"","
def stop_sound(self):,2,,,,,,,,,,
"btn1.config(state=u""disabled"")",2,,,,,"u""disabled"")",,,,,"u""disabled"")"
u'right',2,,,,,u'right',,,,,u'right'
opArray_Read = '\xC3',2,,,,,,,,,,
"prefix2 = (prefix + u""|  "").ljust(24)",2,,,,,"u""|",,,,,"u""|"
load_command = commands.add_parser(u'load'),2,,,,,u'load'),,,,,u'load')
"copyright = u'2020, Christoph Gaukel'",2,,,,,"u'2020,",,,,,"u'2020,"
LONGPRESS = '\x02',2,,,,,,,,,,
"def add_argument_group(parser, address_required = False):",2,,,,,,,,,,
YES_NOTSEL = '\x00',2,,,,,,,,,,
else: ev3_obj =  None,2,,,,,,,,,,
SPLIT = '\x12',2,,,,,,,,,,
CLOSE_LOG = '\x11',2,,,,,,,,,,
get_id_command = commands.add_parser(u'id'),2,,,,,u'id'),,,,,u'id')
else: memory_map =  None,2,,,,,,,,,,
ICON_BRICK = '\x05'  # Bluetooth type BRICK,2,,,,,,,,,,
ICON_PC = '\x03'  # Bluetooth type PC,2,,,,,,,,,,
ur'Name: (\w+)\s\n' +,2,,,,,,,,,,
tmp1=glob.glob(info+u'/annotation/*'+iw+u'*'+polar+u'*.xml'),2,,,,,u'/annotation/*'+iw+u'*'+polar+u'*.xml'),,,,,u'/annotation/*'+iw+u'*'+polar+u'*.xml')
def connect_usb(self):,2,,,,,,,,,,
"@_retry(_RETRIES, u'get mcu id', _serial_flush)",2,,,,,u'get,,,,,u'get
step2 = cur_mov[u'step2_left'],2,,,,,u'step2_left'],,,,,u'step2_left']
dst = fileName+u'.csv',2,,,,,u'.csv',,,,,u'.csv'
"assert isinstance(value, int), u""speed must to be an int""",2,,,,,"u""speed",,,,,"u""speed"
for _ in xrange(size)]),2,,,xrange(,,,,,,,xrange(
"u""freq needs to be in range [250 - 10000]""",2,,,,,"u""freq",,,,,"u""freq"
"resolver.port = arguments.get(u""port"")",2,,,,,"u""port"")",,,,,"u""port"")"
if tmp[1] == u'SAFE' or tmp[1] == u'safe':,2,,,,,u'SAFE',,,,,u'SAFE'
ops = ''.join((,2,,,,,,,,,,
else: slow =  False,2,,,,,,,,,,
if op == u'+':,2,,,,,u'+':,,,,,u'+':
"u""direct command {:02X}:{:02X} replied error"".format(",2,,,,,"u""direct",,,,,"u""direct"
ENTERFWUPDATE = '\xA0',2,,,,,,,,,,
def position(self):,2,,,,,,,,,,
u' Recv 0x|' +,2,,,,,u' Recv,,,,,u' Recv
info=Dir_image+u'/*'+data_date[i]+u'*',2,,,,,u'/*'+data_date[i]+u'*',,,,,u'/*'+data_date[i]+u'*'
unicode.encode(path_dest) + '\x00'    # NAME,2,,,,,,,,,,
"rc, handle = struct.unpack(u'sB', reply)",2,,,,,"u'sB',",,,,,"u'sB',"
"self.parser.add_argument(u""-sP"", u""--source-port"", type=int, default=random.randint(1, 65535), help=u""Source port."")",2,,,,,"u""-sP"",",,,,,"u""-sP"","
text=u'Polarization',2,,,,,u'Polarization',,,,,u'Polarization'
if 'direction' in _3to2kwargs: direction = _3to2kwargs['direction']; del _3to2kwargs['direction'],2,,,,,,,,,,
"def _perform_erase(self, parameters):",2,,,,,,,,,,
"return(u'VarAssign',{u'value':value,u'name':name})",2,,,,,"u'VarAssign',{u'value':value,u'name':name})",,,,,"u'VarAssign',{u'value':value,u'name':name})"
print u'Success!',2,,,,,u'Success!',print u'Success!',,,,u'Success!' print u'Success!'
"struct.pack(u'<H', 1012),  # SIZE",2,,,,,"u'<H',",,,,,"u'<H',"
"(u""c'"", 4)",2,,,,,"u""c'"",",,,,,"u""c'"","
SYSTEM_ILLEGAL_CONNECTION = '\x0C',2,,,,,,,,,,
NAME[u'else'] = ELSE,2,,,,,u'else'],,,,,u'else']
DEL_SPACE = '\x02'  # Use space as delimiter,2,,,,,,,,,,
"except exceptions.DfuException, ex:",2,,,,,,,,,,
CONTINUE_DOWNLOAD = '\x93',2,,,,,,,,,,
"self.title(u""GMTSAR for Sentinel-1 SAR processing"")",2,,,,,"u""GMTSAR",,,,,"u""GMTSAR"
TESTSHORTPRESS = '\x0C',2,,,,,,,,,,
print u'Erasing whole memory...',2,,,,,u'Erasing,print u'Erasing whole memory...',,,,u'Erasing print u'Erasing whole memory...'
"assert host is None or isinstance(host, unicode), \",2,,,,,,,,,,
"if macromeasures: url += u""&macromeasures=true""",2,,,,,"u""&macromeasures=true""",,,,,"u""&macromeasures=true"""
image_list=glob.glob(u'S1*SLC*'),2,,,,,u'S1*SLC*'),,,,,u'S1*SLC*')
"u'expr MOD expr',",2,,,,,u'expr,,,,,u'expr
elif branch[0] == u'Name':,2,,,,,u'Name':,,,,,u'Name':
"u""ramp_down_time must be a number""",2,,,,,"u""ramp_down_time",,,,,"u""ramp_down_time"
TYPE_SDCARD = '\x10',2,,,,,,,,,,
opOutput_Time_Power = '\xAD',2,,,,,,,,,,
"u'-a', u'--address', default=u'0x8000000',",2,,,,,"u'-a',",,,,,"u'-a',"
u':'.join(u'{:02X}'.format(byte) for byte in reply[2:4]) +,2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
elif branch[0] == u'FuncCall':,2,,,,,u'FuncCall':,,,,,u'FuncCall':
"sectors = [s.to_bytes(2, u'big') for s in xrange(start, end + 1)]",2,,,xrange(,,u'big'),,,,,xrange( u'big')
"self.parser.add_argument(u""--filename"", type=argparse.FileType(u""r""), help=u""The filename of a configuration file in standard /etc/resolv.conf format. This parameter is meaningful only when I{configure} is true and the platform is POSIX."")",2,,,,,"u""--filename"",",,,,,"u""--filename"","
"u""bumps needs to be of type int""",2,,,,,"u""bumps",,,,,"u""bumps"
"_fields_ = [(u""ihl"", c_ubyte, 4),",2,,,,,"u""ihl"",",,,,,"u""ihl"","
u'EV3_TOUCH' if self.sensors_as_dict[self._port] == EV3_TOUCH,2,,,,,u'EV3_TOUCH',,,,,u'EV3_TOUCH'
"console.print(f""[!] {fullname.replace(self.location, '.')}:"", color = u""red"")",2,"print(f""[!]",,,,"u""red"")",,,,,"print(f""[!] u""red"")"
"(u""d'"", 0.25),",2,,,,,"u""d'"",",,,,,"u""d'"","
"u'ramp_up': ramp_up,",2,,,,,u'ramp_up':,,,,,u'ramp_up':
"self.raw_options = """"",2,,,,,,,,,,
WRITE_TEXT = '\x06',2,,,,,,,,,,
"label.grid(row=1, column=0, columnspan=3, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
llvm_ir_parsed = llvm.parse_assembly(unicode(module)),2,,,,,,,unicode(,,,unicode(
NAME = ur'[a-zA-Z_][a-zA-Z0-9_]*',2,,,,,,,,,,
self.groupBox3 = QGroupBox(u''),2,,,,,u''),,,,,u'')
"matplotlib.use(u""Qt5Agg"")",2,,,,,"u""Qt5Agg"")",,,,,"u""Qt5Agg"")"
"u'Sound as',",2,,,,,u'Sound,,,,,u'Sound
start_pos_inner = cur_mov[u'start_motor_pos'][0],2,,,,,u'start_motor_pos'][0],,,,,u'start_motor_pos'][0]
"u""local must be a bool""",2,,,,,"u""local",,,,,"u""local"
"u'op': u'Time_Speed',",2,,,,,u'op':,,,,,u'op':
"def load_file(self, path_source, path_dest, **_3to2kwargs):",2,,,,,,,,,,
u'tone is too high: ' + tone + u' (' + unicode(freq) + u' Hz)',2,,,,,u'tone,,unicode(,,,u'tone unicode(
ops_move = ''.join((,2,,,,,,,,,,
"label=tk.Label(self,text=u'Chosen scenes')",2,,,,,u'Chosen,,,,,u'Chosen
"def update(self, motor_pos):",2,,,,,,,,,,
"if clearance == u""?"" and allowance != u""?"":",2,,,,,"u""?""",,,,,"u""?"""
S1AB=S1AB[0].split(u'/'),2,,,,,u'/'),,,,,u'/')
unicode.encode(path) + '\x00'    # NAME,2,,,,,,,,,,
"g=open(prep_sh,u'w',encoding=u'UTF-8')",2,,,,,"u'w',encoding=u'UTF-8')",,,,,"u'w',encoding=u'UTF-8')"
DOWNLOAD_END = '\x0F',2,,,,,,,,,,
"countryCode = u"""", confidence = u""max"", macromeasures = True):",2,,,,,"u"""",",,,,,"u"""","
"self._physical_ev3._introspection[u""sensors""][PORT_3][u""type""],",2,,,,,"u""sensors""][PORT_3][u""type""],",,,,,"u""sensors""][PORT_3][u""type""],"
opCp_EqF = '\x4F',2,,,,,,,,,,
"print f'\r[{"" ""*self._position}{""█""*self._bar_len}'",2,,,,,,"print f'\r[{"" ""*self._position}{""█""*self._bar_len}'",,,,"print f'\r[{"" ""*self._position}{""█""*self._bar_len}'"
"self.del_dir(u'../prjs/sound', secure=False)",2,,,,,"u'../prjs/sound',",,,,,"u'../prjs/sound',"
DEL_CACHE_FILE = '\x17',2,,,,,,,,,,
@_(u'WHILE expr LBRACE statements RBRACE'),2,,,,,u'WHILE,,,,,u'WHILE
"splash_pic = resource_path(os.path.join(u'src', splash_pic1))",2,,,,,"u'src',",,,,,"u'src',"
u'{:02X}'.format(rc) +,2,,,,,u'{:02X}'.format(rc),,,,,u'{:02X}'.format(rc)
UPDATE = '\x00',2,,,,,,,,,,
u'target_position': position,2,,,,,u'target_position':,,,,,u'target_position':
"rc, handle = struct.unpack(u'sB', reply)",2,,,,,"u'sB',",,,,,"u'sB',"
SYSTEM_HANDLE_NOT_READY = '\x02',2,,,,,,,,,,
DATA_16 = '\x01'  # DATA16 (don't change),2,,,,,,,,,,
else: volume = None,2,,,,,,,,,,
LED_RED_PULSE = '\x08',2,,,,,,,,,,
valStyle = u''',2,,,,,u''',,,,,u'''
"console.print(f"" -  {e}"", color = u""red"", dark = True)",2,"print(f""",,,,"u""red"",",,,,,"print(f"" u""red"","
DEL_COMMA = '\x05'  # Use comma as delimiter,2,,,,,,,,,,
if not response or response != self._RESPONSE[u'ack']:,2,,,,,u'ack']:,,,,,u'ack']:
GET_CODE = '\x0E',2,,,,,,,,,,
input_prompt = prompt + u' [' + unicode(defvalue) + u'] ' + unicode(units) + u' ? ',2,,,,,u' [',,unicode(,,,u' [' unicode(
[self._port][u'used_by'] = self,2,,,,,u'used_by'],,,,,u'used_by']
"u'-acodec', u'pcm_u8',",2,,,,,"u'-acodec',",,,,,"u'-acodec',"
"response = super(Session, self).request(method, urlparse.urljoin(self.base_url.geturl(), path), **kwargs)",2,,,,,,,,,,
print u'open port',2,,,,,u'open,print u'open port',,,,u'open print u'open port'
SET_SSID = '\x0C',2,,,,,,,,,,
"value = self.builder.fcmp_ordered(u'<=',lhs,rhs)",2,,,,,"u'<=',lhs,rhs)",,,,,"u'<=',lhs,rhs)"
WARNING_VOLTAGE = '\x04',2,,,,,,,,,,
UP_BUTTON = '\x01',2,,,,,,,,,,
class _PhysicalEV3(object):,2,,,,,,,,,,
"for i in xrange(0, len(data), 2):",2,,,xrange(,,,,,,,xrange(
opCp_Eq8 = '\x4C',2,,,,,,,,,,
delta_pos = position - self._current_movement[u'last_position'],2,,,,,u'last_position'],,,,,u'last_position']
"tread,",2,,,,,,,,,,
opJr_Lt16 = '\x65',2,,,,,,,,,,
u'ev3_obj needs to be instance of EV3',2,,,,,u'ev3_obj,,,,,u'ev3_obj
"path + u'.rsf',",2,,,,,"u'.rsf',",,,,,"u'.rsf',"
"src = resource_path(os.path.join(u'src', src1))",2,,,,,"u'src',",,,,,"u'src',"
"u'y',",2,,,,,"u'y',",,,,,"u'y',"
u'_control must be a boolean',2,,,,,u'_control,,,,,u'_control
"filename = resource_path(os.path.join(u'src', filename1))",2,,,,,"u'src',",,,,,"u'src',"
reply = u':'.join(,2,,,,,u':'.join(,,,,,u':'.join(
else: check =  True,2,,,,,,,,,,
fmt = u'B' + unicode(len(part)) + u's',2,,,,,u'B',,unicode(,,,u'B' unicode(
if 'ramp_down_time' in _3to2kwargs: ramp_down_time = _3to2kwargs['ramp_down_time']; del _3to2kwargs['ramp_down_time'],2,,,,,,,,,,
opRead16 = '\xC9',2,,,,,,,,,,
print u'LEAVE UNKNOWNS AS ?',2,,,,,u'LEAVE,print u'LEAVE UNKNOWNS AS ?',,,,u'LEAVE print u'LEAVE UNKNOWNS AS ?'
"epilog += u""\n""",2,,,,,"u""\n""",,,,,"u""\n"""
"pkwargs = {u""css"": self.arguments.stylesheet, u""confidence"": self.arguments.confidence, u""macromeasures"": self.arguments.macromeasures}",2,,,,,"u""css"":",,,,,"u""css"":"
"self._physical_ev3._introspection[u""fw_vers""],",2,,,,,"u""fw_vers""],",,,,,"u""fw_vers""],"
for i in xrange (len(s)):,2,,,xrange (,,,,,,,xrange (
"u'Select the tops.config file ',",2,,,,,u'Select,,,,,u'Select
else: ramp_down =  30,2,,,,,,,,,,
"value = self.builder.fcmp_ordered(u'>',lhs,rhs)",2,,,,,"u'>',lhs,rhs)",,,,,"u'>',lhs,rhs)"
ports = glob.glob(u'/dev/tty[A-Za-z]*'),2,,,,,u'/dev/tty[A-Za-z]*'),,,,,u'/dev/tty[A-Za-z]*')
"def __init__(self, buffer = """"):",2,,,,,,,,,,
@_(u'NAME'),2,,,,,u'NAME'),,,,,u'NAME')
INIT32 = '\x0A',2,,,,,,,,,,
delta_t = now - self._current_movement[u'last_time'],2,,,,,u'last_time'],,,,,u'last_time']
"assert value in (1, -1), u""allowed polarity_right values are: -1 or 1""",2,,,,,"u""allowed",,,,,"u""allowed"
u'_control': True,2,,,,,u'_control':,,,,,u'_control':
WARNING_BATTLOW = '\x40',2,,,,,,,,,,
u'direction must be 1 (forwards) or -1 (backwards)',2,,,,,u'direction,,,,,u'direction
"u""proto"": self.arguments.protocol, u""timeout"": self.arguments.timeout, u""blocking"": self.arguments.blocking}",2,,,,,"u""proto"":",,,,,"u""proto"":"
"target_pos, **_3to2kwargs",2,,,,,,,,,,
for i in xrange (len(data_date)):,2,,,xrange (,,,,,,,xrange (
"while_loop_entry = self.builder.append_basic_block(u""while_loop_entry""+unicode(self.inc()))",2,,,,,"u""while_loop_entry""+unicode(self.inc()))",,unicode(,,,"u""while_loop_entry""+unicode(self.inc())) unicode("
"ax1.plot(xar,yar1,label=u'Analog Temperature1',linewidth=2)",2,,,,,u'Analog,,,,,u'Analog
[port_motor_input(self._port_left)][u'used_by'] = None,2,,,,,u'used_by'],,,,,u'used_by']
"u'-p', u'--port', default=u'/dev/ttyUSB0',",2,,,,,"u'-p',",,,,,"u'-p',"
raise SensorError(u'no EV3_IR sensor connected at ' + port_str),2,,,,,u'no,,,,,u'no
CHAR_ERROR = '\x16',2,,,,,,,,,,
TONE = '\x01',2,,,,,,,,,,
).quantize(Decimal(u'1.0000')),2,,,,,u'1.0000')),,,,,u'1.0000'))
u'sphinx.ext.viewcode',2,,,,,u'sphinx.ext.viewcode',,,,,u'sphinx.ext.viewcode'
DATA_8 = '\x00'  # DATA8 (don't change),2,,,,,,,,,,
ICON_ONOFF = '\x08',2,,,,,,,,,,
print,2,,,,,,,,,,
SICON_BATT_4 = '\x01',2,,,,,,,,,,
tmp2=tmp1.split(u'/'),2,,,,,u'/'),,,,,u'/')
"return {u'name':p.NAME0,u'type':p.NAME1}",2,,,,,"u'name':p.NAME0,u'type':p.NAME1}",,,,,"u'name':p.NAME0,u'type':p.NAME1}"
BLANK = '\x03',2,,,,,,,,,,
"(u""bb'"", 1),",2,,,,,"u""bb'"",",,,,,"u""bb'"","
"self.parser.add_argument(u""host"", type = unicode, help = u""Target hostname or address."")",2,,,,,"u""host"",",,,,,"u""host"","
"def request(self, method, path = u"""", **kwargs):",2,,,,,"u"""",",,,,,"u"""","
def ramp_up(self):,2,,,,,,,,,,
_DIRECT_REPLY = '\x02',2,,,,,,,,,,
"actions.add_argument(u""-d"", u""--domain"", type = unicode, metavar = u""name"", help = u""Request information about a specific company by domain."")",2,,,,,"u""-d"",",,,,,"u""-d"","
INITF = '\x0B',2,,,,,,,,,,
"kwargs_stop={u'brake': False},",2,,,,,u'brake':,,,,,u'brake':
"with open(args.file, u'rb') as firmware_file:",2,,,,,u'rb'),,,,,u'rb')
u':'.join(u'{:02X}'.format(byte) for byte in cmd[5:]) + u'|',2,,,,,u':'.join(u'{:02X}'.format(byte),,,,,u':'.join(u'{:02X}'.format(byte)
"size = int.from_bytes(self._serial_read(1), u'big')",2,,,,,u'big'),,,,,u'big')
"def temperament(self, value):",2,,,,,,,,,,
opCom_Test = '\xD5',2,,,,,,,,,,
def _check_acknowledge(self):,2,,,,,,,,,,
u'{:02X}'.format(rc) +,2,,,,,u'{:02X}'.format(rc),,,,,u'{:02X}'.format(rc)
"hole_lmc = vin(u""Hole LMC"", u""?"", units=u""in"")",2,,,,,"u""Hole",,,,,"u""Hole"
"def bumps(self, value):",2,,,,,,,,,,
assert reply == u'',2,,,,,u'',,,,,u''
"(u""f'"", 2)",2,,,,,"u""f'"",",,,,,"u""f'"","
"Battery = namedtuple(u'Battery', [",2,,,,,"u'Battery',",,,,,"u'Battery',"
_locked = False,2,,,,,,,,,,
"if (int(sector[u'address'], 0) < address + size <=",2,,,,,"u'address'],",,,,,"u'address'],"
"u""port_left needs to be an integer""",2,,,,,"u""port_left",,,,,"u""port_left"
cur_mov[u'speed_right'] = speed,2,,,,,u'speed_right'],,,,,u'speed_right']
"def list(self, folder, debug = True):",2,,,,,,,,,,
elif branch[0] == u'FuncCall':,2,,,,,u'FuncCall':,,,,,u'FuncCall':
"u'<B',",2,,,,,"u'<B',",,,,,"u'<B',"
BLUETOOTH = u'Bluetooth',2,,,,,u'Bluetooth',,,,,u'Bluetooth'
"(u""c''"", .5),",2,,,,,"u""c''"",",,,,,"u""c''"","
u'slow must be a bool',2,,,,,u'slow,,,,,u'slow
"return struct.unpack(u'B', reply)[0]",2,,,,,"u'B',",,,,,"u'B',"
@_(u'STRING'),2,,,,,u'STRING'),,,,,u'STRING')
"u'red_up',",2,,,,,"u'red_up',",,,,,"u'red_up',"
project = u'ev3_dc',2,,,,,u'ev3_dc',,,,,u'ev3_dc'
"u'current',",2,,,,,"u'current',",,,,,"u'current',"
"help=u' '.join([_ARGS_HELP[u'size'], u'dumped.']))",2,,,,,"u' '.join([_ARGS_HELP[u'size'],",,,,,"u' '.join([_ARGS_HELP[u'size'],"
"group.add_argument(u""address"", type = unicode, help = u""Target hostname or address."")",2,,,,,"u""address"",",,,,,"u""address"","
elif branch[0] == u'String':,2,,,,,u'String':,,,,,u'String':
u'temperament needs to be an int',2,,,,,u'temperament,,,,,u'temperament
"0x3C: u""IPv6-Opts"", 0x3E: u""CFTP"",        0x40: u""SAT-EXPAK"",",2,,,,,"u""IPv6-Opts"",",,,,,"u""IPv6-Opts"","
BLUETOOTHPIN = '\x9F',2,,,,,,,,,,
"u'memmap': u'Json file, containing memory structure.'",2,,,,,u'memmap':,,,,,u'memmap':
"0x79: u""SMP"",       0x7A: u""SM"",          0x7B: u""PTP"",",2,,,,,"u""SMP"",",,,,,"u""SMP"","
fmt = u'B' + unicode(part_size) + u's',2,,,,,u'B',,unicode(,,,u'B' unicode(
class DfuCommandHandler(object):,2,,,,,,,,,,
port_str = u'PORT_C',2,,,,,u'PORT_C',,,,,u'PORT_C'
"u'ramp_up': ramp_up,",2,,,,,u'ramp_up':,,,,,u'ramp_up':
"except Exception, e:",2,,,,,,,,,,
opFile = '\xC0',2,,,,,,,,,,
ATAN = '\x10'  # !<,2,,,,,,,,,,
"self._current_movement[u'target_position'],",2,,,,,"u'target_position'],",,,,,"u'target_position'],"
"except Exception, e:",2,,,,,,,,,,
"orient=u'horizontal',",2,,,,,"u'horizontal',",,,,,"u'horizontal',"
u'_control': True,2,,,,,u'_control':,,,,,u'_control':
"label=tk.Label(self, text=u'Master data for alignment.')",2,,,,,u'Master,,,,,u'Master
GET_SPEED = '\x17',2,,,,,,,,,,
"style = u""list"", css = u"""", prettyPrint = False,",2,,,,,"u""list"",",,,,,"u""list"","
def group(*choices): return u'(' + u'|'.join(choices) + u')',2,,,,,u'(',,,,,u'('
opJr_Eq16 = '\x6D',2,,,,,,,,,,
"0x0C: u""PUP"",       0x0D: u""ARGUS"",       0x0E: u""EMCON"",",2,,,,,"u""PUP"",",,,,,"u""PUP"","
os.chdir(u'../raw_orig'),2,,,,,u'../raw_orig'),,,,,u'../raw_orig')
"self.variables = {u'printf':(func,ir.IntType(32))}",2,,,,,"u'printf':(func,ir.IntType(32))}",,,,,"u'printf':(func,ir.IntType(32))}"
opObject_Wait = '\x07',2,,,,,,,,,,
"assert self._current_movement[u'op'] == u'Time_Speed', \",2,,,,,u'op'],,,,,u'op']
"(u""b'"", 1),",2,,,,,"u""b'"",",,,,,"u""b'"","
"u'permanent',",2,,,,,"u'permanent',",,,,,"u'permanent',"
else u'NXT_TOUCH',2,,,,,u'NXT_TOUCH',,,,,u'NXT_TOUCH'
"label.grid(row=2*i+1,column=0, sticky=u'w')",2,,,,,u'w'),,,,,u'w')
"group = parser.add_argument_group(u""Socket Options/Arguments"")",2,,,,,"u""Socket",,,,,"u""Socket"
os.chdir(u'../raw_orig'),2,,,,,u'../raw_orig'),,,,,u'../raw_orig')
SETUP = '\x09',2,,,,,,,,,,
"sentval = u""OK""",2,,,,,"u""OK""",,,,,"u""OK"""
OBJ_START = '\x04',2,,,,,,,,,,
"u'erase': 0x43,",2,,,,,u'erase':,,,,,u'erase':
GET_MODE2 = '\x14',2,,,,,,,,,,
opArray = '\xC1',2,,,,,,,,,,
MOD16 = '\x12'  # !< Modulo DATA16 r = x % y,2,,,,,,,,,,
"u'Port_C',",2,,,,,"u'Port_C',",,,,,"u'Port_C',"
MENU_ICON = '\x03',2,,,,,,,,,,
"if tone.endswith(u""'''""):",2,,,,,"u""'''""):",,,,,"u""'''""):"
"u'-f', u'u8',",2,,,,,"u'-f',",,,,,"u'-f',"
"super(Track, self).__init__()",2,,,,,,,,,,
data = '',2,,,,,,,,,,
raise SensorError(u'no color sensor connected at ' + port_str),2,,,,,u'no,,,,,u'no
"u""ramp_up_time must be a number""",2,,,,,"u""ramp_up_time",,,,,"u""ramp_up_time"
self._current_movement[u'stopped'] = True,2,,,,,u'stopped'],,,,,u'stopped']
info=Dir_image+u'/*'+data_date[i]+u'*',2,,,,,u'/*'+data_date[i]+u'*',,,,,u'/*'+data_date[i]+u'*'
elif op == '-':,3,,,,,,,,,,
"angle, rate = struct.unpack('<2i', reply)",3,,,,,,,,,,
opXor32 = b'\x2A',3,,,,,,,,,,
WARN_POWER = b'\x0A',3,,,,,,,,,,
"'EV3_IR',",3,,,,,,,,,,
"0x41: ""KRYPTOLAN"", 0x42: ""RVD"",         0x43: ""IPPC"",",3,,,,,,,,,,
raise SensorError('no EV3_IR sensor connected at ' + port_str),3,,,,,,,,,,
ANY_BUTTON = b'\x07',3,,,,,,,,,,
"return ('While',{'test':test,'body':body})",3,,,,,,,,,,
GET_LOG_SYNC_TIME = b'\x0E',3,,,,,,,,,,
INITF = b'\x0B',3,,,,,,,,,,
"import dns.resolver, dns.message, argparse, sys",3,,,,,,,,,,
"elif shaft_lmc != ""?"" and shaft_mmc == ""?"":",3,,,,,,,,,,
opRead32 = b'\xCA',3,,,,,,,,,,
ROUND = b'\x05'  # !< Round r = round(x),3,,,,,,,,,,
"print(""\x1B\x5B2J"", end="""")",3,"print(""\x1B\x5B2J"",",,,,,,,,,"print(""\x1B\x5B2J"","
YES_SEL = b'\x01',3,,,,,,,,,,
"def speed(self, value: int):",3,,,,,,,,,,
"for attribute in map(lambda name: getattr(module, name), filter(lambda x: not x.startswith(""_""), dir(module))):",3,,,,,,,,,,
tmp1=glob.glob(info+'/measurement/*'+iw+'*'+polar+'*'+'.tiff'),3,,,,,,,,,,
TYPE_DATALOG = b'\x05',3,,,,,,,,,,
[self._port]['used_by'] is not None:,3,,,,,,,,,,
"parent_path = path.rsplit(""/"", 1)[0] + ""/""",3,,,,,,,,,,
"'Format: [{""address"": ""value"", ""size"": ""value""}, ...]',",3,,,,,,,,,,
"self.parser.add_argument(""-l"", ""--lifetime"", type=float, default=None, help=""The total number of seconds to spend doing the transfer. If None, the default, then there is no limit on the time the transfer may take."")",3,,,,,,,,,,
"""prompt for credentials:i:0"", ""negotiate security layer:i:1"",",3,,,,,,,,,,
opArray_Append = b'\xC4',3,,,,,,,,,,
opOr16 = b'\x21',3,,,,,,,,,,
raise SensorError('no gyrosensor connected at ' + port_str),3,,,,,,,,,,
"g=open('data.in','w')",3,,,,,,,,,,
tmp1=str(tmp1[0]),3,,,,,,,,,,
BROWSE_FOLDS_FILES = b'\x01'  # folders and files,3,,,,,,,,,,
opCp_Gteq16 = b'\x59',3,,,,,,,,,,
opUI_Read = b'\x81',3,,,,,,,,,,
port_str = 'PORT_B',3,,,,,,,,,,
"size=18, weight=""bold"", slant=""italic"")",3,,,,,,,,,,
"kwargs = {""await_publication"": True, ""discard_key"": discard_key, ""detached"": detached}",3,,,,,,,,,,
"type, version, ln = struct.unpack("">BHH"", hdr)",3,,,,,,,,,,
"tracking_callback: Callable = None,",3,,,,,,,,,,
"self._serial_write((len(data) - 1).to_bytes(1, 'big'))",3,,,,,,,,,,
"""proto"": self.arguments.protocol, ""timeout"": self.arguments.timeout or 8, ""blocking"": self.arguments.blocking}",3,,,,,,,,,,
"__all__ = [""lock"", ""load"", ""fit"", ""print"", ""input"", ""hexdump"",",3,,,,,,,,,,
"0x69: ""SCPS"",      0x6A: ""QNX"",         0x6B: ""A/N"",",3,,,,,,,,,,
"assert isinstance(path_source, str), \",3,,,,,,,,,,
"if not basedir.startswith(""_"") and basedir not in [""modules""]:",3,,,,,,,,,,
"hs = tor.HiddenService(address, controller)",3,,,,,,,,,,
"command=lambda: self.controller.show_frame(""Info""))",3,,,,,,,,,,
"""cmd needs to be of type bytes""",3,,,,,,,,,,
"""global_mem needs to be positive""",3,,,,,,,,,,
"assert isinstance(protocol, str), \",3,,,,,,,,,,
"'float':ir.FloatType(),",3,,,,,,,,,,
return_type = self.type_map[branch[1]['return']],3,,,,,,,,,,
html_title = version + ' documentation',3,,,,,,,,,,
WAIT_VERT = b'\x05',3,,,,,,,,,,
"return ('Until',{'test':test,'body':body})",3,,,,,,,,,,
opJr_Lteq16 = b'\x75',3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in reply[0:2]) +,3,,,,,,,,,,
while chunk:,3,,,,,,,,,,
"print(""[i] Creating Hidden Service ..."")",3,"print(""[i]",,,,,,,,,"print(""[i]"
ICON_FROM_FOLDER = b'\x07',3,,,,,,,,,,
"packet = "" "".join(rtp_packet)",3,,,,,,,,,,
@_('DEF NAME LPAREN def_params RPAREN COLON NAME LBRACE statements RBRACE'),3,,,,,,,,,,
"fields = [""parsed.subject_dn"", ""parsed.names"", ""parsed.fingerprint_sha256"", ""parsed.subject.common_name""]",3,,,,,,,,,,
opMailbox_Open = b'\xD8',3,,,,,,,,,,
self.atemVal1.setText((data[0]) +  ' °' ),3,,,,,,,,,,
def parse_options(raw_options: bytes):,3,,,,,,,,,,
verbosity: int = None,3,,,,,,,,,,
"print(f'\r[{""-""*self._BAR_MAX_LEN}] failed.')",3,"print(f'\r[{""-""*self._BAR_MAX_LEN}]",,,,,,,,,"print(f'\r[{""-""*self._BAR_MAX_LEN}]"
"for key, value in filter(lambda x: x not in excluded_keys, obj.copy().items()):",3,,,,,,,,,,
"""speed needs to be lower or equal 100""",3,,,,,,,,,,
"raise ValueError(f""Unknown or invalid DNS Rdata Class \""{rdclass}\"" ..."")",3,,,,,,,,,,
print('An Error occurred Reset MCU and try again.'),3,print('An,,,,,,,,,print('An
volume: int=None,3,,,,,,,,,,
else:,3,,,,,,,,,,
"), 'LED pattern ' + led_pattern + ' not provided'",3,,,,,,,,,,
GET_LBATT = b'\x12',3,,,,,,,,,,
DATA_A = b'\x05'  # Array handle,3,,,,,,,,,,
TEXTBOX_APPEND = b'\x15',3,,,,,,,,,,
brake: bool = False,3,,,,,,,,,,
"elif tone.startswith(""a""):",3,,,,,,,,,,
except exceptions.DfuException as ex:,3,,,,,,,,,,
valStyle = ''',3,,,,,,,,,,
"elif clearance == ""?"" and hole_lmc != ""?"" and shaft_lmc != ""?"":",3,,,,,,,,,,
"def __init__(self, api_id: str = """", api_secret: str = """"):",3,,,,,,,,,,
"matplotlib.use(""Qt5Agg"")",3,,,,,,,,,,
ICON_DISC = b'\x1D',3,,,,,,,,,,
'''the art of doing nothing''',3,,,,,,,,,,
''',3,,,,,,,,,,
print(,3,,,,,,,,,,
self._send_command(self._COMMAND['get version']),3,,,,,,,,,,
"'speed_left': speed_left,",3,,,,,,,,,,
filename1='sensor_output.csv',3,,,,,,,,,,
@_('WHILE expr LBRACE statements RBRACE'),3,,,,,,,,,,
"print(string, end = """")",3,"print(string,",,,,,,,,,"print(string,"
self._current_movement['duration'] - (,3,,,,,,,,,,
ramp_up_time: float = None,3,,,,,,,,,,
"certificate.get(""common_name"", []),",3,,,,,,,,,,
PORT_A_SENSOR = b'\x10',3,,,,,,,,,,
"def update(self, motor_pos: Tuple[int]) -> None:",3,,,,,,,,,,
opOutput_Step_Power = b'\xAC',3,,,,,,,,,,
"""sync_mode needs to be of type str""",3,,,,,,,,,,
print(),3,print(),,,,,,,,,print()
"EOL = b""\r\n"" if self.arguments.crlf else b""\n""",3,,,,,,,,,,
GET_POWER = b'\x1D',3,,,,,,,,,,
VALUEF = b'\x0C',3,,,,,,,,,,
"assert isinstance(path, str), \",3,,,,,,,,,,
def position(self) -> VehiclePosition:,3,,,,,,,,,,
def protocol(self) -> str:,3,,,,,,,,,,
"response = api.person(self.arguments.phone, ""phone"", countryCode = self.arguments.country_code, **kwargs, **pkwargs)",3,,,,,,,,,,
"print(f"" -  Modified EUI64 Address:              {mac.modified_eui64()}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"@pytest.fixture(scope='module', params=['/dev/tty.usbserial-A9E59BZN'])",3,,,,,,,,,,
GET_CONNECTION = b'\x0C',3,,,,,,,,,,
opOutput_Power = b'\xA4',3,,,,,,,,,,
"(""d'"", 0.75),",3,,,,,,,,,,
"self.parser.add_argument(""-i"", ""--api-id"", type = str, default = """", help = ""Censys API ID."")",3,,,,,,,,,,
DEVCMD_CHANNEL = b'\x12'  # UART device channel (IR seeker),3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in cmd[0:2]) + '|' +,3,,,,,,,,,,
SET_MOVEDOWN = b'\x0A',3,,,,,,,,,,
"config = {""query"": {""zone"": zone, ""where"": where, ""port"": port, ""source_port"": source_port, ""timeout"": timeout, ""lifetime"": lifetime, ""use_udp"": use_udp},",3,,,,,,,,,,
"value = value.decode(""ascii"", errors=""replace"")",3,,,,,,,,,,
"duration: float,",3,,,,,,,,,,
")[0].split(b'\x00')[0].decode(""ascii"")",3,,,,,,,,,,
"action, retry_num)) from last_caught",3,,,,,,,,,,
"import readline, colorama, termcolor",3,,,,,,,,,,
"print(""[i] Tor is actually not running, starting a new instance ..."", color = ""yellow"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
UPDATE_RUN = b'\x1A',3,,,,,,,,,,
CLOSE = b'\x07',3,,,,,,,,,,
DATA_F = b'\x03'  # DATAF (don't change),3,,,,,,,,,,
'port_left must be different from port_right',3,,,,,,,,,,
raise NoEV3('No EV3 device found'),3,,,,,,,,,,
"0x4E: ""WB-MON"",    0x4F: ""WB-EXPAK"",    0x50: ""ISO-IP"",",3,,,,,,,,,,
opXor8 = b'\x28',3,,,,,,,,,,
"""ramp_up_time must be an number""",3,,,,,,,,,,
help=_ARGS_HELP['memmap']),3,,,,,,,,,,
MOVE = b'\x1F',3,,,,,,,,,,
while record:,3,,,,,,,,,,
def port_left(self) -> bytes:,3,,,,,,,,,,
SET_INSTR = b'\x19',3,,,,,,,,,,
"for field in root.replace(self.location, """", 1)[1:].replace(""\\"", ""/"").split(""/""):",3,,,,,,,,,,
'EV3_ULTRASONIC',3,,,,,,,,,,
"epilog += ""\n""",3,,,,,,,,,,
opWrite8 = b'\xCC',3,,,,,,,,,,
@_('def_params COMMA def_param'),3,,,,,,,,,,
'channel must be of type int',3,,,,,,,,,,
"print(f"" -  Descriptor Identifier: {ehs.descriptor_id}"")",3,"print(f""",,,,,,,,,"print(f"""
"""repeat must be a bool""",3,,,,,,,,,,
ev3_path = '../prjs/sound/tmp',3,,,,,,,,,,
"print(f"" -  Octets:                  {', '.join(str(n) for n in mac.words)}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
opDiv8 = b'\x1C',3,,,,,,,,,,
''',3,,,,,,,,,,
"edTxt.insert(0,'02_proc.csh')",3,,,,,,,,,,
if self._current_movement['op'] != 'Speed':,3,,,,,,,,,,
"""upbeat"": 1,",3,,,,,,,,,,
"page = self.session.get(""cflist/"" + cfl_id, headers={""Referer"": ""http://www.crimeflare.com/cgi-bin/cfsearch.cgi""}).parsed()",3,,,,,,,,,,
super().__del__(),3,,,,,,,,,,
"0x7F: ""CRUDP"",     0x80: ""SSCOPMCE"",    0x81: ""IPLT"",",3,,,,,,,,,,
g.write('preproc_batch_tops_esd.csh data.in dem.grd 1\n'),3,,,,,,,,,,
SYSTEM_FILE_EXITS = b'\x07',3,,,,,,,,,,
"0x79: ""SMP"",       0x7A: ""SM"",          0x7B: ""PTP"",",3,,,,,,,,,,
def motor_pos(self) -> MotorPositions:,3,,,,,,,,,,
"for raw, white in zip(rgb_raw, self._rgb_white_balance_raw)",3,,,,,,,,,,
step1 = cur_mov['step1_left'],3,,,,,,,,,,
"0x82: ""SPS"",       0x83: ""PIPE"",        0x84: ""SCTP"",",3,,,,,,,,,,
"0x5C: ""MTP"",       0x5D: ""AX.25"",       0x5E: ""OS"",",3,,,,,,,,,,
elif branch[0] == 'While':,3,,,,,,,,,,
"self.parser.add_argument(""-e"", ""--use-edns"", type=int, default=-1, help=""The EDNS level to use. The default is -1 (no EDNS)."")",3,,,,,,,,,,
"ramp_up: int = 15,",3,,,,,,,,,,
"self.parser.add_argument(""-ns"", ""--nameservers"", nargs=""+"", type=str, help=""A list of nameservers to query. Each nameserver is a string which contains the IP address of a nameserver."")",3,,,,,,,,,,
VALUE_TO_STRING = b'\x06',3,,,,,,,,,,
GREEN = b'\x01',3,,,,,,,,,,
opInput_Write = b'\x9F',3,,,,,,,,,,
BLANK = b'\x03',3,,,,,,,,,,
"sync_mode: str = None,",3,,,,,,,,,,
opOutput_Get_Count = b'\xB3',3,,,,,,,,,,
raise EnvironmentError('Unsupported platform'),3,,,,,,,,,,
_SYSTEM_COMMAND_REPLY = b'\x01',3,,,,,,,,,,
+':S1_'+data_date[j]+'_ALL_F'+iw[-1]+'\n'),3,,,,,,,,,,
"timeout, lifetime, use_udp,",3,,,,,,,,,,
NAME['while'] = WHILE,3,,,,,,,,,,
duration: Number = None,3,,,,,,,,,,
"def __init__(self, port: str):",3,,,,,,,,,,
'direction must be 1 (forwards) or -1 (backwards)',3,,,,,,,,,,
info2=str(info2),3,,,,,,,,,,
GET_SYMBOL = b'\x06',3,,,,,,,,,,
"def _read_memory_chunk(self, address: int, size: int) -> bytes:",3,,,,,,,,,,
print(packet),3,print(packet),,,,,,,,,print(packet)
def ambient(self) -> int:,3,,,,,,,,,,
"'Select the tops.config file ',",3,,,,,,,,,,
"socket_kinds.add_argument(""--raw"", action = ""store_true"", help = ""Use Raw Sockets instead of TCP (SocketKind: SOCK_RAW)."")",3,,,,,,,,,,
"prefix2 = (prefix + ""|  "").ljust(24)",3,,,,,,,,,,
ContextData()),3,,,,,,,,,,
"self.titlePage2 = QLabel("" Calorimenter"")",3,,,,,,,,,,
"config[""query""].update({""rdtype"": rdtype, ""rdclass"": rdclass, ""af"": address_family, ""serial"": serial, ""keyalgorithm"": keyalgorithm, ""relativize"": relativize})",3,,,,,,,,,,
'distance needs to be a number',3,,,,,,,,,,
"@_('expr PLUS expr',",3,,,,,,,,,,
"group.add_argument(""-P"", ""--protocol"", type = int, default = 0, help = ""Socket protocol."")",3,,,,,,,,,,
"spec = importlib.util.spec_from_file_location(os.path.basename(file).rsplit(""."", 1)[0], file)",3,,,,,,,,,,
"choice = input(""Enter an option: "")",3,,,,,,,,,,
")[0].split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
"resolver = dns.resolver.Resolver(arguments.get(""filename""), arguments.get(""configure_resolver""))",3,,,,,,,,,,
"self.show_frame(""Info"")",3,,,,,,,,,,
"self.dscp = phbs[self.raw_dscp] if self.raw_dscp in phbs else ""Unknown PHB""",3,,,,,,,,,,
input_prompt = prompt + ' [' + str(defvalue) + '] ' + str(units) + ' ? ',3,,,,,,,,,,
"UDPSock.sendto(' '.encode('utf-8'), (addr[0], int(port)))",3,,,,,,,,,,
_SYSTEM_REPLY_ERROR = b'\x05',3,,,,,,,,,,
"position = round(struct.unpack('<f', reply)[0])",3,,,,,,,,,,
opEN_LOG = b'\x1B',3,,,,,,,,,,
opJr_Neq32 = b'\x72',3,,,,,,,,,,
SET_MODE2 = b'\x0D',3,,,,,,,,,,
"self.parser.add_argument(""-p"", ""--port"", type=int, default=161, help=""Target SNMP port."")",3,,,,,,,,,,
self.atemLabel1 = QLabel('Analog Temperature1'),3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in reply[5:6]) +,3,,,,,,,,,,
opCom_Set = b'\xD4',3,,,,,,,,,,
last_pos_inner = cur_mov['last_motor_pos'][0],3,,,,,,,,,,
"if url.scheme != ""https"":",3,,,,,,,,,,
"def put_to_reply_buffer(self, msg_cnt: bytes, reply: bytes) -> None:",3,,,,,,,,,,
"if shaft_lmc == ""?"" and shaft_mmc != ""?"":",3,,,,,,,,,,
"(""f#'"", 1),",3,,,,,,,,,,
ICON_WAIT1 = b'\x14',3,,,,,,,,,,
"def get_id(dfu: Stm32UartDfu, args: argparse.Namespace) -> NoReturn:",3,,,,,,,,,,
"0x09: ""IGP"",       0x0A: ""BBN-RCC-MON"", 0x0B: ""NVP-II"",",3,,,,,,,,,,
"""ramp_down must be an int""",3,,,,,,,,,,
for i in value])),3,,,,,,,,,,
"memory_map: List[Dict[str, str]] = None) -> bytes:",3,,,,,,,,,,
self.ser.write(b'g'),3,,,,,,,,,,
"if isinstance(obj, dict):",3,,,,,,,,,,
"elif tone.startswith(""g""):",3,,,,,,,,,,
"if len(word) > (columns - 1) - len(output.split(""\n"")[-1]):",3,,,,,,,,,,
"""autoreconnection enabled:i:1"", ""authentication level:i:0"",",3,,,,,,,,,,
opCp_Gteq32 = b'\x5A',3,,,,,,,,,,
"0x27: ""TP++"",      0x28: ""IL"",          0x29: ""IPv6"",",3,,,,,,,,,,
LARGE_ICON = b'\x02'  # 24x22_Yes_No_OFF_FILEOps.bmp,3,,,,,,,,,,
"0x6C: ""IPComp"",    0x6D: ""SNP"",         0x6E: ""Compaq-Peer"",",3,,,,,,,,,,
"""ramp_down_time must be an number""",3,,,,,,,,,,
self._current_movement['started_at'],3,,,,,,,,,,
tmp=tmp+'\n\nThey are removed from the selection.',3,,,,,,,,,,
if not where:,3,,,,,,,,,,
tmp_index=tmp.find('T'),3,,,,,,,,,,
"ns = self.nameservers[0] if self.nameservers else ""8.8.8.8""",3,,,,,,,,,,
titlestyle= ''',3,,,,,,,,,,
"return utils.data('Float',float(p.FLOAT))",3,,,,,,,,,,
"hole_mmc = vin(""Hole MMC"", ""?"", units=""in"")",3,,,,,,,,,,
'tone is too high: ' + tone + ' (' + str(freq) + ' Hz)',3,,,,,,,,,,
target_pos_inner = cur_mov['target_motor_pos'][0],3,,,,,,,,,,
@_('IF expr LBRACE statements RBRACE ELSE LBRACE statements RBRACE'),3,,,,,,,,,,
'target_position': position,3,,,,,,,,,,
"'speed_right': speed_right,",3,,,,,,,,,,
start_pos_inner = cur_mov['start_motor_pos'][0],3,,,,,,,,,,
"'Port_A',",3,,,,,,,,,,
"with open(path + '.rsf', 'rb') as file:",3,,,,,,,,,,
"if region: url += ""&region="" + region",3,,,,,,,,,,
Test = branch[1]['test'],3,,,,,,,,,,
"self.parser.add_argument(""-f"", ""--flags"", type=int, default=None, help=""The message flags to use (Defaults to None (i.e. not overwritten))."")",3,,,,,,,,,,
"def _retry(retry_num: int = 0, action: str = '', exc_call: Callable = None):",3,,,,,,,,,,
os.chdir('../raw'),3,,,,,,,,,,
info=xml_list[i].split('.'),3,,,,,,,,,,
PUT_STRING = b'\x08',3,,,,,,,,,,
def remote(self) -> Remote:,3,,,,,,,,,,
spec.loader.exec_module(module),3,,,,,,,,,,
'not the expected movement: ' + self._current_movement['op'],3,,,,,,,,,,
"def channel(self, value: int):",3,,,,,,,,,,
parser.print_help(),3,,,,,,,,,,
opWrite16 = b'\xCD',3,,,,,,,,,,
"def input(prompt, stdin = sys.stdin, size: int = -1, **kwargs):",3,,,,,,,,,,
TST_ENABLE_UART = b'\x11',3,,,,,,,,,,
"ktype, kcontent = data.split("":"", 1)",3,,,,,,,,,,
"if (len(output.split(""\n"")[-1]) >= (columns - 1)) or (len(output.split(""\n"")[-1] + word + "" "") >= (columns - 1)):",3,,,,,,,,,,
config[key] = str(value),3,,,,,,,,,,
"elif tone.startswith(""d""):",3,,,,,,,,,,
"help=' '.join([_ARGS_HELP['address'], 'dump.']))",3,,,,,,,,,,
REMOVE = b'\x1E',3,,,,,,,,,,
"self.scan(args.pop(""query""), **args)",3,,,,,,,,,,
) -> float:,3,,,,,,,,,,
self.module = ir.Module('main'),3,,,,,,,,,,
"def del_dir(self, path: str, *, secure: bool = True) -> None:",3,,,,,,,,,,
"filename = resource_path(os.path.join('src', filename1))",3,,,,,,,,,,
"print(""Open file "" + filename)",3,"print(""Open",,,,,,,,,"print(""Open"
"(""bb'"", 1),",3,,,,,,,,,,
"if ""Bootstrapped"" in line:",3,,,,,,,,,,
'hw_version',3,,,,,,,,,,
"if port == ""default"":",3,,,,,,,,,,
if self._current_movement['op'] == 'Time_Speed':,3,,,,,,,,,,
"address_families.add_argument(""-6"", ""--ipv6"", action = ""store_true"", help = ""Use IPv6 instead of IPv4. (AddressFamily: AF_INET6)"")",3,,,,,,,,,,
"""speed needs to be an integer""",3,,,,,,,,,,
"self.load_file(path + '.rsf', '../prjs/sound/tmp.rsf')",3,,,,,,,,,,
"prefix = """" if depth == 0 else ("" -  "" if depth == 1 else (""    - "" if depth == 2 else (""  "" * depth) + ""- ""))",3,,,,,,,,,,
"prefix = ""|  "" * depth",3,,,,,,,,,,
HW_WIFI = b'\x03',3,,,,,,,,,,
'volume must be in range [0 - 100]',3,,,,,,,,,,
"POW = b'\x14'  # !< Exponent r = powf(x,y)",3,,,,,,,,,,
"print(datetime.now().strftime(""[i] Started sniffing %A, %B %d at %H:%M:%S!""))",3,"print(datetime.now().strftime(""[i]",,,,,,,,,"print(datetime.now().strftime(""[i]"
for i in range (len(EOF_check)):,3,,,,range (,,,,,,range (
import netaddr,3,,,,,,,,,,
text='POD files',3,,,,,,,,,,
def color(self) -> int:,3,,,,,,,,,,
NE = r'!=',3,,,,,,,,,,
"""reply needs to be of type bool""",3,,,,,,,,,,
'back must be a bool',3,,,,,,,,,,
class _Tracking:,3,,,,,,,,,,
from core.modules.base import Program,3,,,,,,,,,,
"'<2i',",3,,,,,,,,,,
"def dump(self, dfu: Stm32UartDfu, args: argparse.Namespace) -> NoReturn:",3,,,,,,,,,,
def connect_usb(self) -> int:,3,,,,,,,,,,
"def rgb_white_balance(self, raw: Iterable):",3,,,,,,,,,,
ICON_CHECKBOX = b'\x08',3,,,,,,,,,,
'duration must be a number',3,,,,,,,,,,
"protocol: str,",3,,,,,,,,,,
SET_SEARCH = b'\x03',3,,,,,,,,,,
GET_VISIBLE = b'\x02',3,,,,,,,,,,
orelse = branch[1]['orelse'],3,,,,,,,,,,
"""speed must be an int""",3,,,,,,,,,,
"def __init__(self, buffer: bytes = b""""):",3,,,,,,,,,,
LED_LG = b'\x04'  # Left green,3,,,,,,,,,,
"resp = resp1.decode(""utf-8"") + resp2.decode(""utf-8"")",3,,,,,,,,,,
"def _incomplete_len(self, progress: int) -> int:",3,,,,,,,,,,
"phone.add_argument(""--country-code"", type = str, metavar = ""code"", default = """", help = ""This parameter must be passed when using non US/Canada based phone numbers. Use the ISO-3166 two-digit country code (Great Britain = GB). If not entered it defaults to US."")",3,,,,,,,,,,
"return utils.data('Name',p.NAME)",3,,,,,,,,,,
"args=(path + '.rsf', ev3_path + '.rsf'),",3,,,,,,,,,,
class Tones:,3,,,,,,,,,,
"btn1.config(state=""disabled"")",3,,,,,,,,,,
"print(f""    - Size:    {info['size']}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"print(""[i] Sending Client Hello ..."")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"'<B',",3,,,,,,,,,,
"duration: Number=None,",3,,,,,,,,,,
"transport((self.arguments.target, self.arguments.port), timeout=self.arguments.timeout, retries=self.arguments.retries),",3,,,,,,,,,,
def touched(self) -> bool:,3,,,,,,,,,,
TERMINAL = b'\x1F',3,,,,,,,,,,
module = importlib.util.module_from_spec(spec),3,,,,,,,,,,
'{:02X}'.format(rc) +,3,,,,,,,,,,
"print('Current time is: {0} or {1}'.format(time.asctime(gmtime()) + ""z"", time.asctime(localtime()) + "" "" + time.tzname[0]) + ""/"" + str(int(time.timezone/60/60)) + ""hrs"")",3,print('Current,,,,,,,,,print('Current
DEL_CACHE_FILE = b'\x17',3,,,,,,,,,,
'ev3_obj needs to be active',3,,,,,,,,,,
"return bs4.BeautifulSoup(response.content, ""html.parser"")",3,,,,,,,,,,
"self,",3,,,,,,,,,,
ADD = b'\x02',3,,,,,,,,,,
print('LEAVE UNKNOWNS AS ?'),3,print('LEAVE,,,,,,,,,print('LEAVE
"return {'name':p.NAME0,'type':p.NAME1}",3,,,,,,,,,,
SEARCH_ITEMS = b'\x08',3,,,,,,,,,,
opMove8_8 = b'\x30',3,,,,,,,,,,
[self._port]['used_by'] = None,3,,,,,,,,,,
"'total',",3,,,,,,,,,,
else:,3,,,,,,,,,,
"'address': 'Memory address for ',",3,,,,,,,,,,
GET_IMOTOR = b'\x07',3,,,,,,,,,,
"""speed needs to be in range [-100 - 100]""",3,,,,,,,,,,
if not reply.startswith('Accept:EV340'):,3,,,,,,,,,,
"0x59: ""OSPF"",      0x5A: ""Sprite-RPC"",  0x5B: ""LARP"",",3,,,,,,,,,,
callback=None,3,,,,,,,,,,
"data = b""\x00""",3,,,,,,,,,,
"btn_pwd=tk.Button(self, text=""Get pwd"", command=Get_pwd)",3,,,,,,,,,,
_DIRECT_REPLY_ERROR = b'\x04',3,,,,,,,,,,
return output,3,,,,,,,,,,
"self._introspection[""volume""],",3,,,,,,,,,,
XOR,3,,,,,,,,,,
'Protocol: ' + protocol,3,,,,,,,,,,
"""polarity_left needs to be -1 or 1""",3,,,,,,,,,,
"raise ValueError(""Invalid port: %s"" % port)",3,,,,,,,,,,
"os.link(path_dem,'dem.grd')",3,,,,,,,,,,
ICON_DISCONNECT = b'\x11',3,,,,,,,,,,
"for b in range(0, len(data), 16):",3,,,,range(,,,,,,range(
"def pprint(obj, depth: int = 0):",3,,,,,,,,,,
opDo = b'\x0F',3,,,,,,,,,,
"0x4B: ""PVP"",       0x4C: ""BR-SAT-MON"",  0x4D: ""SUN-ND"",",3,,,,,,,,,,
del self._current_movement['stopped'],3,,,,,,,,,,
READY_SI = b'\x1D',3,,,,,,,,,,
"speed: int = None,",3,,,,,,,,,,
os.makedirs('raw_orig'),3,,,,,,,,,,
g.write('#!/bin/csh -f\n'),3,,,,,,,,,,
"rdtype, rdclass, af,",3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][self._port]['used_by'] = None",3,,,,,,,,,,
GET_RESULT = b'\x04',3,,,,,,,,,,
"print(f'Illegal character {t.value[0]}, in line {self.lineno}, index {self.index}')",3,print(f'Illegal,,,,,,,,,print(f'Illegal
"'TwoWheelVehicle',",3,,,,,,,,,,
"print("" -  Permanent Key: "")",3,"print(""",,,,,,,,,"print("""
"import re, argparse",3,,,,,,,,,,
+ ' > tmp_file\n',3,,,,,,,,,,
"print(f""... Received message: type = {type}, ver = {version:04x}, length = {len(payload)}"", dark=True)",3,"print(f""...",,,,,,,,,"print(f""..."
"self.parser.add_argument(""--relativize"", type=bool, default=True, help=""If True, all names in the zone will be relativized to the zone origin."")",3,,,,,,,,,,
MENU_ICON = b'\x03',3,,,,,,,,,,
ICON_NONE = b'\x21',3,,,,,,,,,,
'Either protocol or ev3_obj needs to be given',3,,,,,,,,,,
"@pytest.mark.parametrize('address,size', [",3,,,,,,,,,,
TYPE_BYTECODE = b'\x03',3,,,,,,,,,,
"'y',",3,,,,,,,,,,
importer = zipimport.zipimporter(file),3,,,,,,,,,,
"""disable wallpaper:i:1"", ""allow font smoothing:i:0"", ""allow desktop composition:i:0"",",3,,,,,,,,,,
"for word in string.split("" ""):",3,,,,,,,,,,
brake: bool = False,3,,,,,,,,,,
"'Christoph Gaukel', 'manual'),",3,,,,,,,,,,
print('rawclose = ' + rawclose),3,print('rawclose,,,,,,,,,print('rawclose
'for specified size and memory map.'),3,,,,,,,,,,
SICON_WIFI_2 = b'\x0D',3,,,,,,,,,,
"verbosity: int,",3,,,,,,,,,,
opMove8_16 = b'\x31',3,,,,,,,,,,
'reply with msg_cnt ' +,3,,,,,,,,,,
if platform.system() == 'Darwin':,3,,,,,,,,,,
CODE = b'\x0E',3,,,,,,,,,,
"assert isinstance(value, int), 'value must be an integer'",3,,,,,,,,,,
"""stdin"", ""stdout"", ""stderr""]",3,,,,,,,,,,
_locked: bool = False,3,,,,,,,,,,
data = chunk = sock.recv(0xFFF),3,,,,,,,,,,
class CrimeFlare(Program):,3,,,,,,,,,,
"""turn needs to be an integer""",3,,,,,,,,,,
"def __new__(self, buffer: bytes = b""""):",3,,,,,,,,,,
"self.parser.add_argument(""host"", type = str, help = ""Target hostname or address."")",3,,,,,,,,,,
print(rtp.payload),3,print(rtp.payload),,,,,,,,,print(rtp.payload)
"""zone"": {""check_origin"": check_origin, ""relativize"": relativize}}",3,,,,,,,,,,
[self._port]['used_by'] = self,3,,,,,,,,,,
erase_command = commands.add_parser('erase'),3,,,,,,,,,,
GET_SDCARD = b'\x1E',3,,,,,,,,,,
elif line.endswith(b'\x2F'):,3,,,,,,,,,,
"verbosity: int = 0,",3,,,,,,,,,,
opSound_Test = b'\x95',3,,,,,,,,,,
GE = r'>=',3,,,,,,,,,,
"self._introspection[""mem_total""],",3,,,,,,,,,,
if key.islower():,3,,,,,,,,,,
if self.arguments.search:,3,,,,,,,,,,
assert reply == '2C:00',3,,,,,,,,,,
PROGRAM_ERROR = b'\x18',3,,,,,,,,,,
CREATE16 = b'\x02',3,,,,,,,,,,
assert exc.args[0] == 'direct command 2B:00 replied error',3,,,,,,,,,,
ret_type = self.type_map['int'],3,,,,,,,,,,
"raise Exception(""Failed to list cloudflare-user domains using this CFL id ..."")",3,,,,,,,,,,
"def __init__(self, buffer: bytes = b""""):",3,,,,,,,,,,
"for i in range(0, 100):",3,,,,range(,,,,,,range(
"self.sensors_as_dict[port_motor_input(self._port)] = struct.unpack('<b', reply)[0]",3,,,,,,,,,,
timeout=self._DEFAULT_PARAMETERS['timeout']),3,,,,,,,,,,
"for attribute in map(lambda name: getattr(module, name), filter(lambda x: not x.startswith(""_""), dir(module))):",3,,,,,,,,,,
opAnd8 = b'\x24',3,,,,,,,,,,
SCROLL = b'\x14',3,,,,,,,,,,
"console.print(f"" -  {e}"", color = ""red"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
"btn_create.grid(row=8, column=7, sticky='e')",3,,,,,,,,,,
'''pytest ev3_dc.EV3''',3,,,,,,,,,,
"header(len(data) + safety_gap) + data + b'\x80' * safety_gap,",3,,,,,,,,,,
OBJ_START = b'\x04',3,,,,,,,,,,
"rb2.grid(row=3, column=4, sticky='w')",3,,,,,,,,,,
opCp_Lt16 = b'\x45',3,,,,,,,,,,
SET_CONNECTION = b'\x07',3,,,,,,,,,,
"print(f""    - {ns} [{', '.join(ip.to_text() for ip in self.resolver.query(ns, 'A'))}]"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
htmlhelp_basename = 'ev3_dcdoc',3,,,,,,,,,,
return b''.join((,3,,,,,,,,,,
"ev3_obj: 'EV3' = None,",3,,,,,,,,,,
self.dtemLabel = QLabel('Digital Temperature'),3,,,,,,,,,,
port_str = 'PORT_A',3,,,,,,,,,,
'song needs to be a dict',3,,,,,,,,,,
LSHIFT = r'<<',3,,,,,,,,,,
LT = r'<',3,,,,,,,,,,
opArray_Read = b'\xC3',3,,,,,,,,,,
"if ""end"" not in kwargs:",3,,,,,,,,,,
"cfl_ids = [a.get(""href"") for a in page.findAll(""a"", attrs={""href"": re.compile(r""^http://www.crimeflare.com/cgi-bin/cflist/.*$"")})]",3,,,,,,,,,,
"binary = [(byte >> bit) & 1 for bit in range(7, -1, -1)]",3,,,,range(,,,,,,range(
"def scan(self, host, **kwargs):",3,,,,,,,,,,
image_list=glob.glob('S1*SLC*'),3,,,,,,,,,,
CONNEC_ITEMS = b'\x11',3,,,,,,,,,,
tmp='The following scenes do not have associated POD file:\n\n',3,,,,,,,,,,
"'<2i2B',",3,,,,,,,,,,
"import argparse, socket",3,,,,,,,,,,
"QMessageBox.about(self, ""Error3!"", ""Error3, check the usb connection, then click 'Refresh Port'"")",3,,,,,,,,,,
"frame.grid(row=0, column=0, sticky=""nsew"")",3,,,,,,,,,,
ACOS = b'\x0F'  # !<,3,,,,,,,,,,
"output = """"",3,,,,,,,,,,
assert reply == '',3,,,,,,,,,,
CLOSE_FILEHANDLE = b'\x98',3,,,,,,,,,,
def channel(self) -> int:,3,,,,,,,,,,
BROWSE_FOLDERS = b'\x00'  # folders,3,,,,,,,,,,
"value = self.builder.fcmp_ordered('<=',lhs,rhs)",3,,,,,,,,,,
def _serial_flush(self) -> NoReturn:,3,,,,,,,,,,
"self.parser.add_argument(""-a"", ""--address"", type = str, default = socket.gethostname(), help = ""Target address."")",3,,,,,,,,,,
def commands(self) -> bytes:,3,,,,,,,,,,
"label=tk.Label(self,text='Chosen scenes')",3,,,,,,,,,,
"port: int,",3,,,,,,,,,,
"self.rdtypes = dict(sorted([(k, v) for k, v in dns.rdatatype.__dict__.items() if k.isupper()], key=lambda x: x[0]))",3,,,,,,,,,,
"'42s42s42s',",3,,,,,,,,,,
"0x56: ""DGP"",       0x57: ""TCF"",         0x58: ""EIGRP"",",3,,,,,,,,,,
opCom_Write = b'\x92',3,,,,,,,,,,
READY_RAW = b'\x1C',3,,,,,,,,,,
tmp2=tmp1.split('/'),3,,,,,,,,,,
data += chunk,3,,,,,,,,,,
"(""bb'"", .5),",3,,,,,,,,,,
opBp0 = b'\x88'  # VM,3,,,,,,,,,,
"def __init__(self, ports: dict = {80: 80}, discard_key: bool = False, detached: bool = False, private_key = None, controller: Controller = None):",3,,,,,,,,,,
"print(f"" -  Descriptor Identifier: {service.descriptor_id}"")",3,"print(f""",,,,,,,,,"print(f"""
opOutput_Step_Speed = b'\xAE',3,,,,,,,,,,
"""volume needs to be an int""",3,,,,,,,,,,
ICON_QUESTIONMARK = b'\x1B',3,,,,,,,,,,
opSound_Ready = b'\x96',3,,,,,,,,,,
"RGBColor = namedtuple('RGBColor', [",3,,,,,,,,,,
controller = tor.Controller(),3,,,,,,,,,,
"print(line.strip(), dark = line.startswith(""%""))",3,"print(line.strip(),",,,,,,,,,"print(line.strip(),"
GET_BUMBED = b'\x0E',3,,,,,,,,,,
opJr_False = b'\x41',3,,,,,,,,,,
"'run': 'Run program after loading.',",3,,,,,,,,,,
"group = parser.add_argument_group(""Socket Options/Arguments"")",3,,,,,,,,,,
"def _ops_busy(self, global_offset=0) -> bytes:",3,,,,,,,,,,
"key = key.replace(""_"", ""-"")",3,,,,,,,,,,
"self.parser.epilog = ""Note: The Stats (-s/--stats) endpoint is rate-limited to 30 calls per hour.""",3,,,,,,,,,,
fmt = str(part_size) + 's',3,,,,,,,,,,
"dns.query.udp(message, ns, timeout=timeout, port=port, af=af, source=source, source_port=source_port, ignore_unexpected=ignore_unexpected, one_rr_per_rrset=one_rr_per_rrset))",3,,,,,,,,,,
"0x48: ""CPNX"",      0x49: ""CPHB"",        0x4A: ""WSN"",",3,,,,,,,,,,
"def __init__(self, address: str, port: int, *args, **kwargs):",3,,,,,,,,,,
"self.parser.add_argument(""-e"", ""--export"", type=argparse.FileType(""wb""), help=""Export DNS Zone."")",3,,,,,,,,,,
TO_SDCARD = b'\x0F',3,,,,,,,,,,
"ramp_up: int = 30,",3,,,,,,,,,,
+ 'cat ../raw_orig/',3,,,,,,,,,,
RELEASE = b'\x06',3,,,,,,,,,,
WARNING_BUSY = b'\x80',3,,,,,,,,,,
try:,3,,,,,,,,,,
TO_BRICK = b'\x0E',3,,,,,,,,,,
if source:,3,,,,,,,,,,
GET_VOLUME = b'\x04',3,,,,,,,,,,
"print(f"" -  {hs.address} ({hs.descriptor_id})"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
"self._physical_ev3._introspection[""sensors""][PORT_2][""type""],",3,,,,,,,,,,
TYPE_GRAPHICS = b'\x04',3,,,,,,,,,,
"""port_left needs to be an integer""",3,,,,,,,,,,
"def domain(self, query: str, keyPeople: bool = False, prettyPrint: bool = False):",3,,,,,,,,,,
except KeyboardInterrupt:,3,,,,,,,,,,
"0x15: ""PRM"",       0x16: ""XNS-IDP"",     0x17: ""TRUNK-1"",",3,,,,,,,,,,
"response = (getCmd(*args, *[ObjectType(ObjectIdentity(obj)) for obj in self.arguments.get])",3,,,,,,,,,,
"load_command.add_argument('-f', '--file', help='Binary firmware file.')",3,,,,,,,,,,
"keyalgorithm = dns.tsig.default_algorithm if not keyalgorithm else getattr(dns.tsig, keyalgorithm)",3,,,,,,,,,,
"'ramp_down_time': ramp_down_time,",3,,,,,,,,,,
'position must be an int value',3,,,,,,,,,,
ports[int(number)] = target,3,,,,,,,,,,
TST_CLOSE_MODE2 = b'\x16',3,,,,,,,,,,
raise SensorError('no color sensor connected at ' + port_str),3,,,,,,,,,,
"print(f""[i] Request results for Name based Company Lookup:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"rhs, rhs_type = self.visit_value(branch[1]['rhs'])",3,,,,,,,,,,
values = val.split(' '),3,,,,,,,,,,
"assert tld is None or isinstance(tld, str), \",3,,,,,,,,,,
opMove32_F = b'\x3B',3,,,,,,,,,,
def system(self) -> str:,3,,,,,,,,,,
ICON_UP = b'\x12',3,,,,,,,,,,
"buttonReply = QMessageBox.question(self, 'Save file', ""Save file at ""+ dst +"" ?"", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)",3,,,,,,,,,,
TST_WRITE_UART = b'\x0F',3,,,,,,,,,,
endtime = time.time() + timeout,3,,,,,,,,,,
"self._introspection[""hw_vers""] = hw_vers.split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
SICON_BT_CONNVISIB = b'\x0B',3,,,,,,,,,,
@_('NAME LPAREN params RPAREN'),3,,,,,,,,,,
opBp1 = b'\x89',3,,,,,,,,,,
LEFT_BUTTON = b'\x05',3,,,,,,,,,,
"r'Port: (\d{4,4})\s\n' +",3,,,,,,,,,,
_SYSTEM_COMMAND_NO_REPLY = b'\x81',3,,,,,,,,,,
"assert isinstance(tld, str), \",3,,,,,,,,,,
DELETE_FILE = b'\x9C',3,,,,,,,,,,
self._iter(answer),3,,,,,,,,,,
"output += "" """,3,,,,,,,,,,
'speed  must be in range [1 - 100]',3,,,,,,,,,,
"for dict in {""Notes"": notes, ""References"": references, ""Credits"": credits}.items():",3,,,,,,,,,,
print(ex),3,print(ex),,,,,,,,,print(ex)
def cont_as_task(self) -> Task:,3,,,,,,,,,,
"(""raw_ecn"", c_ubyte, 2),",3,,,,,,,,,,
"pkwargs = {""css"": self.arguments.stylesheet, ""confidence"": self.arguments.confidence, ""macromeasures"": self.arguments.macromeasures}",3,,,,,,,,,,
"self.parser.add_argument(""--check-origin"", type=bool, default=True, help=""Should sanity checks of the origin node be done? The default is True."")",3,,,,,,,,,,
"QMessageBox.about(self, ""Error2!"", ""Error2, check the usb connection, then click 'Refresh Port'"")",3,,,,,,,,,,
"assert isinstance(path_dest, str), \",3,,,,,,,,,,
opCom_Test = b'\xD5',3,,,,,,,,,,
extra = False,3,,,,,,,,,,
opRl16 = b'\x2D',3,,,,,,,,,,
GET_SHUTDOWN = b'\x10',3,,,,,,,,,,
opJr_Neq16 = b'\x71',3,,,,,,,,,,
def memory(self) -> Memory:,3,,,,,,,,,,
"0x18: ""TRUNK-2"",   0x19: ""LEAF-1"",      0x1A: ""LEAF-2"",",3,,,,,,,,,,
def stop_sound(self) -> None:,3,,,,,,,,,,
"(""raw_total_length"", c_ushort),",3,,,,,,,,,,
"connection.send(data.encode() if isinstance(data, str) else data)",3,,,,,,,,,,
'''set and read brickname''',3,,,,,,,,,,
opBp_Set = b'\x8C',3,,,,,,,,,,
"print(f""[i] Request results for Account Statistics endpoint:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"self.parser.add_argument(""-p"", ""--ports"", nargs=""+"", help=""Hidden service port or map of hidden service port to their targets."")",3,,,,,,,,,,
"elif isinstance(obj, (list, tuple, set)):",3,,,,,,,,,,
CLR_ALL = b'\x0A',3,,,,,,,,,,
TO_FILE = b'\x15',3,,,,,,,,,,
"assert 'led_sequence' in song, \",3,,,,,,,,,,
GET_MINUTES = b'\x06',3,,,,,,,,,,
"print(f""    - IDX:     {info['idx']}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
class Stm32UartDfu:,3,,,,,,,,,,
_DIRECT_COMMAND_NO_REPLY = b'\x80',3,,,,,,,,,,
dump_command = commands.add_parser('dump'),3,,,,,,,,,,
help='Specify file for memory dump.'),3,,,,,,,,,,
"output_file = input(""Provide your desired output filename: "")",3,,,,,,,,,,
"self._physical_ev3._introspection[""network_mac_adr""]",3,,,,,,,,,,
TEXTBOX_READ = b'\x15',3,,,,,,,,,,
TYPE_PROGRAM = b'\x06',3,,,,,,,,,,
opJr_Eq16 = b'\x6D',3,,,,,,,,,,
"'step3_right': step3_right,",3,,,,,,,,,,
"ramp_down_time: float = None,",3,,,,,,,,,,
'no beacon channel has been set',3,,,,,,,,,,
SET_VISIBLE = b'\x02',3,,,,,,,,,,
"return None, None, None",3,,,,,,,,,,
opOutput_Test = b'\xA9',3,,,,,,,,,,
SET_BACK_BLOCK = b'\x0A',3,,,,,,,,,,
"winIcon = resource_path(os.path.join('src', winIcon1))",3,,,,,,,,,,
return module,3,,,,,,,,,,
"global stdin, stdout, stderr",3,,,,,,,,,,
BLUE = b'\x02',3,,,,,,,,,,
"return utils.data('Float',float(p.FLOAT)*-1)",3,,,,,,,,,,
"return self._physical_ev3._introspection[""name""]",3,,,,,,,,,,
"raise ValueError(f""Unknown or invalid TSIG Algorithm \""{keyalgorithm}\"" ..."")",3,,,,,,,,,,
target_pos_outer = cur_mov['target_motor_pos'][1],3,,,,,,,,,,
"direction: int = 1,",3,,,,,,,,,,
CAL_DEFAULT = b'\x04',3,,,,,,,,,,
TRUNC = b'\x15'  # !< Truncate r = (float)((int)(x * pow(y))) / pow(y),3,,,,,,,,,,
"data = b''.join([random.randint(0, 255).to_bytes(1, 'big')",3,,,,,,,,,,
PICTURE = b'\x07',3,,,,,,,,,,
"assert isinstance(cmd, bytes), \",3,,,,,,,,,,
REPLY = b'\x0E',3,,,,,,,,,,
return stdin.read(size = size),3,,,,,,,,,,
raise SensorError('no ultrasonic connected at ' + port_str),3,,,,,,,,,,
"self._introspection[""name""] = name.split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
opCp_Ne8 = b'\x50',3,,,,,,,,,,
"elif clearance != ""?"" and allowance == ""?"":",3,,,,,,,,,,
"'step2_right': step2_right,",3,,,,,,,,,,
ICON_CONNECTED = b'\x1E',3,,,,,,,,,,
'polarity_right must be an integer',3,,,,,,,,,,
' established',3,,,,,,,,,,
"actions.add_argument(""-c"", ""--company"", type = str, metavar = ""name"", help = ""Request information about a specific company by name."")",3,,,,,,,,,,
opMove16_16 = b'\x35',3,,,,,,,,,,
"print(""[!] No heartbeat response received, server's likely not vulnerable."", color = ""red"")",3,"print(""[!]",,,,,,,,,"print(""[!]"
TST_POLL_MODE2 = b'\x15',3,,,,,,,,,,
"0x5F: ""MICP"",      0x60: ""SCC-SP"",      0x61: ""ETHERIP"",",3,,,,,,,,,,
"self.option_class = {v.value: k for k, v in self.Classes.__members__.items()}[self._opt_class]",3,,,,,,,,,,
"string += termcolor.colored(message, color, attrs=[""dark""] if dark else [])",3,,,,,,,,,,
"""local must be a bool""",3,,,,,,,,,,
'Erase memory failed: can not find boundaries ',3,,,,,,,,,,
"filename=resource_path(os.path.join('src', filename1))",3,,,,,,,,,,
VERTBAR = b'\x0F',3,,,,,,,,,,
"assert isinstance(value, int), ""speed must to be an int""",3,,,,,,,,,,
'radius needs to be a positive number',3,,,,,,,,,,
columns = os.get_terminal_size().columns,3,,,,,,,,,,
"actions.add_argument(""-e"", ""--email"", type = str, metavar = ""address"", help = ""Request information about a specific person by email."")",3,,,,,,,,,,
"self.parser.add_argument(""-s"", ""--source"", type=str, default=socket.gethostbyname(socket.gethostname()), help=""Source address."")",3,,,,,,,,,,
"print(""[i] Waiting for Server Hello ..."")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"elif tone.endswith(""''""):",3,,,,,,,,,,
"""ramp_up_time must be a number""",3,,,,,,,,,,
"""local_mem needs to be positive""",3,,,,,,,,,,
ICON_WAIT2 = b'\x15',3,,,,,,,,,,
info1=str(info1),3,,,,,,,,,,
DATA_V = b'\x07'  # Variable type,3,,,,,,,,,,
"file = self.arguments.output or open(f""{self.arguments.target}-{self.arguments.port}.rdp"", ""w"")",3,,,,,,,,,,
opNop = b'\x01',3,,,,,,,,,,
print(fileName),3,print(fileName),,,,,,,,,print(fileName)
"def on_recv(self, address, data):",3,,,,,,,,,,
"if location: url += ""&location="" + location",3,,,,,,,,,,
class Sniffer(socket.sniffer):,3,,,,,,,,,,
export.write(zone),3,,,,,,,,,,
ERRORTEXT = b'\x03',3,,,,,,,,,,
WAIT_HORZ = b'\x06',3,,,,,,,,,,
"print(prefix + ""{:04x}: {:48} |{}|"".format(b, "" "".join(f""{char:02x}"" for char in line), """".join((chr(char) if 32 <= char <= 126 else ""."") for char in line).ljust(16)), **pkwargs)",3,print(prefix,,,,,,,,,print(prefix
NO_NOTSEL = b'\x02',3,,,,,,,,,,
"self.ast = ('Module',{'body':[]})",3,,,,,,,,,,
"0x0C: ""PUP"",       0x0D: ""ARGUS"",       0x0E: ""EMCON"",",3,,,,,,,,,,
tmp=info[0]+':'+EOF_list[i],3,,,,,,,,,,
"assert isinstance(value, int), ""volume needs to be of type int""",3,,,,,,,,,,
"volume = self._physical_ev3._introspection[""volume""]",3,,,,,,,,,,
"for certificate in filter(lambda cert: self.arguments.domain in cert.get(""names"", []) and not any(map(lambda d: d.endswith("".cloudflaressl.com"") or d.endswith("".cloudflare.com""), cert[""common_name""])), certificates):",3,,,,,,,,,,
ICON_IMAGE = b'\x06',3,,,,,,,,,,
opJr_NeqF = b'\x73',3,,,,,,,,,,
"(""raw_identification"", c_ushort),",3,,,,,,,,,,
RSHIFT = r'>>',3,,,,,,,,,,
"size = (int(memory_map[-1]['address'], 0) +",3,,,,,,,,,,
"if hole_lmc == ""?"" and shaft_lmc != ""?"" and clearance !=""?"":",3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in reply[4:5]) +,3,,,,,,,,,,
raise exception,3,,,,,,,,,,
"print(f""    - {introduction_point.identifier}: "" + f""{introduction_point.address}:{introduction_point.port}"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
"assert isinstance(value, int), ""polarity_right needs to be of type int""",3,,,,,,,,,,
"info2=eval(""info2[0:4]+info2[5:7]+info2[8:10]"")",3,,,,,,,,,,
"answer = self.query(self.arguments.server, self.arguments.port)",3,,,,,,,,,,
"def __init__(self, timeout: int = 8, quiet: bool = True):",3,,,,,,,,,,
"def port_right(self, value: int):",3,,,,,,,,,,
"'voltage',",3,,,,,,,,,,
"'<f',",3,,,,,,,,,,
"'ramp_up_time': ramp_up_time,",3,,,,,,,,,,
'temperament needs to be positive',3,,,,,,,,,,
GET_BRICKNAME = b'\x0D',3,,,,,,,,,,
opMoveF_F = b'\x3F',3,,,,,,,,,,
GET_SPEED = b'\x17',3,,,,,,,,,,
"print(f""    - Offset:  {info['offset']}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"load_command.add_argument('-r', '--run', action='store_true',",3,,,,,,,,,,
"print(""Scraping: "" + pcap_file)",3,"print(""Scraping:",,,,,,,,,"print(""Scraping:"
PLUS = r'\+',3,,,,,,,,,,
"if method is ""phone"":",3,,,,,,,,,,
"self.parser.add_argument(""-c"", ""--close"", nargs=""+"", help=""Discontinue the specified hidden service."")",3,,,,,,,,,,
ops_get = b''.join((,3,,,,,,,,,,
while remain > 0:,3,,,,,,,,,,
).quantize(Decimal('1.0000')),3,,,,,,,,,,
"state=""disabled"",",3,,,,,,,,,,
"answer = self.metaquery(host, rdtype, **kwargs).answer",3,,,,,,,,,,
MOD = r'%',3,,,,,,,,,,
ENTER_BUTTON = b'\x02',3,,,,,,,,,,
"src2 = resource_path(os.path.join('src', src2a))",3,,,,,,,,,,
ops += b''.join((,3,,,,,,,,,,
"parameters = b''.join([(end - start).to_bytes(2, 'big'), *sectors])",3,,,,,,,,,,
"upbeat_duration = 60 * song[""upbeat""] / song[""tempo""]",3,,,,,,,,,,
opObject_Start = b'\x05',3,,,,,,,,,,
"@_retry(_RETRIES, 'write memory', _serial_flush)",3,,,,,,,,,,
tokens = {,3,,,,,,,,,,
"(""g'"", 1),",3,,,,,,,,,,
"""duration needs to be positive""",3,,,,,,,,,,
SET_RAW = b'\x17',3,,,,,,,,,,
src2a = 'sensor_output_ori.csv',3,,,,,,,,,,
from core.modules import base,3,,,,,,,,,,
"elif tone[1] == ""b"":",3,,,,,,,,,,
font='Helvetica 10 bold italic'),3,,,,,,,,,,
'Protocol ' + protocol + 'is not valid',3,,,,,,,,,,
LIST_FILES = b'\x99',3,,,,,,,,,,
class MACLookup(Program):,3,,,,,,,,,,
"0x24: ""XTP"",       0x25: ""DDP"",         0x26: ""IDPR-CMTP"",",3,,,,,,,,,,
value = branch[1]['value'],3,,,,,,,,,,
"results = censys.ipv4.search(f""{fingerprint}"", fields = [""443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names"", ""443.https.tls.certificate.parsed.names"", ""ip""])",3,,,,,,,,,,
"resolver.timeout = arguments.get(""timeout"")",3,,,,,,,,,,
"direction=self._current_movement['direction'],",3,,,,,,,,,,
"kwargs={'repeat': False, 'volume': volume},",3,,,,,,,,,,
opCp_Ne16 = b'\x51',3,,,,,,,,,,
target_position = self._current_movement['target_position'],3,,,,,,,,,,
'timeout': 1  # seconds,3,,,,,,,,,,
"print(s + f""{value}"", dark = True)",3,print(s,,,,,,,,,print(s
"transports.add_argument(""-6"", ""--udp6"", action=""store_true"", help=""Use the UDP6 Transport."")",3,,,,,,,,,,
"self.parser.add_argument(""-k"", ""--key"", type = argparse.FileType(""ab+""), default = None, help = ""Key file."")",3,,,,,,,,,,
decoder = ImpactDecoder.IPDecoder(),3,,,,,,,,,,
TYPE_FOLDER = b'\x01',3,,,,,,,,,,
"from functools import reduce, wraps",3,,,,,,,,,,
"def query(self, server: str, port: int):",3,,,,,,,,,,
"if page.title.text.lower() == ""cloudflare search results"":",3,,,,,,,,,,
DOTLINE = b'\x15',3,,,,,,,,,,
"def delta_time(self, value: Number):",3,,,,,,,,,,
GET_FOLDERS = b'\x0D',3,,,,,,,,,,
ENCRYPT_WPA2 = b'\x01',3,,,,,,,,,,
ICON_TEXT = b'\x18',3,,,,,,,,,,
groupStyleCol = ''',3,,,,,,,,,,
"ramp_up: int,",3,,,,,,,,,,
opJr_Gteq32 = b'\x7A',3,,,,,,,,,,
for address in sorted(set(self.arguments.close)):,3,,,,,,,,,,
"def run(dfu: Stm32UartDfu, args: argparse.Namespace) -> NoReturn:",3,,,,,,,,,,
DEL_RETURN = b'\x03'  # Use return as delimiter,3,,,,,,,,,,
"""end of folder-data "" +",3,,,,,,,,,,
"g=open(prep_sh,'w',encoding='UTF-8')",3,,,,,,,,,,
speed = cur_mov['speed_right'],3,,,,,,,,,,
"def position(self, value: int) -> None:",3,,,,,,,,,,
"""bumps needs to be of type int""",3,,,,,,,,,,
"print(f""[i] Request results for Phone Number based Person Lookup:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
EQEQ = r'==',3,,,,,,,,,,
"assert 'stopped' in self._current_movement, \",3,,,,,,,,,,
"(""raw_dscp"", c_ubyte, 6),",3,,,,,,,,,,
SICON_BATT_3 = b'\x02',3,,,,,,,,,,
"self.controller.show_frame(""Step1"")",3,,,,,,,,,,
"""ramp_down_time must be positive""",3,,,,,,,,,,
'brake needs to be a boolean',3,,,,,,,,,,
"btn_create.grid(row=3, column=10, sticky='e')",3,,,,,,,,,,
def sensor_type(self) -> int:,3,,,,,,,,,,
ICON_UNKNOWN = b'\x06'  # Bluetooth type UNKNOWN,3,,,,,,,,,,
last_pos_outer = cur_mov['last_motor_pos'][1],3,,,,,,,,,,
"(""d''"", 1),",3,,,,,,,,,,
opArray = b'\xC1',3,,,,,,,,,,
opJr_Gteq8 = b'\x78',3,,,,,,,,,,
def maybe(*choices): return group(*choices) + '?',3,,,,,,,,,,
READ_CONTENT = b'\x0D',3,,,,,,,,,,
ops_stop = b''.join((,3,,,,,,,,,,
dir_dest = '/'.join(path.split('/')[:-1]),3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in cmd[7:]) + '|',3,,,,,,,,,,
dat = ':'.join(,3,,,,,,,,,,
[port_motor_input(self._port_right)]['used_by'] = None,3,,,,,,,,,,
"'<2i2B32s16s8s8s12s12s',",3,,,,,,,,,,
"'''stops the current motor movements, sets or releases brake",3,,,,,,,,,,
print(f'It returns {result}'),3,print(f'It,,,,,,,,,print(f'It
print(resp),3,print(resp),,,,,,,,,print(resp)
DEL_TAB = b'\x01'  # Use tab as delimiter,3,,,,,,,,,,
"if clearance != ""?"":",3,,,,,,,,,,
"parameters = b''.join([mass_erase, self._checksum(mass_erase)])",3,,,,,,,,,,
"self.parser.add_argument(""-T"", ""--timeout"", type=int, default=8, help=""The number of seconds to wait for a response from a server, before timing out."")",3,,,,,,,,,,
"brake=self._current_movement['brake'],",3,,,,,,,,,,
''',3,,,,,,,,,,
"port_left: bytes = PORT_A,",3,,,,,,,,,,
"print(""Allowance = {0} in\n"".format(str(round(allowance,4))))",3,"print(""Allowance",,,,,,,,,"print(""Allowance"
class Audio_Scraper:,3,,,,,,,,,,
opSubF = b'\x17',3,,,,,,,,,,
print('Usage: python3 run.py <filename>'),3,print('Usage:,,,,,,,,,print('Usage:
WRITE_VALUE = b'\x04',3,,,,,,,,,,
"btn_EOF_check=tk.Button(self, text=""      POD      "", command=lambda *args:Display(2))",3,,,,,,,,,,
"elif isinstance(value, (list, tuple)):",3,,,,,,,,,,
"STRING = r'(\"".*?\"")|(\'.*?\')'",3,,,,,,,,,,
except OSError:,3,,,,,,,,,,
"args = (SnmpEngine(), CommunityData(self.arguments.community, mpModel=0),",3,,,,,,,,,,
"output += word[:index] + ""\n"" + prefix",3,,,,,,,,,,
self._nameservers = self.nameservers,3,,,,,,,,,,
"ASYNC = 'ASYNC'  # reply if global_mem, never wait for reply",3,,,,,,,,,,
"if path.endswith(""/""):",3,,,,,,,,,,
GET_CODE = b'\x0E',3,,,,,,,,,,
raise TypeError('Expected a <file>'),3,,,,,,,,,,
domains = list(page.stripped_strings)[3:-4],3,,,,,,,,,,
RuntimeError('unknown movement'),3,,,,,,,,,,
opWriteF = b'\xCF',3,,,,,,,,,,
"dist = struct.unpack('<i', reply)[0]",3,,,,,,,,,,
"if clearance == ""?"" and allowance != ""?"":",3,,,,,,,,,,
'xx:xx:xx.xxxxxx Recv 0x|03:00|2B:00|02|' + '\n',3,,,,,,,,,,
"def on_error(self, address, exception):",3,,,,,,,,,,
os.chdir('../raw_orig'),3,,,,,,,,,,
ports = glob.glob('/dev/tty.*'),3,,,,,,,,,,
"self.parser.add_argument(""-d"", ""--discard-key"", action=""store_true"", help=""Avoid providing the key back in our response."")",3,,,,,,,,,,
def sleep(self) -> int:,3,,,,,,,,,,
"diff_pos: Tuple[Decimal],",3,,,,,,,,,,
"print(""Both values must either a number or ?"")",3,"print(""Both",,,,,,,,,"print(""Both"
file_dest = path.split('/')[-1],3,,,,,,,,,,
'started_at': datetime.now(),3,,,,,,,,,,
opOutput_Reset = b'\xA2',3,,,,,,,,,,
"print(f""[!] {type(exception).__name__} [{':'.join(map(str, address))}]:"", color = ""red"")",3,"print(f""[!]",,,,,,,,,"print(f""[!]"
"scale2.config(state=""disabled"")",3,,,,,,,,,,
"'os_version',",3,,,,,,,,,,
ENCRYPT_NONE = b'\x00',3,,,,,,,,,,
opCp_Lteq16 = b'\x55',3,,,,,,,,,,
"data=""null""",3,,,,,,,,,,
"if tone[1] == ""#"":",3,,,,,,,,,,
"message = dns.message.make_query(arguments.get(""query""), arguments.get(""rdtype""), **kwargs)",3,,,,,,,,,,
"_, _, _, _, options[""uat""] = struct.unpack(""!BBHIQ"", raw_options[:16])",3,,,,,,,,,,
"""system command {:02X}:{:02X} replied error"".format(",3,,,,,,,,,,
opCom_Writefile = b'\xD7',3,,,,,,,,,,
tmp=tmp+polar_check[i]+'  ',3,,,,,,,,,,
LED_ALL = b'\x00'  # All LEDs,3,,,,,,,,,,
"copyright = '2020, Christoph Gaukel'",3,,,,,,,,,,
ipv6 = False,3,,,,,,,,,,
NUMBER_FORMATTED = b'\x0C',3,,,,,,,,,,
if not dns.rdatatype.is_metatype(rdtype):,3,,,,,,,,,,
"@_retry(_RETRIES, 'go', _serial_flush)",3,,,,,,,,,,
"return utils.data('Number',int(p.NUMBER))",3,,,,,,,,,,
"'ack': 0x79.to_bytes(length=1, byteorder='little'),",3,,,,,,,,,,
OPEN_APPEND = b'\x00',3,,,,,,,,,,
SERVICE = b'\x04',3,,,,,,,,,,
print(f'MCU will be running from {args.address}.'),3,print(f'MCU,,,,,,,,,print(f'MCU
"self.parser.add_argument(""-p"", ""--port"", type=int, default=53, help=""The port to which to send queries (Defaults to 53)."")",3,,,,,,,,,,
"sock.connect((server, port))",3,,,,,,,,,,
opMoveF_16 = b'\x3D',3,,,,,,,,,,
"""redirectclipboard:i:1"", ""redirectposdevices:i:0"", ""redirectdirectx:i:1"",",3,,,,,,,,,,
"self._physical_ev3._introspection[""fw_build""],",3,,,,,,,,,,
PACK = b'\x15',3,,,,,,,,,,
"print(""[!] Unexpected EOF receiving record header: Server closed connection!"", color = ""red"")",3,"print(""[!]",,,,,,,,,"print(""[!]"
extra = True,3,,,,,,,,,,
"response = super().request(method, urllib.parse.urljoin(self.base_url.geturl(), path), **kwargs)",3,,,,,,,,,,
"(""raw_flags"", c_ushort, 3),",3,,,,,,,,,,
RESIZE = b'\x05',3,,,,,,,,,,
"port=port, baudrate=self._DEFAULT_PARAMETERS['baudrate'],",3,,,,,,,,,,
assert name_tmp == 'Bernie',3,,,,,,,,,,
'concurrent movement in progress',3,,,,,,,,,,
def remotes(self) -> Tuple[Remote]:,3,,,,,,,,,,
"0x12: ""MUX"",       0x13: ""DCN-MEAS"",    0x14: ""HMP"",",3,,,,,,,,,,
"hdr = self.recvall(sock, 5)",3,,,,,,,,,,
"name.add_argument(""--region"", type = str, help = ""If supplied, only companies matching given region/state will be returned. For example, --region=New York or --region=NY."")",3,,,,,,,,,,
"print("" -  Name Servers:"")",3,"print(""",,,,,,,,,"print("""
ICON = b'\x06',3,,,,,,,,,,
[port_motor_input(self._port_left)]['used_by'] = None,3,,,,,,,,,,
"with open(args.file, 'wb') as dump:",3,,,,,,,,,,
"if ""="" in port:",3,,,,,,,,,,
"(""d'"", 0.25),",3,,,,,,,,,,
"person.add_argument(""--confidence"", type = str, default = ""high"", choices = [""low"", ""med"", ""high"", ""max""], help = ""A confidence of max will return less data than usual, however, the data that is returned will have a higher likelihood of being correct. On the other hand, a confidence of low will return more data than usual, but makes the possibility of a mistake in that data more likely. med returns more data than high and less than low, with an error rate between the two."")",3,,,,,,,,,,
"elif ct.split(""/"")[0] == ""text"" and ct.endswith(""+xml""):",3,,,,,,,,,,
TERM_SLOT = b'\x03',3,,,,,,,,,,
opSub8 = b'\x14',3,,,,,,,,,,
"t[os.path.splitext(os.path.basename(fullname))[0]] = (command.__doc__ or ""No description available."").split(""\n"", 1)[0]",3,,,,,,,,,,
opMove8_F = b'\x33',3,,,,,,,,,,
tmp1=glob.glob(info+'/annotation/*'+iw+'*'+polar+'*.xml'),3,,,,,,,,,,
"label.grid(row=1, column=0, columnspan=3, sticky='w')",3,,,,,,,,,,
print('No clicked.'),3,print('No,,,,,,,,,print('No
"sock.connect((url.hostname, port))",3,,,,,,,,,,
"busy = struct.unpack('B', reply)[0]",3,,,,,,,,,,
datetime.now().strftime('%H:%M:%S.%f') +,3,,,,,,,,,,
"'fw_version',",3,,,,,,,,,,
"container.pack(side=""top"", fill=""both"", expand=True)",3,,,,,,,,,,
"def __init__(self, response: bytes):",3,,,,,,,,,,
opJr_Lt32 = b'\x66',3,,,,,,,,,,
process = None,3,,,,,,,,,,
HW_USB = b'\x01',3,,,,,,,,,,
"self.title_font = tkFont.Font(family='Helvetica',",3,,,,,,,,,,
COMPARE = b'\x03',3,,,,,,,,,,
LOG = b'\x09'  # !< Log r = log10(x),3,,,,,,,,,,
MINUS = r'-',3,,,,,,,,,,
"self._physical_ev3._introspection[""network_name""],",3,,,,,,,,,,
'tone is too low: ' + tone + ' (' + str(freq) + ' Hz)',3,,,,,,,,,,
"""freq must be a number""",3,,,,,,,,,,
ICON_SD = b'\x04',3,,,,,,,,,,
"with open(path_source, 'rb') as f:",3,,,,,,,,,,
"print(f""    - {introduction_point.identifier}: "" + f""{introduction_point.address}:{introduction_point.port}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
ICON_DOWN = b'\x13',3,,,,,,,,,,
"'ip_adr',",3,,,,,,,,,,
assert reply == '2D:00',3,,,,,,,,,,
"print(""Thank you for using the PCAP app."")",3,"print(""Thank",,,,,,,,,"print(""Thank"
continue,3,,,,,,,,,,
"self._physical_ev3._introspection[""fw_vers""],",3,,,,,,,,,,
"size, handle = struct.unpack('<IB', reply[1:6])",3,,,,,,,,,,
"(""raw_protocol"", c_ubyte),",3,,,,,,,,,,
opJr = b'\x40'  # BRANCH,3,,,,,,,,,,
buf = bytearray((' ' * n).encode('ascii')),3,,,,,,,,,,
opCp_Gt16 = b'\x49',3,,,,,,,,,,
"self.rdclasses = dict(sorted([(k, v) for k, v in dns.rdataclass.__dict__.items() if k.isupper()], key=lambda x: x[0]))",3,,,,,,,,,,
kwargs={'check': True},3,,,,,,,,,,
print(f'MCU will be running from {args.address}.'),3,print(f'MCU,,,,,,,,,print(f'MCU
"'os_build',",3,,,,,,,,,,
"'baudrate': 115200,",3,,,,,,,,,,
LE = r'<=',3,,,,,,,,,,
opAddF = b'\x13',3,,,,,,,,,,
@_('MINUS FLOAT'),3,,,,,,,,,,
"console.print(f"" -  {type(e).__name__}: ({filename.replace(csf.location, '.')} line #{line} in {function})"", color = ""red"")",3,"print(f""",,,,,,,,,"print(f"""
"def write_file(self, path: str, data: bytes, *, check: bool = True) -> None:",3,,,,,,,,,,
def port_right(self) -> bytes:,3,,,,,,,,,,
"label.grid(row=4, column=3, columnspan=5, sticky='w')",3,,,,,,,,,,
opMath = b'\x8D',3,,,,,,,,,,
['used_by'] = None,3,,,,,,,,,,
opJr_LteqF = b'\x77',3,,,,,,,,,,
"'-f', 'u8',",3,,,,,,,,,,
opOutput_Prg_Stop = b'\xB4',3,,,,,,,,,,
"print(f"" -  48-bit Positive Integer: {mac.value}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"QMessageBox.about(self, ""Error1!"", ""Error1, check the usb connection, then click 'Refresh Port'"")",3,,,,,,,,,,
NEGATE = b'\x07'  # !< Negate r = 0.0 - x,3,,,,,,,,,,
STRING_TO_VALUE = b'\x07',3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in cmd[2:4]) + '|' +,3,,,,,,,,,,
"'go': 0x21,",3,,,,,,,,,,
"domain.add_argument(""--key-people"", action = ""store_true"", help = ""List Executive and VP level employees at this company."")",3,,,,,,,,,,
"def _set_address(self, address: int) -> NoReturn:",3,,,,,,,,,,
NAME['if'] = IF,3,,,,,,,,,,
args = self.arguments.__dict__,3,,,,,,,,,,
"self.parser.add_argument(""--keyalgorithm"", type=str, default=None, help=""The TSIG algorithm to use; defaults to \""{}\""."".format(str(dns.tsig.default_algorithm)))",3,,,,,,,,,,
"song: dict,",3,,,,,,,,,,
"style: str = ""list"", css: str = """", prettyPrint: bool = False,",3,,,,,,,,,,
message = b'1\r\n',3,,,,,,,,,,
GET_PRESENT = b'\x0F',3,,,,,,,,,,
"label=tk.Label(self, text='Master data for alignment.')",3,,,,,,,,,,
if self._current_movement['op'] != 'Step_Speed':,3,,,,,,,,,,
"""speed must be lower or equal 100""",3,,,,,,,,,,
step1 = cur_mov['step1_right'],3,,,,,,,,,,
WARNING_TEMP = b'\x01',3,,,,,,,,,,
@_(r'#.*'),3,,,,,,,,,,
BTTYPE_PC = b'\x03'  # Bluetooth type PC,3,,,,,,,,,,
op = branch[1]['op'],3,,,,,,,,,,
"0x88: ""UDPLite"",   0x89: ""MPLS-in-IP"",  0x86: ""RSVP-E2E-IGNORE"",",3,,,,,,,,,,
"for i,x in enumerate(zip(params_type,params_name)):",3,,,,,,,,,,
WAITING = b'\x20'  # Object is waiting for final trigger,3,,,,,,,,,,
fmt = 'B' + str(len(part)) + 's',3,,,,,,,,,,
raise SysCmdError('directory ' + path_dest_dir + ' does not exist'),3,,,,,,,,,,
elif branch[0] == 'Float':,3,,,,,,,,,,
service = tor.HiddenService(self.arguments.target),3,,,,,,,,,,
for i in range (Num_data):,3,,,,range (,,,,,,range (
SET_LOG_SYNC_TIME = b'\x0C',3,,,,,,,,,,
CLR_CHANGES = b'\x1A',3,,,,,,,,,,
"def reset(self, angle=0) -> int:",3,,,,,,,,,,
"if str(e) != ""issubclass() arg 1 must be a class"":",3,,,,,,,,,,
"serial, keyalgorithm, relativize,",3,,,,,,,,,,
"credits = {""Base"": ""chokepoint@github.com"",",3,,,,,,,,,,
"motor_pos: Tuple[int],",3,,,,,,,,,,
"resolver.port = arguments.get(""port"")",3,,,,,,,,,,
SYSTEM_NO_HANDLES_AVAILABLE = b'\x04',3,,,,,,,,,,
"def erase(self, dfu: Stm32UartDfu, args: argparse.Namespace) -> NoReturn:",3,,,,,,,,,,
datetime.now().strftime('%H:%M:%S.%f') +,3,,,,,,,,,,
LPAREN = r'\(',3,,,,,,,,,,
"self.parser.add_argument(""--configure-resolver"", action=""store_false"", help=""If True (the default), the resolver instance is configured in the normal fashion for the operating system the resolver is running on. (I.e. a /etc/resolv.conf file on POSIX systems and from the registry on Windows systems."")",3,,,,,,,,,,
"global_mem: int = 0,",3,,,,,,,,,,
CAL_MINMAX = b'\x03',3,,,,,,,,,,
[port_motor_input(self._port_left)]['used_by'] is not None:,3,,,,,,,,,,
"edTxt.config(state=""readonly"")",3,,,,,,,,,,
"group.add_argument(""-b"", ""--blocking"", action = ""store_true"", help = ""Set the socket to blocking (if flag is set) or non-blocking (not set)."")",3,,,,,,,,,,
if name == 'printf':,3,,,,,,,,,,
"0x0F: ""XNET"",      0x10: ""CHAOS"",       0x11: ""UDP"",",3,,,,,,,,,,
opSleep = b'\x0B',3,,,,,,,,,,
os.chdir('../raw'),3,,,,,,,,,,
"self.parser.add_argument(""-i"", ""--ignore-unexpected"", action=""store_true"", default=None, help=""If True, ignore responses from unexpected."")",3,,,,,,,,,,
"for i in range(0, len(domains), 2):",3,,,,range(,,,,,,range(
raise NoEV3('No EV3 device found') from None,3,,,,,,,,,,
"value,Type = branch[1]['value'],self.type_map['int']",3,,,,,,,,,,
"), ""tracking_callback must be a callable""",3,,,,,,,,,,
"""polarity_right needs to be -1 or 1""",3,,,,,,,,,,
"msg_cnt: bytes,",3,,,,,,,,,,
ICON_CHECKED = b'\x09',3,,,,,,,,,,
"ramp_down_time: float = 0.15,",3,,,,,,,,,,
opObject_End = b'\x0A',3,,,,,,,,,,
opMailbox_Close = b'\xDD',3,,,,,,,,,,
return ' '.join((,3,,,,,,,,,,
EXIST = b'\x10',3,,,,,,,,,,
TINY_FONT = b'\x03',3,,,,,,,,,,
step2 = cur_mov['step2_left'],3,,,,,,,,,,
value = branch[1]['value'],3,,,,,,,,,,
self._device.open_path(dev['path']),3,,,,,,,,,,
"position: int,",3,,,,,,,,,,
def volume(self) -> int:,3,,,,,,,,,,
opInput_Device = b'\x99',3,,,,,,,,,,
'''representation of the object in a str context''',3,,,,,,,,,,
"0x8B: ""HIP"",       0x8C: ""Shim6"",       0x8D: ""WESP"",",3,,,,,,,,,,
"""tempo"": 80,",3,,,,,,,,,,
GET_CACHE_FILES = b'\x14',3,,,,,,,,,,
NOTIFICATION = b'\x0B',3,,,,,,,,,,
"), 'current movement in progress'",3,,,,,,,,,,
"sock.send((b""STARTTLS\n"" if url.scheme in [""smtp"", ""imap""] else (b""STLS\n"" if url.scheme == ""pop3"" else b""AUTH TLS\n"")))",3,,,,,,,,,,
if self.arguments.get else,3,,,,,,,,,,
"return (0xff & val).to_bytes(1, 'big')",3,,,,,,,,,,
DEL_COMMA = b'\x05'  # Use comma as delimiter,3,,,,,,,,,,
opProgram_Start = b'\x03',3,,,,,,,,,,
self._current_movement['last_time'] = time.time(),3,,,,,,,,,,
+ ' tmp_file ../raw_orig/s1a-aux-cal.xml > ./',3,,,,,,,,,,
'xx:xx:xx.xxxxxx Sent 0x|06:00|2B:00|00|00:00|01|' + '\n' +,3,,,,,,,,,,
help=_ARGS_HELP['memmap']),3,,,,,,,,,,
"(""raw_destination"", c_ulong)]",3,,,,,,,,,,
"'ramp_up': ramp_up,",3,,,,,,,,,,
"if direction == ""c"":",3,,,,,,,,,,
self._device.open_path(devices[0]['path']),3,,,,,,,,,,
GRAPH_SAMPLE = b'\x1E',3,,,,,,,,,,
"(""f#'"", 2),",3,,,,,,,,,,
"print(""Both shaft values must either a number or ?"")",3,"print(""Both",,,,,,,,,"print(""Both"
"'-filter:a', 'volume=1.5',",3,,,,,,,,,,
"'expr MOD expr',",3,,,,,,,,,,
"def __init__(self, address: str = """", port: int = 0, *args, **kwargs):",3,,,,,,,,,,
class _PhysicalEV3:,3,,,,,,,,,,
else:,3,,,,,,,,,,
"__all__ = [""CloudSnarf""]",3,,,,,,,,,,
remain = length,3,,,,,,,,,,
if len(payload) > 3:,3,,,,,,,,,,
Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)',3,,,,,,,,,,
"""system command {:02X}:{:02X} replied error"".format(",3,,,,,,,,,,
def on_stop(self):,3,,,,,,,,,,
' Sent 0x|' +,3,,,,,,,,,,
"def update(self, progress: int) -> NoReturn:",3,,,,,,,,,,
"elif direction == ""o"":",3,,,,,,,,,,
"frame.grid(row=2, column=3, sticky='nw', rowspan=8, columnspan=2)",3,,,,,,,,,,
"if locality: url += ""&locality="" + locality",3,,,,,,,,,,
"elif direction == ""q"":",3,,,,,,,,,,
"text='Other information',",3,,,,,,,,,,
"with open(args.file, 'rb') as firmware_file:",3,,,,,,,,,,
READ_BYTES = b'\x1C',3,,,,,,,,,,
"reply = bytes(self._device.read(_EP_IN, 1024, 0))",3,,,,,,,,,,
"def create_dir(self, path: str) -> None:",3,,,,,,,,,,
"print(f""[i] Hidden Service running on {ehs.address}:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
import tkinter.messagebox as tkMessageBox,3,,,,,,,,,,
"'ramp_up_time': ramp_up_time,",3,,,,,,,,,,
"title=""Select a file"")",3,,,,,,,,,,
opMoveF_8 = b'\x3C',3,,,,,,,,,,
'ev3_obj needs to be instance of EV3',3,,,,,,,,,,
"'expr MINUS expr',",3,,,,,,,,,,
if platform.system() == 'Darwin':,3,,,,,,,,,,
self._led_sequence = song['led_sequence'],3,,,,,,,,,,
self.groupBox4 = QGroupBox(''),3,,,,,,,,,,
@_('params COMMA param'),3,,,,,,,,,,
"def write(self, address: int, data: Union[bytes, bytearray],",3,,,,,,,,,,
if endtime - time.time() < 0:,3,,,,,,,,,,
"(""c'"", 1),",3,,,,,,,,,,
"self.parser.add_argument(""-sP"", ""--source-port"", type=int, default=0, help=""The port from which to send the message. The default is 0."")",3,,,,,,,,,,
"def metaquery(self, qname, rdtype, rdclass=1, use_edns=None, want_dnssec=False, ednsflags=None, payload=None, request_payload=None, options=None,",3,,,,,,,,,,
dir_dest = '/'.join(path_dest.split('/')[:-1]),3,,,,,,,,,,
"_fields_ = [(""_copied"", c_ubyte, 1),",3,,,,,,,,,,
"help=' '.join([_ARGS_HELP['address'], 'loading binary file.']))",3,,,,,,,,,,
def next_msg_cnt(self) -> int:,3,,,,,,,,,,
opCp_Eq32 = b'\x4E',3,,,,,,,,,,
WIFI = 'WiFi',3,,,,,,,,,,
INIT32 = b'\x0A',3,,,,,,,,,,
"""beats_per_bar"": 3,",3,,,,,,,,,,
TYPE_RESTART_BROWSER = b'\x21',3,,,,,,,,,,
"sys.path.insert(0, os.path.abspath('../..'))",3,,,,,,,,,,
print(line),3,print(line),,,,,,,,,print(line)
"page = self.session.post(""cfsearch.cgi"", data={""cfS"": domain}).parsed()",3,,,,,,,,,,
"self.parser.add_argument(""target"", help=""Target address (hostname or ip-address)."")",3,,,,,,,,,,
[port_motor_input(self._port_right)]['used_by'] = None,3,,,,,,,,,,
STORE = b'\x19',3,,,,,,,,,,
"""timeout"", ""lifetime"", ""use-udp"",",3,,,,,,,,,,
for i in range (len(image_list)):,3,,,,range (,,,,,,range (
"ramp_down: int = None,",3,,,,,,,,,,
for i in range (len(s)):,3,,,,range (,,,,,,range (
"'nack': 0x1f.to_bytes(length=1, byteorder='little')",3,,,,,,,,,,
"""5"": self.quit",3,,,,,,,,,,
INVERSERECT = b'\x10',3,,,,,,,,,,
"edTxt1.config(state=""readonly"")",3,,,,,,,,,,
opOutput_Stop = b'\xA3',3,,,,,,,,,,
"'brake': brake,",3,,,,,,,,,,
elif op == '*':,3,,,,,,,,,,
for i in range (len(polar_check)):,3,,,,range (,,,,,,range (
ICON_PC = b'\x03'  # Bluetooth type PC,3,,,,,,,,,,
"def print(*messages, color: str = ""white"", dark: bool = False, prefix: str = """", **kwargs):",3,"print(*messages,",,,,,,,,,"print(*messages,"
print('open port'),3,print('open,,,,,,,,,print('open
"rb1=tk.Radiobutton(self, text='yes',",3,,,,,,,,,,
"if isinstance(value, (dict, list, set, tuple)):",3,,,,,,,,,,
"Sensors = namedtuple('Sensors', [",3,,,,,,,,,,
COPY_ERROR = b'\x17',3,,,,,,,,,,
if process:,3,,,,,,,,,,
opMove16_32 = b'\x36',3,,,,,,,,,,
def rgb_raw(self) -> RawRGBColor:,3,,,,,,,,,,
"'FileSystem',",3,,,,,,,,,,
'-'  # write to stdout,3,,,,,,,,,,
for _ in range(size)]),3,,,,range(,,,,,,range(
'path_dest needs to be of type str',3,,,,,,,,,,
'Port_D',3,,,,,,,,,,
"@_retry(_RETRIES, 'read memory', _serial_flush)",3,,,,,,,,,,
"orient='horizontal',",3,,,,,,,,,,
"self.parser.add_argument(""-g"", ""--get"", nargs=""+"", type=str, help=""Use getCmd for the object identities specified here against the target instead of using nextCmd."")",3,,,,,,,,,,
"assert isinstance(value, Number), ""delta_time must be a number""",3,,,,,,,,,,
if tcp else,3,,,,,,,,,,
class RDPc(Program):,3,,,,,,,,,,
g.write('preproc_batch_tops.csh data.in dem.grd 2\n'),3,,,,,,,,,,
WRITE_LOG = b'\x10',3,,,,,,,,,,
"self._introspection[""mem_free""],",3,,,,,,,,,,
"actions.add_argument(""-s"", ""-cfs"", ""--search"", metavar=""DOMAIN"", type=str, help=""CloudFlare-Protected-Domain Search ..."")",3,,,,,,,,,,
colorama.init(autoreset=True),3,,,,,,,,,,
cmd = b''.join((,3,,,,,,,,,,
"(""g'"", .5),",3,,,,,,,,,,
if type == None:,3,,,,,,,,,,
"lang: str=None,",3,,,,,,,,,,
print('resp = ' + resp),3,print('resp,,,,,,,,,print('resp
"print(f""[!] {address}.onion: {e}"", color = ""red"")",3,"print(f""[!]",,,,,,,,,"print(f""[!]"
"elif port != ""default"" and not stem.util.connection.is_valid_port(port):",3,,,,,,,,,,
"""in case of protocol BLUETOOTH, host needs to be set""",3,,,,,,,,,,
print(answer.response),3,print(answer.response),,,,,,,,,print(answer.response)
"if str(e) != ""issubclass() arg 1 must be a class"":",3,,,,,,,,,,
"name.add_argument(""--country"", type = str, help = ""If supplied, only companies matching given country will be returned. For example, country=United States or country=US."")",3,,,,,,,,,,
tmp=tmp+data_date[i]+'  ',3,,,,,,,,,,
"if keyalgorithm and keyalgorithm not in [alg for alg in dir(dns.tsig) if alg.startswith(""HMAC_"")]:",3,,,,,,,,,,
BTTYPE_PHONE = b'\x04'  # Bluetooth type PHONE,3,,,,,,,,,,
"(""b'"", 1),",3,,,,,,,,,,
help=_ARGS_HELP['erase']),3,,,,,,,,,,
opProgram_Info = b'\x0C',3,,,,,,,,,,
TO_USBSTICK = b'\x10',3,,,,,,,,,,
"def company(self, query: str, sort: str = ""relevance"", location: str = """", locality: str = """", region: str = """", country: str = """", prettyPrint: bool = False):",3,,,,,,,,,,
"'sB' + str(part_size) + 's',",3,,,,,,,,,,
"COMMA = r','",3,,,,,,,,,,
"self.parser.add_argument(""mac"", type = str, metavar = ""ADDRESS"", help=""Target MAC Address."")",3,,,,,,,,,,
opJr_Lteq8 = b'\x74',3,,,,,,,,,,
SYSTEM_END_OF_FILE = b'\x08',3,,,,,,,,,,
"def stop(self, brake: bool = False) -> None:",3,,,,,,,,,,
"fileName, _ = QFileDialog.getSaveFileName(self,""QFileDialog.getSaveFileName()"","""",""CSV Files (*.csv)"", options=options)",3,,,,,,,,,,
"kwargs = {""type"": ""json""}",3,,,,,,,,,,
"assert value in (1, -1), ""allowed polarity_left values are: -1 or 1""",3,,,,,,,,,,
"self.destination = socket.inet_ntoa(struct.pack(""<L"", self.raw_destination))",3,,,,,,,,,,
"'size': 'Required size of memory to be ',",3,,,,,,,,,,
super().start(),3,,,,,,,,,,
STRIP = b'\x08',3,,,,,,,,,,
"while_loop_entry = self.builder.append_basic_block(""while_loop_entry""+str(self.inc()))",3,,,,,,,,,,
"ECT = (0b10,  # ECN Capable Transport, ECT(0)",3,,,,,,,,,,
tmp='The following scenes do not have the polarization you choose:\n\n',3,,,,,,,,,,
BEGIN_GETFILE = b'\x96',3,,,,,,,,,,
body = branch[1]['body'],3,,,,,,,,,,
"console.print(f""[!] {fullname.replace(self.location, '.')}:"", color = ""red"")",3,"print(f""[!]",,,,,,,,,"print(f""[!]"
elif op == '/':,3,,,,,,,,,,
"dump_command.add_argument('-f', '--file',",3,,,,,,,,,,
TST_DISABLE_UART = b'\x12',3,,,,,,,,,,
"print(zone.decode(""ascii""), dark = True)",3,"print(zone.decode(""ascii""),",,,,,,,,,"print(zone.decode(""ascii""),"
"file_add = open(filename, ""a"")",3,,,,,,,,,,
"duration: float = None,",3,,,,,,,,,,
"Beacon = namedtuple('Beacon', [",3,,,,,,,,,,
"for introduction_point in sorted(ehs.introduction_points(), key=lambda x: x.identifier):",3,,,,,,,,,,
src1 = 'sensor_output.csv',3,,,,,,,,,,
opOutput_Polarity = b'\xA7',3,,,,,,,,,,
"assert value > 0, ""temperament needs to be positive""",3,,,,,,,,,,
self._send_command(self._COMMAND['write memory']),3,,,,,,,,,,
"info = mac.info[""OUI""]",3,,,,,,,,,,
PLAY = b'\x02',3,,,,,,,,,,
"for name in filter(lambda name: name.endswith("".py""), filenames):",3,,,,,,,,,,
"string = f"" -  {dns.rdatatype.to_text(record.rdtype).ljust(self._max_rdtype_length)}""",3,,,,,,,,,,
"""disable full window drag:i:1"", ""disable menu anims:i:1"", ""disable themes:i:0"",",3,,,,,,,,,,
"brake: bool = False,",3,,,,,,,,,,
serial_number = ':'.join(,3,,,,,,,,,,
"elif hole_lmc != ""?"" and hole_mmc == ""?"":",3,,,,,,,,,,
"def serve(self, backlog: int = None, condition = True):",3,,,,,,,,,,
"def stop(self, *, brake: bool = False) -> None:",3,,,,,,,,,,
[port_motor_input(self._port)]['used_by'] is not None:,3,,,,,,,,,,
class FingerprinTOR(Program):,3,,,,,,,,,,
"""redirectprinters:i:1"", ""redirectcomports:i:0"", ""redirectsmartcards:i:1"",",3,,,,,,,,,,
"ramp_down: int = 15,",3,,,,,,,,,,
"super().__init__(f""https://api.fullcontact.com/v{version}/"")",3,,,,,,,,,,
opMove16_F = b'\x37',3,,,,,,,,,,
"b''.join([address.to_bytes(4, 'big'),",3,,,,,,,,,,
dst = fileName+'.csv',3,,,,,,,,,,
"if hasattr(sys, ""_MEIPASS""):",3,,,,,,,,,,
PRESS = b'\x05',3,,,,,,,,,,
"""type"": socket.SOCK_DGRAM if self.arguments.udp else socket.SOCK_STREAM,",3,,,,,,,,,,
"def read_file(self, path: str) -> bytes:",3,,,,,,,,,,
"""error "" +",3,,,,,,,,,,
"'str':ir.ArrayType(ir.IntType(8),1), # Note i8 in most languages are characters",3,,,,,,,,,,
"'relations.html',  # needs 'show_related': True theme option to display",3,,,,,,,,,,
"g=open('intf.in','w')",3,,,,,,,,,,
"'type': None,",3,,,,,,,,,,
"check_origin, export) = (getattr(self.arguments, name) for name in",3,,,,,,,,,,
"os.link(tmp[0],data_date[i]+'_manifest.safe')",3,,,,,,,,,,
round(cur_mov['target_motor_pos'][1]) -,3,,,,,,,,,,
if __name__ ==  '__main__':,3,,,,,,,,,,
for line in data.split(sep=b'\x0A'):,3,,,,,,,,,,
opCp_Lt32 = b'\x46',3,,,,,,,,,,
"response = api.person(self.arguments.email, ""email"", **kwargs, **pkwargs)",3,,,,,,,,,,
run_command = commands.add_parser('run'),3,,,,,,,,,,
print(),3,print(),,,,,,,,,print()
"self._physical_ev3._introspection[""network_ip_adr""],",3,,,,,,,,,,
TOPLINE = b'\x12',3,,,,,,,,,,
opMoveF_32 = b'\x3E',3,,,,,,,,,,
def host(self) -> str:,3,,,,,,,,,,
"""delta_time needs to be a number""",3,,,,,,,,,,
WRITE_CONTENT = b'\x0E',3,,,,,,,,,,
"nameservers = arguments.get(""nameservers"")",3,,,,,,,,,,
"if isinstance(message[-1], bool):",3,,,,,,,,,,
def angle(self) -> int:,3,,,,,,,,,,
"value = self.builder.fcmp_ordered('<',lhs,rhs)",3,,,,,,,,,,
"def __init__(self, song: dict, jukebox: 'Jukebox'):",3,,,,,,,,,,
"def _serial_write(self, data: bytes) -> NoReturn:",3,,,,,,,,,,
"'brake': brake,",3,,,,,,,,,,
WARN_TEMP = b'\x0B',3,,,,,,,,,,
DEVCMD_FIRE = b'\x11'  # UART device fire (ultrasonic),3,,,,,,,,,,
self.listLabel1 = QLabel('Calorimeter'),3,,,,,,,,,,
CREATE_DIR = b'\x9B',3,,,,,,,,,,
MOD32 = b'\x13'  # !< Modulo DATA32 r = x % y,3,,,,,,,,,,
"if arguments.pop(""metaquery""):",3,,,,,,,,,,
"'ffmpeg',",3,,,,,,,,,,
""" when writing file "" +",3,,,,,,,,,,
verbosity=0,3,,,,,,,,,,
return rdata,3,,,,,,,,,,
elif op == '<':,3,,,,,,,,,,
"kwargs[""file""] = stdout",3,,,,,,,,,,
"label=tk.Label(self, text='Do you want to use Enhanced Spectral diversity (ESD)?')",3,,,,,,,,,,
ops = b''.join((,3,,,,,,,,,,
"""videoplaybackmode:i:1"", ""connection type:i:2"", ""displayconnectionbar:i:1"",",3,,,,,,,,,,
labelColStyle = ''',3,,,,,,,,,,
"'speed': speed,",3,,,,,,,,,,
ICON_ADD_HIDDEN = b'\x0C',3,,,,,,,,,,
self.create_dir('../prjs/sound'),3,,,,,,,,,,
opCp_Gteq8 = b'\x58',3,,,,,,,,,,
"record = next(response, None)",3,,,,,,,,,,
"(""g'"", 1.5),",3,,,,,,,,,,
g.write('#!/bin/csh -f\n'+'cd raw\n\n'),3,,,,,,,,,,
opBp2 = b'\x8A',3,,,,,,,,,,
BLUETOOTH = 'Bluetooth',3,,,,,,,,,,
"print(""    "" + service.signature.replace(""\n"", ""\n    ""), dark = True)",3,"print(""",,,,,,,,,"print("""
"""duration must be a number""",3,,,,,,,,,,
"if value is None or name.startswith(""_"") or callable(value) or name in (""rdtype"", ""rdclass""):",3,,,,,,,,,,
"rc, handle = struct.unpack('sB', reply)",3,,,,,,,,,,
'Select the s1a-cal-aux.xml file '],3,,,,,,,,,,
"volume: int = None,",3,,,,,,,,,,
entry = engine.get_function_address('main'),3,,,,,,,,,,
GET_CACHE_FILE = b'\x16',3,,,,,,,,,,
from network.modules.packets import IPv4,3,,,,,,,,,,
"class NSMap(dns.resolver.Resolver, Program):",3,,,,,,,,,,
self.listLabel2 = QLabel(''),3,,,,,,,,,,
"value = self.builder.fcmp_ordered('==',lhs,rhs)",3,,,,,,,,,,
def on_start(self):,3,,,,,,,,,,
"assert isinstance(msg_cnt, bytes), \",3,,,,,,,,,,
from network.modules import tor,3,,,,,,,,,,
"""radius_wheel needs to be positive""",3,,,,,,,,,,
"(""f'"", 2),",3,,,,,,,,,,
'{:02X}'.format(byte) for byte in reply[7:len_data],3,,,,,,,,,,
opJr_GteqF = b'\x7B',3,,,,,,,,,,
super().__init__(),3,,,,,,,,,,
"slow: bool = False,",3,,,,,,,,,,
ICON_BRICK1 = b'\x22',3,,,,,,,,,,
GET_TYPEMODE = b'\x05',3,,,,,,,,,,
ICON_PHONE = b'\x04'  # Bluetooth type PHONE,3,,,,,,,,,,
BUTTONTYPES = b'\x08',3,,,,,,,,,,
reply_2_str = ':'.join('{:02X}'.format(byte) for byte in reply_2),3,,,,,,,,,,
def next_part() -> float:,3,,,,,,,,,,
"requirements = {""dnspython3""}",3,,,,,,,,,,
"self._physical_ev3._introspection[""name""] = value",3,,,,,,,,,,
"self._introspection[""sleep""],",3,,,,,,,,,,
"'-i', '-',  # read from stdin",3,,,,,,,,,,
"self.parser.add_argument(""--rdtype"", type=str, default=""AXFR"", help=""The type of zone transfer. The default is \""AXFR\""."")",3,,,,,,,,,,
self.portLabel = QLabel('Port: '),3,,,,,,,,,,
opPort_Cnv_Output = b'\x61',3,,,,,,,,,,
"parameters = b''.join([parameters, self._checksum(parameters)])",3,,,,,,,,,,
"port_right: bytes = PORT_D,",3,,,,,,,,,,
"'expr AND expr',",3,,,,,,,,,,
NAME['else'] = ELSE,3,,,,,,,,,,
"pids = lambda: stem.util.system.pid_by_name(""tor"", multiple = True)",3,,,,,,,,,,
print(),3,print(),,,,,,,,,print()
opObject_Call = b'\x09',3,,,,,,,,,,
opSub16 = b'\x15',3,,,,,,,,,,
"(""opt_number"", c_ubyte, 5),",3,,,,,,,,,,
print('BASIC FIT CALCULATOR WITH MMC/LMC AND CLEARANCE/ALLOWANCE'),3,print('BASIC,,,,,,,,,print('BASIC
reply: bool = True,3,,,,,,,,,,
"group.add_argument(""port"", type = int, help = ""Target port."")",3,,,,,,,,,,
self.atemVal2.setText((data[1]) +  ' °' ),3,,,,,,,,,,
"rdclass = getattr(dns.rdataclass, rdclass)",3,,,,,,,,,,
LIST_OPEN_HANDLES = b'\x9D',3,,,,,,,,,,
"""song must have a key 'beats_per_bar'""",3,,,,,,,,,,
print('TIME CONVERTER\n'),3,print('TIME,,,,,,,,,print('TIME
DATA_PCT = b'\x10'  # Percent (used in opINPUT_READEXT),3,,,,,,,,,,
"if ""OK"" in resp:",3,,,,,,,,,,
r'Name: (\w+)\s\n' +,3,,,,,,,,,,
"return (dns.query.tcp(message, ns, timeout=timeout, port=port, af=af, source=source, source_port=source_port, one_rr_per_rrset=one_rr_per_rrset)",3,,,,,,,,,,
"def go(self, address: int) -> NoReturn:",3,,,,,,,,,,
"'ramp_down': ramp_down,",3,,,,,,,,,,
"actions.add_argument(""-e"", ""--exec"", ""--execute"", dest = ""executable"", metavar = ""PROGRAM"", type = str, help = ""Execute the specified program."")",3,,,,,,,,,,
'volume needs to be of type int',3,,,,,,,,,,
"def __init__(self, address: str = ""127.0.0.1"", port: int = ""default"", password: str = None, chroot_path: str = None, protocolinfo_response=None):",3,,,,,,,,,,
SICON_BATT_2 = b'\x03',3,,,,,,,,,,
['used_by'] = None,3,,,,,,,,,,
GET_WARNING = b'\x11',3,,,,,,,,,,
'**': [,3,,,,,,,,,,
"bumps = struct.unpack('<f', reply[:4])[0]",3,,,,,,,,,,
SCREEN_BLOCK = b'\x10',3,,,,,,,,,,
"tld: str = 'com',",3,,,,,,,,,,
"VehiclePosition = namedtuple('VehiclePosition', [",3,,,,,,,,,,
"size = int.from_bytes(self._serial_read(1), 'big')",3,,,,,,,,,,
"countryCode: str = """", confidence: str = ""max"", macromeasures: bool = True):",3,,,,,,,,,,
"(""c''"", 0.25),",3,,,,,,,,,,
"""speed must be positive""",3,,,,,,,,,,
def is_endless(self) -> bool:,3,,,,,,,,,,
"source, source_port,",3,,,,,,,,,,
cur_mov['start_motor_pos'][0],3,,,,,,,,,,
from pysnmp.hlapi import *,3,,,,,,,,,,
"b'\x1f\x40',  # 8000 (sampling rate)",3,,,,,,,,,,
BROWSE_FILES = b'\x03'  # files,3,,,,,,,,,,
_locked=False,3,,,,,,,,,,
"'Port_3',",3,,,,,,,,,,
tmp1=Dir_EOF+'/'+S1AB+'*'+info1+'*'+info2+'*',3,,,,,,,,,,
"until_loop_entry = self.builder.append_basic_block(""until_loop_entry""+str(self.inc()))",3,,,,,,,,,,
elif op == '<<':,3,,,,,,,,,,
"assert channel in (None, 1, 2, 3, 4), ""incorrect channel""",3,,,,,,,,,,
self._tones = song['tones'],3,,,,,,,,,,
COPY = b'\x07',3,,,,,,,,,,
"sock.send(b""EHLO openssl.client.net\n"")",3,,,,,,,,,,
"def _send_command(self, command: int) -> NoReturn:",3,,,,,,,,,,
opMove8_32 = b'\x32',3,,,,,,,,,,
if obj.index(value) < len(obj) - 1:,3,,,,,,,,,,
PRESSED = b'\x09',3,,,,,,,,,,
if not tor.pids():,3,,,,,,,,,,
"parity=self._DEFAULT_PARAMETERS['parity'],",3,,,,,,,,,,
"allowance = vin(""Allowance"", ""?"", units=""in"")",3,,,,,,,,,,
"""song must have a key 'tempo'""",3,,,,,,,,,,
cur_mov['start_motor_pos'][1],3,,,,,,,,,,
"g=open('batch_tops.config', 'w')",3,,,,,,,,,,
"'-a', '--address', default='0x8000000',",3,,,,,,,,,,
"""port_right needs to be an integer""",3,,,,,,,,,,
"ramp_down: int = None,",3,,,,,,,,,,
"'get version and protection status': 0x01,",3,,,,,,,,,,
TST_CLOSE = b'\x0B',3,,,,,,,,,,
"def polarity_left(self, value: int):",3,,,,,,,,,,
"info1=eval(""info1[0:4]+info1[5:7]+info1[8:10]"")",3,,,,,,,,,,
ICON_SOUND = b'\x05',3,,,,,,,,,,
FLOOR = b'\x03'  # !< Floor r = floor(x),3,,,,,,,,,,
print('\nExecuted in {:f} sec'.format(end_time - start_time)),3,print('\nExecuted,,,,,,,,,print('\nExecuted
"self._physical_ev3._introspection[""os_vers""],",3,,,,,,,,,,
opCp_LteqF = b'\x57',3,,,,,,,,,,
'degrees must be an int value',3,,,,,,,,,,
'Error: {} failed after {} retries.'.format(,3,,,,,,,,,,
"self.parser.add_argument(""query"", type = str, help = ""Query to be sent to the whois server."")",3,,,,,,,,,,
packet = self.decoder.decode(data),3,,,,,,,,,,
from remote.web.modules.session import Session,3,,,,,,,,,,
"print("" -  Permanent Key: "")",3,"print(""",,,,,,,,,"print("""
"rc, handle = struct.unpack('sB', reply)",3,,,,,,,,,,
"kwargs={'repeat': True, 'volume': volume},",3,,,,,,,,,,
if branch[0] == 'VarAssign':,3,,,,,,,,,,
"self.parser.add_argument(""-u"", ""--use-udp"", type=bool, default=False, help=""Use UDP (only meaningful for IXFR)."")",3,,,,,"u"",",,,,,"u"","
"assert value == 0, 'position can be set to zero only'",3,,,,,,,,,,
"person = self.parser.add_argument_group(""Person API"")",3,,,,,,,,,,
"rawclose = rawclose1.decode(""utf-8"") + rawclose2.decode(""utf-8"")",3,,,,,,,,,,
ops += b''.join((,3,,,,,,,,,,
"memory_map: List[Dict[str, str]] = None,",3,,,,,,,,,,
print(packet),3,print(packet),,,,,,,,,print(packet)
"'step2_left': step2_left,",3,,,,,,,,,,
"('left', PLUS, MINUS),",3,,,,,,,,,,
"raw_audio = open(out_file,'wb')",3,,,,,,,,,,
SET_SSID = b'\x0C',3,,,,,,,,,,
opSelectF = b'\x5F',3,,,,,,,,,,
'speed needs to be an integer',3,,,,,,,,,,
CAL_MIN = b'\x07',3,,,,,,,,,,
opSub32 = b'\x16',3,,,,,,,,,,
"elif tone.endswith(""'""):",3,,,,,,,,,,
print('ENTER ANY TWO KNOWNS (HOLE/SHAFT/FIT)'),3,print('ENTER,,,,,,,,,print('ENTER
LED_OFF = b'\x00',3,,,,,,,,,,
"ax1.plot(xar,yar2,label='Analog Temperature2',linewidth=2)",3,,,,,,,,,,
opJr_Gteq16 = b'\x79',3,,,,,,,,,,
port_str = 'PORT_C',3,,,,,,,,,,
port_str = 'PORT_A',3,,,,,,,,,,
"info1=eval(""info1[0:4]+info1[5:7]+info1[8:10]"")",3,,,,,,,,,,
VALUE32 = b'\x0B',3,,,,,,,,,,
"if countryCode: url += ""&countryCode="" + countryCode",3,,,,,,,,,,
"ramp_up=self._current_movement['ramp_up'],",3,,,,,,,,,,
"kwargs = {""addr"": proxy.hostname, ""rdns"": rdns}",3,,,,,,,,,,
"print(f""[i] Connected to {url.hostname}:{port} ..."")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"assert isinstance(value, str), \",3,,,,,,,,,,
"if self._physical_ev3._introspection[""sensors""][self._port]['used_by'] is not None:",3,,,,,,,,,,
raise RuntimeError('unknown op in current movement'),3,,,,,,,,,,
opOutput_Read = b'\xA8',3,,,,,,,,,,
SYSTEM_ILLEGAL_FILENAME = b'\x0B',3,,,,,,,,,,
SICON_WIFI_CONNECTED = b'\x0F',3,,,,,,,,,,
"(""d''"", .25),",3,,,,,,,,,,
'rate',3,,,,,,,,,,
"'sphinx.ext.autodoc',",3,,,,,,,,,,
g.write('S1_'+data_date[i]+'_ALL_F'+iw[-1],3,,,,,,,,,,
"raise socket.timeout(""Reading socket data took too long ..."")",3,,,,,,,,,,
"'angle',",3,,,,,,,,,,
"btn1=tk.Button(self, text=""< Previous "",",3,,,,,,,,,,
"label.grid(row=1, column=4, sticky='w')",3,,,,,,,,,,
"print(f""{prefix}{key}: {value}"", **pkwargs)",3,"print(f""{prefix}{key}:",,,,,,,,,"print(f""{prefix}{key}:"
"self.parser.add_argument(""-eP"", ""--edns-payload"", type=int, default=0, help=""The EDNS payload size (Defaults to 0)."")",3,,,,,,,,,,
DATA_16 = b'\x01'  # DATA16 (don't change),3,,,,,,,,,,
for i in range(num):,3,,,,range(,,,,,,range(
assert b'\x00\x01\x02\x11\x21\x31\x44' in dfu.commands,3,,,,,,,,,,
"degrees: int,",3,,,,,,,,,,
SET_MINUTES = b'\x07',3,,,,,,,,,,
TST_RAM_CHECK = b'\x17',3,,,,,,,,,,
ICON_SEARCH = b'\x09',3,,,,,,,,,,
from impacket import ImpactDecoder,3,,,,,,,,,,
"print(f""[i] Media Access Control (MAC) Address Lookup Results For {mac}:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
elif branch[0] == 'Expression':,3,,,,,,,,,,
"print(""That is not a valid option"")",3,"print(""That",,,,,,,,,"print(""That"
type_str = 'EV3_LARGE_MOTOR',3,,,,,,,,,,
BEGIN_DOWNLOAD = b'\x92',3,,,,,,,,,,
"print(""[i] Tor is actually not running, starting a new temporary instance ..."", color = ""yellow"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"(""a'"", 1),",3,,,,,,,,,,
QUESTION = b'\x0C',3,,,,,,,,,,
"self.private_key = {""type"": ktype, ""content"": kcontent}",3,,,,,,,,,,
"ramp_up: int = None,",3,,,,,,,,,,
opRead16 = b'\xC9',3,,,,,,,,,,
"@_(""statements"")",3,,,,,,,,,,
TYPE_REFRESH_BROWSER = b'\x22',3,,,,,,,,,,
TONE = b'\x01',3,,,,,,,,,,
DATA_SI = b'\x13'  # SI unit (used in opINPUT_READEXT),3,,,,,,,,,,
opInput_ReadExt = b'\x9E',3,,,,,,,,,,
"resolver.retry_servfail = arguments.get(""retry_servfail"")",3,,,,,,,,,,
OK = b'\x00'  # No errors to report,3,,,,,,,,,,
"self.parser.add_argument(""-d"", ""--debug"", action = ""store_true"", help = ""Debug program listing (-l/--list must be specified)."")",3,,,,,,,,,,
super().__init__(),3,,,,,,,,,,
"value = self.builder.icmp_signed('<=',lhs,rhs)",3,,,,,,,,,,
"print(f"" -  {e}"", color = ""red"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
"assert response[""status""] == ""success"", Exception(f""{' - '.join(f'{key.title()}: {value}' for key, value in response.items())}"")",3,,,,,,,,,,
super().__init__(target=self._run),3,,,,,,,,,,
"if af not in [i for i in dir(socket) if i.startswith(""AF_"")]:",3,,,,,,,,,,
"print(f"" -  No records are directly available for this host ..."", color = ""yellow"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
fmt = 'B' + str(part_size) + 's',3,,,,,,,,,,
"index = (columns - 1) - len(output.split(""\n"")[-1])",3,,,,,,,,,,
SUB = b'\x0A',3,,,,,,,,,,
'percentage',3,,,,,,,,,,
"(""g'"", 2),",3,,,,,,,,,,
self.conButton.setText('Measure'),3,,,,,,,,,,
"connections = lambda pid=None, resolver=None: stem.util.connection.get_connections(resolver if resolver else self.resolvers[0], process_pid = pid if pid else self.pids()[0], process_name = ""tor"") if self.resolvers and self.pids else None",3,,,,,,,,,,
SQRT = b'\x08'  # !< Squareroot r = sqrt(x),3,,,,,,,,,,
"print(f""[i] Connecting to {url.hostname}:{port} ..."", end = ""\r"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"(""time_to_live"", c_ubyte),",3,,,,,,,,,,
"def _iter(self, answer):",3,,,,,,,,,,
@_(''),3,,,,,,,,,,
"ax1.plot(xar,yar1,label='Analog Temperature1',linewidth=2)",3,,,,,,,,,,
return True,3,,,,,,,,,,
"self.parser.add_argument(""-c"", ""--community"", type=str, default=""public"", help=""Community name."")",3,,,,,,,,,,
' already exists',3,,,,,,,,,,
"'write protect': 0x63,",3,,,,,,,,,,
"print(""Both hole values must either a number or ?"")",3,"print(""Both",,,,,,,,,"print(""Both"
"initialdir=os.getcwd(),",3,,,,,,,,,,
"frame=tk.LabelFrame(self, text='Sub-swath')",3,,,,,,,,,,
"self.arguments.key = open(""./hkbit.key"", ""ab+"")",3,,,,,,,,,,
opUI_Draw = b'\x84',3,,,,,,,,,,
"sentval = ""null""",3,,,,,,,,,,
@_('def_param'),3,,,,,,,,,,
LONGPRESS = b'\x02',3,,,,,,,,,,
str.encode(path) + b'\x00'    # NAME,3,,,,,,,,,,
ATAN = b'\x10'  # !<,3,,,,,,,,,,
SET_ENCRYPT = b'\x0B',3,,,,,,,,,,
ICON_SETTINGS = b'\x07',3,,,,,,,,,,
raise ValueError('undefined value: ' + str(values[n])),3,,,,,,,,,,
"'type': sensor_type,",3,,,,,,,,,,
"'Voice as',",3,,,,,,,,,,
"rc, handle = struct.unpack('sB', reply)",3,,,,,,,,,,
opTst = b'\xDD',3,,,,,,,,,,
opCp_Gt32 = b'\x4A',3,,,,,,,,,,
opJr_Lt8 = b'\x64'  # BRANCH,3,,,,,,,,,,
_DIRECT_REPLY = b'\x02',3,,,,,,,,,,
TST_WRITE_PINS = b'\x0D',3,,,,,,,,,,
"val = valraw.decode(""utf-8"").rstrip()",3,,,,,,,,,,
"""desktopheight:i:600"", ""session bpp:i:32"", ""winposstr:s:0,3,0,0,800,600"",",3,,,,,,,,,,
RESTORE = b'\x1A',3,,,,,,,,,,
def busy(self) -> bool:,3,,,,,,,,,,
for port in range(len(ports)):,3,,,,range(,,,,,,range(
"self.parser.add_argument(""-sP"", ""--source-port"", type=int, default=random.randint(1, 65535), help=""Source port."")",3,,,,,,,,,,
SICON_CHARGING = b'\x00',3,,,,,,,,,,
"raise ValueError(f""Unknown or invalid DNS Rdata Type \""{rdtype}\"" ..."")",3,,,,,,,,,,
"label.grid(row=4, column=0, columnspan=3, sticky='w')",3,,,,,,,,,,
GET_FOLDERNAME = b'\x17',3,,,,,,,,,,
"if hole_lmc != ""?"":",3,,,,,,,,,,
if tmp[1] == 'SAFE' or tmp[1] == 'safe':,3,,,,,,,,,,
"protocol: str = None,",3,,,,,,,,,,
"'expr DIVIDE expr',",3,,,,,,,,,,
opFile = b'\xC0',3,,,,,,,,,,
llvm_ir_parsed = llvm.parse_assembly(str(module)),3,,,,,,,,,,
self.dtemVal.setText((data[2]) +  ' °' ),3,,,,,,,,,,
"text='Step 0. Select data date',",3,,,,,,,,,,
ENTERFWUPDATE = b'\xA0',3,,,,,,,,,,
""" not reached""",3,,,,,,,,,,
"label.grid(row=2, column=3, columnspan=5, sticky='w')",3,,,,,,,,,,
"0b01)  # ECN Capable Transport, ECT(1)",3,,,,,,,,,,
text='Polarization',3,,,,,,,,,,
"print(f""      {' Identifier '.center(32, '-')}  {' Address '.center(21, '-')}"")",3,"print(f""",,,,,,,,,"print(f"""
"struct.pack('<H', local_mem * 1024 + global_mem),",3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][self._port]['used_by'] = None",3,,,,,,,,,,
"return(Type,{'value':value})",3,,,,,,,,,,
opOr8 = b'\x20'  # LOGIC,3,,,,,,,,,,
"actions.add_argument(""-t"", ""--twitter"", type = str, metavar = ""username"", help = ""Request information about a specific person by twitter."")",3,,,,,,,,,,
cur_mov['speed_left'] = speed,3,,,,,,,,,,
def _run(self) -> NoReturn:,3,,,,,,,,,,
"self.parser.description = (self.__doc__ or ""No description available."").split(""\n"", 1)[-1].strip()",3,,,,,,,,,,
"elif isinstance(value, (bytes, bytearray)):",3,,,,,,,,,,
"self._introspection[""sensors""] = {}",3,,,,,,,,,,
reply = self._socket.recv(16).decode('utf-8'),3,,,,,,,,,,
opAdd8 = b'\x10'  # MATH,3,,,,,,,,,,
"'Port_C',",3,,,,,,,,,,
"0x2A: ""SDRP"",      0x2B: ""IPv6-Route"",  0x2C: ""IPv6-Frag"",",3,,,,,,,,,,
"def _ops_pos(self, global_offset=0) -> bytes:",3,,,,,,,,,,
GET_FORMAT = b'\x02',3,,,,,,,,,,
"f'\r[{"" ""*self._position}{""█""*self._bar_len}'",3,,,,,,,,,,
"sys.path.insert(0, file)",3,,,,,,,,,,
ICON_FOLDER = b'\x01',3,,,,,,,,,,
) -> Task:,3,,,,,,,,,,
opJr_Gt8 = b'\x68',3,,,,,,,,,,
+ xml_list[i] +'\n'),3,,,,,,,,,,
XOR = r'\^',3,,,,,,,,,,
@_('MINUS NUMBER'),3,,,,,,,,,,
READ_VALUE = b'\x03',3,,,,,,,,,,
"if value != self._physical_ev3._introspection[""name""]:",3,,,,,,,,,,
"assert value != '', ""name may not be an empty string""",3,,,,,,,,,,
"print(f""{prefix}{key}:"", **pkwargs)",3,"print(f""{prefix}{key}:"",",,,,,,,,,"print(f""{prefix}{key}:"","
"__doc__ = ""Multi class module to interact with tor processes, hidden services, sockets, etc ...""",3,,,,,,,,,,
"raise ValueError(f""Unknown or invalid Address Family \""{af}\"" ..."")",3,,,,,,,,,,
"reply = bytes(self._device.read(1024, 0))",3,,,,,,,,,,
"""tread needs to be a number""",3,,,,,,,,,,
last_pos_inner = cur_mov['last_motor_pos'][1],3,,,,,,,,,,
buf[:-1] = string.encode('utf8'),3,,,,,,,,,,
def sync_mode(self) -> str:,3,,,,,,,,,,
PUT_CACHE_FILE = b'\x15',3,,,,,,,,,,
"print("" -  CFList (CFL) IDs: (Single use)"")",3,"print(""",,,,,,,,,"print("""
[port_motor_input(self._port_right)]['used_by'] is not None:,3,,,,,,,,,,
"kwargs.update({""key_type"": ktype, ""key_content"": kcontent})",3,,,,,,,,,,
DEL_SPACE = b'\x02'  # Use space as delimiter,3,,,,,,,,,,
LED_GREEN = b'\x01',3,,,,,,,,,,
"""shell working directory:s:"", ""gatewayhostname:s:"", ""gatewayusagemethod:i:4"",",3,,,,,,,,,,
"flags.append(""More Fragments (MF)"")",3,,,,,,,,,,
"self.parser.add_argument(""-S"", ""--want-dnssec"", action=""store_true"", help=""Indicate that DNSSEC is desired."")",3,,,,,,,,,,
"string = string.replace('\\n','\n\0')",3,,,,,,,,,,
"0x1E: ""NETBLT"",    0x1F: ""MFE-NSP"",     0x20: ""MERIT-INP"",",3,,,,,,,,,,
GET_IMAGE = b'\x12',3,,,,,,,,,,
"tld: str = None,",3,,,,,,,,,,
elif type == 24:,3,,,,,,,,,,
"'32s',",3,,,,,,,,,,
"response = api.person(self.arguments.twitter, ""twitter"", **kwargs, **pkwargs)",3,,,,,,,,,,
"""verbosity needs to be of type int""",3,,,,,,,,,,
GET_TBATT = b'\x05',3,,,,,,,,,,
BUSY = b'\x01'  # Busy - try again,3,,,,,,,,,,
"if isinstance(message, (tuple, list, set)):",3,,,,,,,,,,
"phbs = {v.value: k for k, v in DSCP.__members__.items()}",3,,,,,,,,,,
elif self.arguments.ports:,3,,,,,,,,,,
ICON_ONOFF = b'\x08',3,,,,,,,,,,
"src = resource_path(os.path.join('src', src1))",3,,,,,,,,,,
for i in range(6),3,,,,range(,,,,,,range(
'{:02X}'.format(rc) +,3,,,,,,,,,,
"""1"": self.audio_scraper,",3,,,,,,,,,,
if rdclass not in [type for type in dir(dns.rdataclass) if type.isupper()]:,3,,,,,,,,,,
"host='00:16:53:42:2B:99',",3,,,,,,,,,,
"group.add_argument(""-t"", ""--timeout"", type = int, default = None, help = ""Float, giving in seconds the socket timeout. Setting this argument to 0 is the same as specifying the --blocking argument."")",3,,,,,,,,,,
"resolver.lifetime = arguments.get(""lifetime"")",3,,,,,,,,,,
"with open(sys.argv[1],'r') as file:",3,,,,,,,,,,
"self.parser.add_argument(""target"", type=str, help=""Target address or hostname."")",3,,,,,,,,,,
"print(""\n\nHole LMC = {0} in"".format(str(round(hole_lmc,4))))",3,"print(""\n\nHole",,,,,,,,,"print(""\n\nHole"
"btn=[   tk.Button(self, text=""Browse"", command=lambda *args:browse(0)),",3,,,,,,,,,,
opAdd16 = b'\x11',3,,,,,,,,,,
"for port, target in ports.items():",3,,,,,,,,,,
@_('UNTIL expr LBRACE statements RBRACE'),3,,,,,,,,,,
"assert value in (1, -1), ""allowed polarity_right values are: -1 or 1""",3,,,,,,,,,,
opMove32_16 = b'\x39',3,,,,,,,,,,
"'Jukebox as',",3,,,,,,,,,,
os.chdir('..'),3,,,,,,,,,,
for value in record[-1]:,3,,,,,,,,,,
"tmp=tmp+'\n\nPlease add them into the directory of POD before you click ""Create"" button.'",3,,,,,,,,,,
SET_ON_OFF = b'\x01',3,,,,,,,,,,
"if hole_mmc != ""?"":",3,,,,,,,,,,
except Exception as ex:,3,,,,,,,,,,
"assert isinstance(value, int), ""sleep needs to be of type int""",3,,,,,,,,,,
"return bs4.BeautifulSoup(response.content, ""lxml"")",3,,,,,,,,,,
"port_str = 'PORT_' + str(1 + struct.unpack(""B"", self._port)[0])",3,,,,,,,,,,
"pullData = open(filename,""r"").read()",3,,,,,,,,,,
"'multiple EV3 found, you need to set argument host'",3,,,,,,,,,,
opSelect16 = b'\x5D',3,,,,,,,,,,
"'read memory': 0x11,",3,,,,,,,,,,
'target_motor_pos': (,3,,,,,,,,,,
"print(""[i] Successfully created RDP connection file!"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"print(prompt, **kwargs)",3,"print(prompt,",,,,,,,,,"print(prompt,"
"print(f"" -  {filename}"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
def parse(response: requests.Response):,3,,,,,,,,,,
sync_mode: str = None,3,,,,,,,,,,
WARNING_MEMORY = b'\x08',3,,,,,,,,,,
"assert 'tempo' in song, \",3,,,,,,,,,,
opMailbox_Test = b'\xDB',3,,,,,,,,,,
'check needs to be of type bool',3,,,,,,,,,,
"UDPSock.bind(('', 3015))",3,,,,,,,,,,
"fullname += "".py""",3,,,,,,,,,,
_SYSTEM_REPLY = b'\x03',3,,,,,,,,,,
"((""\n"" + ("" "" * (len(s) + 1))).join(str(i).split("" "")) if record.rdtype == 16 else str(i))",3,,,,,,,,,,
"tone: str,",3,,,,,,,,,,
if cfl_ids:,3,,,,,,,,,,
"btn2.config(state=""normal"")",3,,,,,,,,,,
tmp=image_list[i].split('.'),3,,,,,,,,,,
"'expr GE expr',",3,,,,,,,,,,
"self.source = socket.inet_ntoa(struct.pack(""<L"", self.raw_source))",3,,,,,,,,,,
"def introspection(self, verbosity: int) -> None:",3,,,,,,,,,,
"('left', TIMES, DIVIDE),",3,,,,,,,,,,
ast = ast[1]['body'],3,,,,,,,,,,
"import importlib.util, zipimport",3,,,,,,,,,,
ABS = b'\x06'  # !< Absolute r = fabs(x),3,,,,,,,,,,
"port_str = 'PORT_' + str(1 + struct.unpack(""<B"", self._port)[0])",3,,,,,,,,,,
"type, version, payload = self.recvmsg(sock)",3,,,,,,,,,,
"self._current_movement['target_motor_pos'],",3,,,,,,,,,,
"tk.Button(self, text=""Browse"", command=lambda *args:browse(1)),",3,,,,,,,,,,
"sock.send(f""{self.arguments.query}\r\n"".encode())",3,,,,,,,,,,
"brake: bool,",3,,,,,,,,,,
"0x3C: ""IPv6-Opts"", 0x3E: ""CFTP"",        0x40: ""SAT-EXPAK"",",3,,,,,,,,,,
"target_pos: Tuple[Decimal],",3,,,,,,,,,,
"def crypt(data: bytes, key: bytes = None):",3,,,,,,,,,,
"""song must have a key 'tones'""",3,,,,,,,,,,
"if sercon1 == ""OK"":",3,,,,,,,,,,
VIEW_UNIT = b'\x17',3,,,,,,,,,,
DEL_LINEFEED = b'\x06'  # Use line feed as delimiter,3,,,,,,,,,,
"self.parser.add_argument(""-k"", ""--api-key"", type = str, help = ""The API key assigned to you by FullContact. It is used to identify and authorize your request. Your API key should be kept private, and should never be displayed publicly."", required = True)",3,,,,,,,,,,
"freq: int,",3,,,,,,,,,,
"info2=eval(""info2[0:4]+info2[5:7]+info2[8:10]"")",3,,,,,,,,,,
class EPH_HS(base.Program):,3,,,,,,,,,,
start_pos_inner = cur_mov['start_motor_pos'][1],3,,,,,,,,,,
"_print((fit(string, prefix) if parse else string), **kwargs)",3,,,,,,,,,,
"assert commands, ""Invalid executable Program!""",3,,,,,,,,,,
"assert url.scheme in [""https"", ""smtp"", ""imap"", ""pop3"", ""ftp"", ""xmpp""], ValueError(f""{url.scheme.upper()} is an unsupported protocol!"")",3,,,,,,,,,,
ICON_QUESTION = b'\x1B',3,,,,,,,,,,
RuntimeError('concurrent movements'),3,,,,,,,,,,
"self.parser.add_argument(""-t"", ""--timeout"", type=int, default=8, help=""Response timeout in seconds."")",3,,,,,,,,,,
"def list_dir(self, path: str) -> dict:",3,,,,,,,,,,
line = [char for char in data[b: b + 16]],3,,,,,,,,,,
CIRCLE = b'\x04',3,,,,,,,,,,
self.groupBox1 = QGroupBox(''),3,,,,,,,,,,
"'start_motor_pos': data,",3,,,,,,,,,,
"def send_and_play(data: bytes, *, pause: float=0, volume: int=None):",3,,,,,,,,,,
"self._introspection[""os_build""] = os_build.split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
last_pos_outer = cur_mov['last_motor_pos'][0],3,,,,,,,,,,
"super().__exit__(exc_type, exc_value, exc_traceback)",3,,,,,,,,,,
def tracking_callback(self) -> Callable:,3,,,,,,,,,,
opBp3 = b'\x8B',3,,,,,,,,,,
b''.join((,3,,,,,,,,,,
'_control must be a boolean',3,,,,,,,,,,
import argparse,3,,,,,,,,,,
opJr_EqF = b'\x6F',3,,,,,,,,,,
opPort_Cnv_Input = b'\x62',3,,,,,,,,,,
"speed=abs(self._current_movement['speed']),",3,,,,,,,,,,
"'expr LT expr',",3,,,,,,,,,,
"def load(file: str, module: str = ""__main__""):",3,,,,,,,,,,
"(""c''"", 0.75),",3,,,,,,,,,,
info=Dir_image+'/*'+data_date[i]+'*',3,,,,,,,,,,
"rbtn=tk.Checkbutton(self, text=""Not use."",",3,,,,,,,,,,
"title=""Select a directory"")",3,,,,,,,,,,
self.base_url = urllib.parse.urlparse(url),3,,,,,,,,,,
"self.protocol = self.protocols[self.raw_protocol] if self.raw_protocol in self.protocols else ""Unknown""",3,,,,,,,,,,
print('open1'),3,print('open1'),,,,,,,,,print('open1')
).quantize(Decimal('1.0000')),3,,,,,,,,,,
"'heading',",3,,,,,,,,,,
"label.grid(row=1, column=1, sticky='e')",3,,,,,,,,,,
print(dat + '|'),3,print(dat,,,,,,,,,print(dat
raise NoEV3('No EV3 device found') from None,3,,,,,,,,,,
"print("" -  Introduction Points:"")",3,"print(""",,,,,,,,,"print("""
opMove32_8 = b'\x38',3,,,,,,,,,,
"struct.pack('<I', size),      # SIZE",3,,,,,,,,,,
def run(self):,3,,,,,,,,,,
"print(f"" -  OUI Info.:"")",3,"print(f""",,,,,,,,,"print(f"""
'{:02X}'.format(rc) +,3,,,,,,,,,,
"print(f"" -  Organizationally Unique Identifier:  {mac.oui}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"print(""Hole MMC = {0} in"".format(str(round(hole_mmc,4))))",3,"print(""Hole",,,,,,,,,"print(""Hole"
self.setWindowTitle('Biology Experiment'),3,,,,,,,,,,
"import urllib.parse, select, struct, time",3,,,,,,,,,,
"Remote = namedtuple('Remote', [",3,,,,,,,,,,
"def pprint(obj: object, depth: int = 0, excluded_keys: list = [], pretty_keys: bool = True, **pkwargs):",3,,,,,,,,,,
DEBUG_SLOT = b'\x04',3,,,,,,,,,,
"def recvmsg(self, sock):",3,,,,,,,,,,
"def sleep(self, value: int):",3,,,,,,,,,,
"struct.pack('<H', 1012),      # SIZE",3,,,,,,,,,,
def connect_wifi(self) -> int:,3,,,,,,,,,,
"self._current_movement['duration_rest'],",3,,,,,,,,,,
"self.parser.add_argument(""-p"", ""--port"", type=int, default=53, help=""The port to which to send the message. The default is 53."")",3,,,,,,,,,,
GET_ADDRESS = b'\x0D',3,,,,,,,,,,
"self.parser.add_argument(""-s"", ""--want-dnssec"", action=""store_true"", default=None, help=""Should the query indicate that DNSSEC is desired?"")",3,,,,,,,,,,
self.downLoad = QPushButton('Reset and Save Data'),3,,,,,,,,,,
step2 = cur_mov['step2_right'],3,,,,,,,,,,
"(""version"", c_ubyte, 4),",3,,,,,,,,,,
"self._physical_ev3._introspection[""sleep""] = value",3,,,,,,,,,,
mass_erase = b'\xff\xff',3,,,,,,,,,,
TESTLONGPRESS = b'\x0D',3,,,,,,,,,,
"'ramp_down': ramp_down,",3,,,,,,,,,,
"if (int(sector['address'], 0) < address + size <=",3,,,,,,,,,,
"'Miscellaneous'),",3,,,,,,,,,,
"""enablecredsspsupport:i:0""]))",3,,,,,,,,,,
"0x2D: ""IDRP"",      0x2E: ""RSVP"",        0x2F: ""GREs"",",3,,,,,,,,,,
"def person(self, query: str, method: str = ""email"", type: str = ""json"",",3,,,,,,,,,,
"""check-origin"", ""export""])",3,,,,,,,,,,
assert ':'.join('{:02X}'.format(byte) for byte in msg_cnt_1) == '2F:00',3,,,,,,,,,,
RUNNING = b'\x10'  # Object code is running,3,,,,,,,,,,
WARNING_DSPSTAT = b'\x10',3,,,,,,,,,,
'protocol needs to be of type str',3,,,,,,,,,,
"radius_wheel: Number,",3,,,,,,,,,,
ICON_RIGHT = b'\x02',3,,,,,,,,,,
print('\nNOTE: Hole LMC will be the LARGER value'),3,print('\nNOTE:,,,,,,,,,print('\nNOTE:
':'.join('{:02X}'.format(byte) for byte in cmd[5:]) + '|',3,,,,,,,,,,
"self.parser.add_argument(""-o"", ""--one-rr-per-rrset"", action=""store_true"", default=None, help=""Put each RR into its own RRset."")",3,,,,,,,,,,
opOutput_Get_Type = b'\xA0'  # OUTPUT,3,,,,,,,,,,
"'Sound as',",3,,,,,,,,,,
"assert port in (PORT_A, PORT_B, PORT_C, PORT_D), ""incorrect port""",3,,,,,,,,,,
"out_file = (""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s"" % self.outfile)",3,,,,,,,,,,
"f=open(path_config,'r')",3,,,,,,,,,,
"print(f""[i] Request results for E-Mail Address based Person Lookup:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
UP_BUTTON = b'\x01',3,,,,,,,,,,
"btn_polar_check=tk.Button(self, text=""Polarization"", command=lambda *args:Display(1))",3,,,,,,,,,,
self._current_movement['duration_rest'] = (,3,,,,,,,,,,
"btn_scene=tk.Button(self, text=""Display"", command=lambda *args:Display(0))",3,,,,,,,,,,
"if isinstance(value, str):",3,,,,,,,,,,
"'sphinx.ext.doctest',",3,,,,,,,,,,
"proxy = urllib.parse.urlparse(proxy, scheme = ""socks5"")",3,,,,,,,,,,
"rb1.grid(row=3, column=3, sticky='w')",3,,,,,,,,,,
"protocols = {0x00: ""HOPOPT"",    0x01: ""ICMP"",        0x02: ""IGMP"",",3,,,,,,,,,,
KEYBOARD = b'\x0D',3,,,,,,,,,,
print('Erasing whole memory...'),3,print('Erasing,,,,,,,,,print('Erasing
SICON_BT_VISIBLE = b'\x09',3,,,,,,,,,,
"'Port_2',",3,,,,,,,,,,
@_('statement'),3,,,,,,,,,,
"label=tk.Label(self, text='File name for step 2.')",3,,,,,,,,,,
'''direct command error''',3,,,,,,,,,,
"""beats_per_bar"": 4,",3,,,,,,,,,,
for i in range (len(del_index)):,3,,,,range (,,,,,,range (
WRITE_TEXT = b'\x06',3,,,,,,,,,,
opCp_Ne32 = b'\x52',3,,,,,,,,,,
class DNSZT(Program):,3,,,,,,,,,,
"kwargs[""type""] = SOCK_RAW",3,,,,,,,,,,
POWER = b'\x1D',3,,,,,,,,,,
GET_MODENAME = b'\x16',3,,,,,,,,,,
elif branch[0] == 'FuncCall':,3,,,,,,,,,,
self.groupBox3 = QGroupBox(''),3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in msg_cnt) +,3,,,,,,,,,,
if self._current_movement['op'] == 'Time_Speed':,3,,,,,,,,,,
"self._physical_ev3._introspection[""os_build""],",3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][PORT_D_SENSOR][""type""]",3,,,,,,,,,,
"references = {""Base Script"": ""https://gist.github.com/chokepoint/28bed027606c5086ed9eeb274f3b840a""}",3,,,,,,,,,,
"f""full address:s:{self.arguments.target}:{self.arguments.port}"", ""audiomode:i:0"",",3,,,,,,,,,,
"""compression:i:1"", ""keyboardhook:i:2"", ""audiocapturemode:i:0"",",3,,,,,,,,,,
"0x62: ""ENCAP"",     0x64: ""GMTP"",        0x65: ""IFMP"",",3,,,,,,,,,,
self.dtemVal = QLabel(str(y3) +  ' °' ),3,,,,,,,,,,
opMailbox_Write = b'\xD9',3,,,,,,,,,,
opJr_LtF = b'\x67',3,,,,,,,,,,
dir=os.getcwd(),3,,,,,,,,,,
"tkinter.ttk.Separator(self, orient='vertical').grid(column=2, row=2, rowspan=9, sticky='ns')",3,,,,,,,,,,
"self._physical_ev3._introspection[""mem_free""]",3,,,,,,,,,,
opJr_GtF = b'\x6B',3,,,,,,,,,,
SET_BRICKNAME = b'\x08',3,,,,,,,,,,
where = socket.gethostbyname(where),3,,,,,,,,,,
TYPE_TEXT = b'\x07',3,,,,,,,,,,
"if os.name == ""nt"":",3,,,,,,,,,,
"'direction': direction,",3,,,,,,,,,,
"console.print(data.decode(""ascii"", errors=""backslashreplace""))",3,"print(data.decode(""ascii"",",,,,,,,,,"print(data.decode(""ascii"","
"def execute(self, file: str, *args):",3,,,,,,,,,,
"print(f"" -  Individual Access Block [IAB]:       {mac.iab if mac.is_iab() else 'Not an IAB'}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"print(f""[i] NSMap results for host {repr(host)}:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
for current_retry in range(retry_num):,3,,,,range(,,,,,,range(
"""host needs to be of type str""",3,,,,,,,,,,
"label.grid(row=6, column=3, columnspan=5, sticky='w')",3,,,,,,,,,,
"def port_left(self, value: int):",3,,,,,,,,,,
FILLCIRCLE = b'\x18',3,,,,,,,,,,
"return struct.unpack('B', reply)[0]",3,,,,,,,,,,
opCp_Lteq8 = b'\x54',3,,,,,,,,,,
opDiv16 = b'\x1D',3,,,,,,,,,,
"tk.Button(self, text=""Browse"", command=lambda *args:browse(3)),",3,,,,,,,,,,
from network.modules import socket,3,,,,,,,,,,
"ramp_down: int = 30,",3,,,,,,,,,,
"return self.from_buffer_copy(buffer[:2] if isinstance(buffer, bytes) else buffer)",3,,,,,,,,,,
GET_BACK_BLOCK = b'\x0B',3,,,,,,,,,,
"requirements = {""censys""}",3,,,,,,,,,,
"self.parser.add_argument(""domain"", type = str, help = ""Target domain name."")",3,,,,,,,,,,
opRl32 = b'\x2E',3,,,,,,,,,,
@_('RETURN expr'),3,,,,,,,,,,
'duration must be positive',3,,,,,,,,,,
"print(f""    - {port}: {target}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
DIVIDE = r'/',3,,,,,,,,,,
CURRENT_SLOT = b'\x21',3,,,,,,,,,,
ICON_LOCKSTAR = b'\x01',3,,,,,,,,,,
os.chdir('topo'),3,,,,,,,,,,
"(""f'"", .5),",3,,,,,,,,,,
"edTxt2.insert(0,'01_prep.csh')",3,,,,,,,,,,
ICON_LEFT = b'\x01',3,,,,,,,,,,
"lhs, lhs_type = self.visit_value(branch[1]['lhs'])",3,,,,,,,,,,
NO_BUTTON = b'\x00',3,,,,,,,,,,
CONTINUE_DOWNLOAD = b'\x93',3,,,,,,,,,,
ops = b'',3,,,,,,,,,,
'|' +,3,,,,,,,,,,
RPAREN = r'\)',3,,,,,,,,,,
VALUE = b'\x08',3,,,,,,,,,,
params_name = [x['name'] for x in params],3,,,,,,,,,,
"assert isinstance(ops, bytes), \",3,,,,,,,,,,
WAIT_FOR_PRESS = b'\x03',3,,,,,,,,,,
sys.path.remove(file),3,,,,,,,,,,
@_('NUMBER'),3,,,,,,,,,,
"help=' '.join([_ARGS_HELP['size'], 'dumped.']))",3,,,,,,,,,,
"print(f"" -  Local Link IPv6 Address:             {mac.ipv6_link_local()}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"print(f""    - Version: {mac.version}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"reply: bool = True,",3,,,,,,,,,,
BTTYPE_BRICK = b'\x05'  # Bluetooth type BRICK,3,,,,,,,,,,
"timeout: int = None, blocking: bool = False):",3,,,,,,,,,,
'(whole memory if no memory map).',3,,,,,,,,,,
b''.join((,3,,,,,,,,,,
SET_TESTPIN = b'\x17',3,,,,,,,,,,
text='Chosen Scenes',3,,,,,,,,,,
"if hole_lmc == ""?"" and hole_mmc != ""?"":",3,,,,,,,,,,
TO_TRASH = b'\x13',3,,,,,,,,,,
"def _checksum(data: Union[int, Sequence], init: int = 0) -> bytes:",3,,,,,,,,,,
"mac_addr = ':'.join((tmp[i:i + 2] for i in range(0, len(tmp), 2)))",3,,,,range(,,,,,,range(
"def ramp_down(self, value: int):",3,,,,,,,,,,
"'Port_B',",3,,,,,,,,,,
"flags.append(""Don't Fragment (DF)"")",3,,,,,,,,,,
elif op == '>':,3,,,,,,,,,,
GET_CHANGES = b'\x19',3,,,,,,,,,,
class DfuCommandHandler:,3,,,,,,,,,,
"def __init__(self, url: str, headers: dict = {}):",3,,,,,,,,,,
"value = self.builder.fcmp_ordered('!=',lhs,rhs)",3,,,,,,,,,,
GET_CLICK = b'\x0F',3,,,,,,,,,,
for id in cfl_ids:,3,,,,,,,,,,
"for line in answer.split(""\n""):",3,,,,,,,,,,
"self.geometry(""760x400"")",3,,,,,,,,,,
try:,3,,,,,,,,,,
"hole_lmc = vin(""Hole LMC"", ""?"", units=""in"")",3,,,,,,,,,,
self.ast[1]['body'] = p.statements,3,,,,,,,,,,
"f'{"" ""*tail}] ...',",3,,,,,,,,,,
INIT_RUN = b'\x18',3,,,,,,,,,,
os.chdir('../raw'),3,,,,,,,,,,
"if tone.endswith(""'''""):",3,,,,,,,,,,
"if tone.startswith(""c""):",3,,,,,,,,,,
speed = self._current_movement['speed'],3,,,,,,,,,,
super().__init__(,3,,,,,,,,,,
"if sock in select.select([sock], [], [], 5)[0]:",3,,,,,,,,,,
self._max_rdtype_length = max([len(rdtype) for rdtype in self.rdtypes]),3,,,,,,,,,,
KEY = b'\x0F',3,,,,,,,,,,
PORT_C_SENSOR = b'\x12',3,,,,,,,,,,
"self.parser.add_argument(""-e"", ""--edns"", type=int, default=-1, help=""The EDNS level to use (Defaults to -1, no Edns)."")",3,,,,,,,,,,
STOPPED = b'\x40'  # Object is stopped or not triggered yet,3,,,,,,,,,,
SYSTEM_SIZE_ERROR = b'\x09',3,,,,,,,,,,
GET_MODE2 = b'\x14',3,,,,,,,,,,
"'red_down',",3,,,,,,,,,,
"key: sensor[""type""]",3,,,,,,,,,,
"@_retry(_RETRIES, 'get extended dfu version', _serial_flush)",3,,,,,,,,,,
"self.parser.add_argument(""-s"", ""--server"", default = ""whois.iana.org"", type=str, help=""Whois server address (defaults to 'whois.iana.org')."")",3,,,,,,,,,,
"print("" -  {:32}{:32}"".format(*domains[i:i+2], """"), dark=True)",3,"print(""",,,,,,,,,"print("""
module = importer.load_module(os.path.splitext(os.path.basename(file))[0]),3,,,,,,,,,,
FAIL = b'\x02'  # Something failed,3,,,,,,,,,,
step3 = cur_mov['step3_left'],3,,,,,,,,,,
"'expr EQEQ expr',",3,,,,,,,,,,
params = branch[1]['def_params'],3,,,,,,,,,,
"b''.join([command.to_bytes(1, 'big'), self._checksum(command)]))",3,,,,,,,,,,
GT = r'>',3,,,,,,,,,,
cur_mov['last_motor_pos'] = motor_pos,3,,,,,,,,,,
"if shaft_lmc != ""?"":",3,,,,,,,,,,
from dns.resolver import Resolver,3,,,,,,,,,,
"if proxy.port: kwargs[""port""] = proxy.port",3,,,,,,,,,,
html_theme = 'sphinx_rtd_theme',3,,,,,,,,,,
opInfo = b'\x7C'  # VM,3,,,,,,,,,,
self.cflist(self.arguments.list),3,,,,,,,,,,
GET_IINT = b'\x06',3,,,,,,,,,,
'direction must be an int value',3,,,,,,,,,,
sock = socket.socket(**kwargs),3,,,,,,,,,,
"server = re.search(""whois\: (.*)"", answer)",3,,,,,,,,,,
self._iter(answer),3,,,,,,,,,,
"def start(self, quiet: bool = True, msg_prefix: str = """", msg_color: str = ""yellow"", **config):",3,,,,,,,,,,
GET_HANDLE = b'\x09',3,,,,,,,,,,
"self.parser.add_argument(""-m"", ""--metaquery"", action=""store_true"", help=""Execute as MetaQuery."")",3,,,,,,,,,,
"if (int(sector['address'], 0) <= address <",3,,,,,,,,,,
"0x45: ""SAT-MON"",   0x46: ""VISA"",        0x47: ""IPCU"",",3,,,,,,,,,,
DEL_COLON = b'\x04'  # Use colon as delimiter,3,,,,,,,,,,
"(""raw_checksum"", c_ushort),",3,,,,,,,,,,
score = status = None,3,,,,,,,,,,
"duration: Number = None,",3,,,,,,,,,,
"'current',",3,,,,,,,,,,
"(""g'"", 4),",3,,,,,,,,,,
CEIL = b'\x04'  # !< Ceiling r = ceil(x),3,,,,,,,,,,
"raise ValueError(""Invalid IP address: %s"" % address)",3,,,,,,,,,,
tmp = dev['serial_number'].upper(),3,,,,,,,,,,
"mac_addr = ':'.join((tmp[i:i + 2] for i in range(0, len(tmp), 2)))",3,,,,range(,,,,,,range(
print(,3,,,,,,,,,,
'available only for WiFi connected devices',3,,,,,,,,,,
"""delta_time must be a number""",3,,,,,,,,,,
ICON_RUN = b'\x00',3,,,,,,,,,,
DELETE = b'\x00',3,,,,,,,,,,
"assert host is None or isinstance(host, str), \",3,,,,,,,,,,
MAKE_FOLDER = b'\x0A',3,,,,,,,,,,
GET_POOL = b'\x0B',3,,,,,,,,,,
print(f'Loading {args.file} ({len(firmware)} bytes) at {args.address}'),3,print(f'Loading,,,,,,,,,print(f'Loading
return {,3,,,,,,,,,,
VIEW_VALUE = b'\x16',3,,,,,,,,,,
"label=tk.Label(self, text='File name for step 1.')",3,,,,,,,,,,
"0x03: ""GGP"",       0x04: ""IP-in-IP"",    0x05: ""ST"",",3,,,,,,,,,,
dataArray = pullData.split('\n'),3,,,,,,,,,,
"self.parser.add_argument(""-c"", ""--crlf"", action = ""store_true"", help = ""Use CRLF for EOL sequences."")",3,,,,,,,,,,
"address_family = int(getattr(socket, af))",3,,,,,,,,,,
"record = next(response, None)",3,,,,,,,,,,
for n in range(4):,3,,,,range(,,,,,,range(
"self.parser.add_argument(""input"", type = argparse.FileType(""rb""), help = ""Input file."")",3,,,,,,,,,,
print('MCU ID: 0x{}'.format(dfu.id.hex())),3,print('MCU,,,,,,,,,print('MCU
"raise serial.SerialException(""Can't open serial port."")",3,,,,,,,,,,
ICON_STAR = b'\x00',3,,,,,,,,,,
class Heartbleed(Program):,3,,,,,,,,,,
"(""f'"", 1),",3,,,,,,,,,,
"print("" -  No direct-connect IP addresses have been found for this domain ..."", color = ""red"", dark = True)",3,"print(""",,,,,,,,,"print("""
"self.parser.add_argument(""-c"", ""--rdclass"", type=str, default=1, help=""Query class."")",3,,,,,,,,,,
"if isinstance(value, bytes):",3,,,,,,,,,,
opMemory_Usage = b'\xC5',3,,,,,,,,,,
STAMP = b'\x03',3,,,,,,,,,,
"help=' '.join([_ARGS_HELP['address'], 'run.']))",3,,,,,,,,,,
"def recvall(self, sock: socket.socket, length: int, timeout: int = 8):",3,,,,,,,,,,
opArray_Write = b'\xC2',3,,,,,,,,,,
b'\x00\x00',3,,,,,,,,,,
if op == '+':,3,,,,,,,,,,
def sensors_as_dict(self) -> dict:,3,,,,,,,,,,
"'-ar', '8000',",3,,,,,,,,,,
opMemory_Read = b'\x7F',3,,,,,,,,,,
"'readout protect': 0x82,",3,,,,,,,,,,
'tld must be a str',3,,,,,,,,,,
"[""zone"", ""where"", ""port"", ""source"", ""source-port"",",3,,,,,,,,,,
if line == b'':,3,,,,,,,,,,
opMemory_Write = b'\x7E',3,,,,,,,,,,
NORMAL_FONT = b'\x00',3,,,,,,,,,,
TST_READ_PINS = b'\x0C',3,,,,,,,,,,
"""local_mem needs to be an integer""",3,,,,,,,,,,
ARROW_ICON = b'\x04'  # 8x12_miniArrows.bmp,3,,,,,,,,,,
"'Port_4',",3,,,,,,,,,,
"sock.send(b""<stream:stream xmlns:stream='http://etherx.jabber.org/streams' xmlns='jabber:client' to='%s' version='1.0'\n"")",3,,,,,,,,,,
"self.parser.add_argument(""query"", type=str, help=""The query."")",3,,,,,,,,,,
'target_position': position + degrees,3,,,,,,,,,,
if self._current_movement['duration_rest'] < 0.001:,3,,,,,,,,,,
"btn_create.config(state=""disabled"")",3,,,,,,,,,,
opUI_Write = b'\x82',3,,,,,,,,,,
"sniffer = Sniffer(self.arguments.address, **kwargs)",3,,,,,,,,,,
for port in range(len(ports)):,3,,,,range(,,,,,,range(
"frame=tk.LabelFrame(self, text='Polarization')",3,,,,,,,,,,
"Memory = namedtuple('Memory', [",3,,,,,,,,,,
ops = b''.join((,3,,,,,,,,,,
SYSTEM_ILLEGAL_CONNECTION = b'\x0C',3,,,,,,,,,,
[port_motor_input(self._port_left)]['used_by'] = None,3,,,,,,,,,,
WARN_MEMORY = b'\x1B',3,,,,,,,,,,
actions = self.parser.add_mutually_exclusive_group(required = True),3,,,,,,,,,,
"text='Step 1. Preprocessing',",3,,,,,,,,,,
"0x7C: ""IS-IS"",     0x7D: ""FIRE"",        0x7E: ""CRTP"",",3,,,,,,,,,,
"return bytes(output), key",3,,,,,,,,,,
"channel: int = None,",3,,,,,,,,,,
"self.parser.add_argument(""-r"", ""--retries"", type=int, default=5, help=""Maximum number of request retries."")",3,,,,,,,,,,
process = tor.Tor(),3,,,,,,,,,,
elif op == '&':,3,,,,,,,,,,
sensor_str = 'EV3_Color',3,,,,,,,,,,
"""serial"", ""keyalgorithm"", ""relativize"",",3,,,,,,,,,,
"super().__init__(protocol=protocol, host=host, ev3_obj=ev3_obj)",3,,,,,,,,,,
"print(""[i] Server processed malformed heartbeat, but did not return any extra data."")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"sock.send(b'\x16\x03\x02\x00\xdc\x01\x00\x00\xd8\x03\x02SC[\x90\x9d\x9br\x0b\xbc\x0c\xbc+\x92\xa8H\x97\xcf\xbd9\x04\xcc\x16\n\x85\x03\x90\x9fw\x043\xd4\xde\x00\x00f\xc0\x14\xc0\n\xc0""\xc0!\x009\x008\x00\x88\x00\x87\xc0\x0f\xc0\x05\x005\x00\x84\xc0\x12\xc0\x08\xc0\x1c\xc0\x1b\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0\x13\xc0\t\xc0\x1f\xc0\x1e\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc0\x0e\xc0\x04\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\x14\x00\x11\x00\x08\x00\x06\x00\x03\x00\xff\x01\x00\x00I\x00\x0b\x00\x04\x03\x00\x01\x02\x00\n\x004\x002\x00\x0e\x00\r\x00\x19\x00\x0b\x00\x0c\x00\x18\x00\t\x00\n\x00\x16\x00\x17\x00\x08\x00\x06\x00\x07\x00\x14\x00\x15\x00\x04\x00\x05\x00\x12\x00\x13\x00\x01\x00\x02\x00\x03\x00\x0f\x00\x10\x00\x11\x00#\x00\x00\x00\x0f\x00\x01\x01')",3,,,,,,,,,,
"'memmap': 'Json file, containing memory structure.'",3,,,,,,,,,,
autoclass_content = 'both',3,,,,,,,,,,
TST_READ_UART = b'\x10',3,,,,,,,,,,
DEL_NONE = b'\x00'  # No delimiter at all,3,,,,,,,,,,
opNote_To_Freq = b'\x63',3,,,,,,,,,,
"*message, dark = message",3,,,,,,,,,,
if self._current_movement['op'] == 'Step_Speed':,3,,,,,,,,,,
"def print(*messages, color: str = ""white"", dark: bool = False, prefix: str = """", parse: bool = True, **kwargs):",3,"print(*messages,",,,,,,,,,"print(*messages,"
elif self.arguments.close:,3,,,,,,,,,,
tmp2=tmp1[0].split('/'),3,,,,,,,,,,
"for introduction_point in sorted(service.introduction_points(), key=lambda x: x.identifier):",3,,,,,,,,,,
"return utils.data('String',p.STRING)",3,,,,,,,,,,
"self.parser.add_argument(""-R"", ""--one-rr-per-rrset"", action=""store_true"", help=""Put each RR into its own RRset (Only useful when executing MetaQueries)."")",3,,,,,,,,,,
else 'NXT_ULTRASONIC',3,,,,,,,,,,
FILLWINDOW = b'\x13',3,,,,,,,,,,
"values = struct.unpack('<8i', reply[:32])",3,,,,,,,,,,
GET_IBATT = b'\x02',3,,,,,,,,,,
"def fit(string, prefix: str = ""    ""):",3,,,,,,,,,,
"@pytest.fixture(scope='module', params=['fw.bin'])",3,,,,,,,,,,
ICON_INFO_FILE = b'\x1C',3,,,,,,,,,,
opJr_True = b'\x42',3,,,,,,,,,,
opWrite32 = b'\xCE',3,,,,,,,,,,
master_doc = 'index',3,,,,,,,,,,
"self._checksum(address.to_bytes(4, 'big'))]))",3,,,,,,,,,,
str.encode(path) + b'\x00'  # NAME,3,,,,,,,,,,
port_str = 'PORT_D',3,,,,,,,,,,
"label.grid(row=0, column=0, columnspan=3, sticky='w')",3,,,,,,,,,,
"ramp_up: int = None,",3,,,,,,,,,,
"LCX(1 if cur_mov['brake'] else 0),  # BRAKE",3,,,,,,,,,,
CMD_SLOT = b'\x02',3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][PORT_3][""type""],",3,,,,,,,,,,
opCom_Readdata = b'\xD1',3,,,,,,,,,,
opMailbox_Read = b'\xDA',3,,,,,,,,,,
"for key, sensor in self._physical_ev3._introspection[""sensors""].items()",3,,,,,,,,,,
GET_NAME = b'\x15',3,,,,,,,,,,
"speed=self._current_movement['speed'],",3,,,,,,,,,,
"if not fullname.endswith("".py""):",3,,,,,,,,,,
"'red_up',",3,,,,,,,,,,
"self.parser.add_argument(""-p"", ""--port"", default = 43, type=int, help=""Whois server port (defaults to 43)."")",3,,,,,,,,,,
elif op == '|':,3,,,,,,,,,,
TST_OPEN = b'\x0A',3,,,,,,,,,,
"self.parser.add_argument(""--rdclass"", type=str, default=""IN"", help=""The class of the zone transfer. The default is \""IN\""."")",3,,,,,,,,,,
"0x54: ""TTP"",       0x54: ""IPTM"",        0x55: ""NSFNET-IGP"",",3,,,,,,,,,,
ports = ['COM%s' % (i + 1) for i in range(256)],3,,,,range(,,,,,,range(
'lang must be a str',3,,,,,,,,,,
"print(datetime.now().strftime(""[i] Stopped sniffing %A, %B %d at %H:%M:%S!""))",3,"print(datetime.now().strftime(""[i]",,,,,,,,,"print(datetime.now().strftime(""[i]"
"r'\d\d:\d\d:\d\d\.\d{6}',",3,,,,,,,,,,
"len_data = struct.unpack('<H', reply[:2])[0] + 2",3,,,,,,,,,,
' Recv 0x|' +,3,,,,,,,,,,
GET_FW_VERS = b'\x0A',3,,,,,,,,,,
"'expr LSHIFT expr',",3,,,,,,,,,,
MOD8 = b'\x11'  # !< Modulo DATA8 r = x % y,3,,,,,,,,,,
"def stop_as_task(self, *, brake: bool = False) -> Task:",3,,,,,,,,,,
SICON_WIFI_1 = b'\x0E',3,,,,,,,,,,
"print(value.prettyPrint(), dark = True)",3,"print(value.prettyPrint(),",,,,,,,,,"print(value.prettyPrint(),"
opCom_Ready = b'\xD0',3,,,,,,,,,,
delta_t = now - self._current_movement['last_time'],3,,,,,,,,,,
ports = glob.glob('/dev/tty[A-Za-z]*'),3,,,,,,,,,,
"def __init__(self, address, controller: Controller = None):",3,,,,,,,,,,
while True:,3,,,,,,,,,,
"'-loglevel', 'error',",3,,,,,,,,,,
NO_SEL = b'\x03',3,,,,,,,,,,
'xx:xx:xx.xxxxxx Sent 0x|06:00|2C:00|80|00:00|01|' + '\n',3,,,,,,,,,,
"port_str = 'PORT_' + str(1 + struct.unpack(""<B"", self._port)[0])",3,,,,,,,,,,
"""value of bumps: "" + str(value) + "" is invalid (must be 0)""",3,,,,,,,,,,
verbosity: int = 0,3,,,,,,,,,,
TST_ACCU_SWITCH = b'\x13',3,,,,,,,,,,
self.dhumVal = QLabel(str(y4) +  ' %' ),3,,,,,,,,,,
"(""raw_source"", c_ulong),",3,,,,,,,,,,
label.config(fg='#000000'),3,,,,,,,,,,
GET_ON_OFF = b'\x01',3,,,,,,,,,,
opObject_Trig = b'\x06',3,,,,,,,,,,
"def cfsearch(self, domain: str):",3,,,,,,,,,,
Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*',3,,,,,,,,,,
"values = struct.unpack('<4i', reply[:16])",3,,,,,,,,,,
assert captured.err == '',3,,,,,,,,,,
"if country: url += ""&country="" + country",3,,,,,,,,,,
"print(""Shaft LMC = {0} in"".format(str(round(shaft_lmc,4))))",3,"print(""Shaft",,,,,,,,,"print(""Shaft"
manifest_list.append(data_date[i]+'_manifest.safe'),3,,,,,,,,,,
ICON_FOLDER2 = b'\x02',3,,,,,,,,,,
"self.parser.add_argument(""-t"", ""--timeout"", type=int, default=8, help=""The number of seconds to wait before the query times out."")",3,,,,,,,,,,
"import os, argparse, threading, urllib.parse",3,,,,,,,,,,
"if allowance != ""?"":",3,,,,,,,,,,
"self.iw_tmp=['iw1','iw2','iw3']",3,,,,,,,,,,
"print(""    "" + ehs.signature.replace(""\n"", ""\n    ""), dark=True)",3,"print(""",,,,,,,,,"print("""
"content=content.replace('master_image = ',",3,,,,,,,,,,
opTimer_Read_Us = b'\x8F'  # TIMER,3,,,,,,,,,,
"print(f""      {' Identifier '.center(32, '-')}  {' Address '.center(21, '-')}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
src2a = 'sensor_output_ori.csv',3,,,,,,,,,,
sock.recv(0x400),3,,,,,,,,,,
CONTINUE_GETFILE = b'\x97',3,,,,,,,,,,
"assert lang is None or isinstance(lang, str), \",3,,,,,,,,,,
"(""e'"", 1),",3,,,,,,,,,,
"g=open(proc_sh,'w')",3,,,,,,,,,,
"def sync_mode(self, value: str):",3,,,,,,,,,,
"message = dns.message.make_query(qname, rdtype, rdclass, use_edns, want_dnssec, ednsflags, payload, request_payload, options)",3,,,,,,,,,,
CONTINUE_UPLOAD = b'\x95',3,,,,,,,,,,
"print(""[i] Some CloudFlare-User domains with a direct-connect IP address of {cfl_id.split('-')[1]}:"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
print(f'Dumping {args.size} bytes from {args.address}...'),3,print(f'Dumping,,,,,,,,,print(f'Dumping
for name in dir(record):,3,,,,,,,,,,
"SYNC = 'SYNC'  # always with reply, always wait for reply",3,,,,,,,,,,
'angle needs to be a number',3,,,,,,,,,,
"def stats(self, period: str = """", type: str = ""json"", prettyPrint: bool = False):",3,,,,,,,,,,
GET_ENCRYPT = b'\x10',3,,,,,,,,,,
"def del_file(self, path: str) -> None:",3,,,,,,,,,,
if not response or response != self._RESPONSE['ack']:,3,,,,,,,,,,
'free',3,,,,,,,,,,
DOWN_BUTTON = b'\x03',3,,,,,,,,,,
"local_mem: int = 0,",3,,,,,,,,,,
raise MotorError('no motor connected at ' + port_str),3,,,,,,,,,,
NAME['def'] = DEF,3,,,,,,,,,,
for i in range (len(info)):,3,,,,range (,,,,,,range (
PORT_2 = b'\x01',3,,,,,,,,,,
},3,,,,,,,,,,
"ptr,Type = self.variables[branch[1]['value']]",3,,,,,,,,,,
opInit_Bytes = b'\x2F'  # MOVE,3,,,,,,,,,,
"""msg_cnt must be 2 bytes long""",3,,,,,,,,,,
"print(f"" -  Descriptor Version: {service.version}"")",3,"print(f""",,,,,,,,,"print(f"""
info1=str(info1),3,,,,,,,,,,
opCp_GtF = b'\x4B',3,,,,,,,,,,
"0x8E: ""ROHC""}",3,,,,,,,,,,
"delta_time: Number = None,",3,,,,,,,,,,
"value = self.builder.icmp_signed('>',lhs,rhs)",3,,,,,,,,,,
opRead8 = b'\xC8',3,,,,,,,,,,
'polarity_left must be an integer',3,,,,,,,,,,
GET_OS_BUILD = b'\x0C',3,,,,,,,,,,
"name.add_argument(""--locality"", type = str, help = ""If supplied, only companies matching given locality/city will be returned. For example, --locality=New York or --locality=Dallas."")",3,,,,,,,,,,
def _final_move_for(self) -> None:,3,,,,,,,,,,
"def _print(self, progress: int = None) -> NoReturn:",3,,,,,,,,,,
ports = {},3,,,,,,,,,,
"socket.add_argument_group(self.parser, False)",3,,,,,,,,,,
TO_EXECUTE = b'\x0D',3,,,,,,,,,,
"0x39: ""SKIP"",      0x3A: ""IPv6-ICMP"",   0x3B: ""IPv6-NoNxt"",",3,,,,,,,,,,
g.write('preproc_batch_tops.csh data.in dem.grd 1\n'),3,,,,,,,,,,
'blue_down',3,,,,,,,,,,
cmd = b''.join((,3,,,,,,,,,,
return module,3,,,,,,,,,,
"if self._physical_ev3._introspection[""sensors""] \",3,,,,,,,,,,
"name.decode(""utf8""),",3,,,,,,,,,,
WARNING_BATTLOW = b'\x40',3,,,,,,,,,,
OPEN_READ = b'\x01',3,,,,,,,,,,
''',3,,,,,,,,,,
def _check_acknowledge(self) -> bool:,3,,,,,,,,,,
"f'{"" ""*self._incomplete_len(progress)}] {progress}%',",3,,,,,,,,,,
"self.parser.add_argument(""-t"", ""--rdtype"", type=str, default=1, help=""Query type."")",3,,,,,,,,,,
"self.parser.add_argument(""-p"", ""--port"", type=int, default=3389, help=""Target port (defaults to 3389)."")",3,,,,,,,,,,
"self.parser.add_argument(""-s"", ""--source"", type=str, default=None, help=""Source address. The default is the wildcard address."")",3,,,,,,,,,,
"name.add_argument(""--sort"", type = str, metavar = ""option"", default = ""traffic"", choices = [""traffic"", ""relevance"", ""employees""], help = ""Controls how results will be sorted. There are three options: traffic (default): Sort high-traffic domains to the top; relevance: Sort by how closely the company name matches; employees: Sort companies with many employees to the top."")",3,,,,,,,,,,
"assert 'tones' in song, \",3,,,,,,,,,,
"(""d'"", 1),",3,,,,,,,,,,
"def broadcast(self, data, source: socket = None):",3,,,,,,,,,,
"self.parser.add_argument(""-a"", ""--any"", action=""store_true"", help = ""Try executing an ANY metaquery."")",3,,,,,,,,,,
"value = (""\n"" + ("" "" * len(s))).join(sorted([i.decode(""ascii"", errors=""replace"") if isinstance(i, bytes) else",3,,,,,,,,,,
"dump_command.add_argument('-a', '--address', default='0x8000000',",3,,,,,,,,,,
""" when writing file "" +",3,,,,,,,,,,
"epilog: str = """"",3,,,,,,,,,,
"""duration needs to be a number""",3,,,,,,,,,,
SICON_BT_CONNECTED = b'\x0A',3,,,,,,,,,,
author = 'Christoph Gaukel',3,,,,,,,,,,
print('Erasing whole memory...'),3,print('Erasing,,,,,,,,,print('Erasing
SICON_BATT_0 = b'\x05',3,,,,,,,,,,
"btn2=tk.Button(self, text=""Done"",",3,,,,,,,,,,
"lang: str = 'en',",3,,,,,,,,,,
self.dhumLabel = QLabel('Digital Humidity'),3,,,,,,,,,,
"Battery = namedtuple('Battery', [",3,,,,,,,,,,
"actions.add_argument(""-l"", ""--list"", type = str, nargs = ""?"", const = """", metavar = ""DIR"", help = ""List available programs."")",3,,,,,,,,,,
"'channel must be one of (1, 2, 3, 4)'",3,,,,,,,,,,
"actions.add_argument(""-p"", ""--phone"", type = str, metavar = ""number"", help = ""Request information about a specific person by phone."")",3,,,,,,,,,,
DATA_RAW = b'\x12'  # Raw (used in opINPUT_READEXT),3,,,,,,,,,,
"x,y1,y2,y3,y4 = eachLine.split(',')",3,,,,,,,,,,
"b''.join([(size - 1).to_bytes(1, 'big'), self._checksum(size - 1)]))",3,,,,,,,,,,
elif op == '<=':,3,,,,,,,,,,
def polarity_right(self) -> int:,3,,,,,,,,,,
SYSTEM_UNKNOWN_HANDLE = b'\x01',3,,,,,,,,,,
def ramp_down(self) -> int:,3,,,,,,,,,,
@_('NAME'),3,,,,,,,,,,
"""end of file "" +",3,,,,,,,,,,
"ramp_up_time=self._current_movement['ramp_up_time'],",3,,,,,,,,,,
"""port_left needs to be one of (PORT_A, PORT_B, PORT_C, PORT_D)""",3,,,,,,,,,,
port_settings['timeout'] = 5 * 60,3,,,,,,,,,,
"print(""[!] Unexpected EOF receiving record payload: Server closed connection!"", color = ""red"")",3,"print(""[!]",,,,,,,,,"print(""[!]"
target_pos_inner = cur_mov['target_motor_pos'][1],3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][PORT_1][""type""],",3,,,,,,,,,,
opTimer_Wait = b'\x85'  # TIMER,3,,,,,,,,,,
"print(f"" -  Packed Address:          {mac.packed}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"domain = self.parser.add_argument_group(""Domain Lookup"")",3,,,,,,,,,,
"import dns.query, dns.zone",3,,,,,,,,,,
tmp=tmp+EOF_check[i]+'  ',3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][PORT_4][""type""],",3,,,,,,,,,,
LBRACE = r'\{',3,,,,,,,,,,
) -> bytes:,3,,,,,,,,,,
AND = r'\&',3,,,,,,,,,,
def clear(self) -> None:,3,,,,,,,,,,
"ramp_down: int,",3,,,,,,,,,,
if path.endswith('.rsf'):,3,,,,,,,,,,
def distance(self) -> float:,3,,,,,,,,,,
for n in range(4),3,,,,range(,,,,,,range(
"if server: answer = self.query(server.groups()[0].strip(), 43)",3,,,,,,,,,,
"clearance = vin(""Clearance"", ""?"", units=""in"")",3,,,,,,,,,,
super().__del__(),3,,,,,,,,,,
if 'last' in self._current_movement:,3,,,,,,,,,,
self.atemLabel2 = QLabel('Analog Temperature2'),3,,,,,,,,,,
@_('param'),3,,,,,,,,,,
"def verbosity(self, value: int):",3,,,,,,,,,,
HW_BT = b'\x02',3,,,,,,,,,,
opKeep_Alive = b'\x90'  # UI,3,,,,,,,,,,
"'op': 'Step_Speed',",3,,,,,,,,,,
from datetime import datetime,3,,,,,,,,,,
"ax1.plot(xar,yar3,label='Digital Temperature',linewidth=2)",3,,,,,,,,,,
opOutput_Clr_Count = b'\xB2',3,,,,,,,,,,
if answer:,3,,,,,,,,,,
self._current_movement['last_position'] = current_position,3,,,,,,,,,,
LOAD_IMAGE = b'\x08',3,,,,,,,,,,
"if css: url += ""&css="" + css",3,,,,,,,,,,
self.listLabel3 = QLabel(''),3,,,,,,,,,,
NAME['continue'] = CONTINUE,3,,,,,,,,,,
"timeout: int = None, blocking: bool = False, proxy: str = """", rdns: bool = True):",3,,,,,,,,,,
),3,,,,,,,,,,
LED_LR = b'\x03'  # Left red,3,,,,,,,,,,
"0x73: ""L2TP"",      0x74: ""DDX"",         0x75: ""IATP"",",3,,,,,,,,,,
"brake: bool = False,",3,,,,,,,,,,
"assert 0 <= value <= 120, ""sleep must be between 0 and 120""",3,,,,,,,,,,
"from core.modules.console import print, hexdump",3,,,,,,,,,,
def close(self) -> NoReturn:,3,,,,,,,,,,
g.write('preproc_batch_tops_esd.csh data.in dem.grd 2\n'),3,,,,,,,,,,
"""delta_time must be positive""",3,,,,,,,,,,
SYSTEM_UNKNOWN_ERROR = b'\x0A',3,,,,,,,,,,
LED = b'\x1B',3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][PORT_B_SENSOR][""type""],",3,,,,,,,,,,
"shaft_mmc = vin(""Shaft MMC"", ""?"", units=""in"")",3,,,,,,,,,,
"elif isinstance(obj, (bytes, bytearray)):",3,,,,,,,,,,
"if url.scheme == ""xmpp"":",3,,,,,,,,,,
"""error "" +",3,,,,,,,,,,
self.atemVal2 = QLabel(str(y2) +  ' °' ),3,,,,,,,,,,
"print( ""    - Address:      {}"".format(""\n                    "".join(info[""address""])), dark=True)",3,"print( """,,,,,,,,,"print( """
ICON_BLUETOOTH = b'\x16',3,,,,,,,,,,
tmp=glob.glob(info+'/manifest.safe'),3,,,,,,,,,,
OFF = b'\x04',3,,,,,,,,,,
"value = self.builder.fcmp_ordered('>=',lhs,rhs)",3,,,,,,,,,,
round(cur_mov['target_motor_pos'][0]) -,3,,,,,,,,,,
NORMAL_ICON = b'\x00'  # 24x12_Files_Folders_Settings.bmp,3,,,,,,,,,,
SET_BUSY = b'\x16',3,,,,,,,,,,
"'write unprotect': 0x73,",3,,,,,,,,,,
"return struct.unpack('<i', reply)[0]",3,,,,,,,,,,
"0x66: ""PNNI"",      0x67: ""PIM"",         0x68: ""ARIS"",",3,,,,,,,,,,
WARN_BATT = b'\x09',3,,,,,,,,,,
tmp=glob.glob(info+'/annotation/*'+iw+'*'+polar+'*.xml'),3,,,,,,,,,,
"math.copysign(1, self._current_movement['speed'])",3,,,,,,,,,,
"ns = self.query(self.query(qname, ""NS"")[0].to_text()[:-1])[0].to_text()",3,,,,,,,,,,
"def _complete_len(self, progress: int) -> int:",3,,,,,,,,,,
"print(f"" -  Descriptor Hash: {service.secret_id_part}"")",3,"print(f""",,,,,,,,,"print(f"""
opUI_Button = b'\x83',3,,,,,,,,,,
opDivF = b'\x1F',3,,,,,,,,,,
"pack('H', size),",3,,,,,,,,,,
"""data needs to be of type bytes""",3,,,,,,,,,,
"self._introspection[""fw_build""] = fw_build.split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
GET_PRGRESULT = b'\x18',3,,,,,,,,,,
GET_INCOMING = b'\x13',3,,,,,,,,,,
"'name',",3,,,,,,,,,,
if self.conButton.text() == 'Measure' and port_serial != '':,3,,,,,,,,,,
TYPE_SOUND = b'\x02',3,,,,,,,,,,
"assert isinstance(value, str), ""name needs to be of type str""",3,,,,,,,,,,
data = b'',3,,,,,,,,,,
start_pos_outer = cur_mov['start_motor_pos'][0],3,,,,,,,,,,
"answer = resolver.query(arguments.pop(""query""), **kwargs)",3,,,,,,,,,,
"'void':ir.VoidType(),",3,,,,,,,,,,
"g.write(""awk 'NR>1 {print $0}' < ../raw_orig/""",3,,,,,,"print $0}' < ../raw_orig/""",,,,"print $0}' < ../raw_orig/"""
"output.append(int("""".join(map(str, binary)), 2))",3,,,,,,,,,,
"elif shaft_lmc == ""?"" and hole_lmc != ""?"" and clearance !=""?"":",3,,,,,,,,,,
"assert self._current_movement['op'] == 'Time_Speed', \",3,,,,,,,,,,
opJr_Lteq32 = b'\x76',3,,,,,,,,,,
def sensors(self) -> Sensors:,3,,,,,,,,,,
"return ('Return',{'value':p.expr})",3,,,,,,,,,,
"elif tone.startswith(""e""):",3,,,,,,,,,,
"label='min. day interval',",3,,,,,,,,,,
FLOATVALUE = b'\x02',3,,,,,,,,,,
ipv6 = True,3,,,,,,,,,,
self._send_command(self._COMMAND['get id']),3,,,,,,,,,,
os.chdir('../raw_orig'),3,,,,,,,,,,
"(tmp[i:i + 2] for i in range(0, len(tmp), 2))",3,,,,range(,,,,,,range(
self.conButton = QPushButton('Measure'),3,,,,,,,,,,
def speed(self) -> int:,3,,,,,,,,,,
"fits = json.load(open('betterfits.json', 'r'))",3,,,,,,,,,,
mac = netaddr.EUI(int(self.arguments.mac) if self.arguments.mac.isdigit() else self.arguments.mac),3,,,,,,,,,,
"'int':ir.IntType(32),",3,,,,,,,,,,
"address = address.split(""."")[0]",3,,,,,,,,,,
opCp_GteqF = b'\x5B',3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""] \",3,,,,,,,,,,
"(""f'"", 1)",3,,,,,,,,,,
GET_BUMPS = b'\x1F',3,,,,,,,,,,
"ax1.plot(xar,yar4,label='Humidity',linewidth=2)",3,,,,,,,,,,
VALUE8 = b'\x09',3,,,,,,,,,,
FILLRECT = b'\x09',3,,,,,,,,,,
'o',3,,,,,,,,,,
"""duration must be at least one millisecond""",3,,,,,,,,,,
TO_WIFI = b'\x12',3,,,,,,,,,,
"nextCmd(*args, ObjectType(ObjectIdentity(""SNMPv2-MIB""))))",3,,,,,,,,,,
opMailbox_Ready = b'\xDC',3,,,,,,,,,,
if platform.system() == 'Darwin':,3,,,,,,,,,,
opUI_Flush = b'\x80'  # UI,3,,,,,,,,,,
SYSTEM_CORRUPT_FILE = b'\x03',3,,,,,,,,,,
TOTALSIZE = b'\x11',3,,,,,,,,,,
"certificate.get(""subject_dn""))",3,,,,,,,,,,
GET_ERROR = b'\x02',3,,,,,,,,,,
"@pytest.fixture(scope='module', params=['memory_map/stm32f407.json'])",3,,,,,,,,,,
"return utils.data('Number',int(p.NUMBER)*-1)",3,,,,,,,,,,
"""ramp_up must be positive""",3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in reply[6:7]) +,3,,,,,,,,,,
"def temperament(self, value: int):",3,,,,,,,,,,
FAVOUR_ITEMS = b'\x0A',3,,,,,,,,,,
opTimer_Ready = b'\x86',3,,,,,,,,,,
"'back': back,",3,,,,,,,,,,
ADDRESS = b'\x0D',3,,,,,,,,,,
TO_MANUAL = b'\x07',3,,,,,,,,,,
'_control': True,3,,,,,,,,,,
"actions.add_argument(""-d"", ""--domain"", type = str, metavar = ""name"", help = ""Request information about a specific company by domain."")",3,,,,,,,,,,
"MotorPositions = namedtuple('MotorPositions', [",3,,,,,,,,,,
"timeout=8, port=53, af=None, source=None, source_port=0, ignore_unexpected=False, one_rr_per_rrset=False, tcp=False):",3,,,,,,,,,,
"(""c''"", .75),",3,,,,,,,,,,
opError = b'\x00'  # VM,3,,,,,,,,,,
opFilename = b'\xC6',3,,,,,,,,,,
def cont(self) -> None:,3,,,,,,,,,,
class EV3:,3,,,,,,,,,,
elif branch[0] == 'If':,3,,,,,,,,,,
"def read(self, address: int = None, size: int = None,",3,,,,,,,,,,
GET_PIN = b'\x05',3,,,,,,,,,,
"self.polar_tmp=['vv','vh','hv','hh']",3,,,,,,,,,,
WRITE_BYTES = b'\x1D',3,,,,,,,,,,
elif op == '%':,3,,,,,,,,,,
TEXT = b'\x05',3,,,,,,,,,,
GET_IP = b'\x1B',3,,,,,,,,,,
opInput_Sample = b'\x97',3,,,,,,,,,,
"print("" -  HS Port Map:"")",3,"print(""",,,,,,,,,"print("""
GET_VBATT = b'\x01',3,,,,,,,,,,
print(fits),3,print(fits),,,,,,,,,print(fits)
"_fields_ = [(""ihl"", c_ubyte, 4),",3,,,,,,,,,,
"path + '.rsf',",3,,,,,,,,,,
'brake': brake,3,,,,,,,,,,
"btn2=tk.Button(self, text="" Next >"",",3,,,,,,,,,,
"if keyPeople: url += ""&keyPeople=true""",3,,,,,,,,,,
type_str = 'EV3_MEDIUM_MOTOR',3,,,,,,,,,,
TYPE_SDCARD = b'\x10',3,,,,,,,,,,
"rdtype = getattr(dns.rdatatype, rdtype)",3,,,,,,,,,,
"STD = 'STD'  # reply if global_mem, wait for reply",3,,,,,,,,,,
"speed: int,",3,,,,,,,,,,
"'erase': 0x43,",3,,,,,,,,,,
import tkinter as tk,3,,,,,,,,,,
opOutput_Step_Sync = b'\xB0',3,,,,,,,,,,
opCp_Lteq32 = b'\x56',3,,,,,,,,,,
"'left',",3,,,,,,,,,,
'master_image = S1_'+Master_date+'_ALL_F'+iw[-1]),3,,,,,,,,,,
opCom_Get = b'\xD3',3,,,,,,,,,,
) -> None:,3,,,,,,,,,,
"'|', end=''",3,,,,,,,,,,
opRl8 = b'\x2C',3,,,,,,,,,,
"@_retry(_RETRIES, 'send dfu command', _serial_flush)",3,,,,,,,,,,
opOutput_Speed = b'\xA5',3,,,,,,,,,,
OR = r'\|',3,,,,,,,,,,
'xx:xx:xx.xxxxxx Sent 0x|06:00|2D:00|80|00:00|01|' + '\n',3,,,,,,,,,,
DEL_CRLF = b'\x07'  # Use return+line feed as delimiter,3,,,,,,,,,,
LED_RED_FLASH = b'\x05',3,,,,,,,,,,
"name.add_argument(""--location"", type = str, help = ""If supplied, only companies matching given location will be returned. The location is a general location where one can include any combination of locality, region or country as input. For example, --location=Denver, CO."")",3,,,,,,,,,,
"QMessageBox.about(self, ""Info"", ""File was saved at "" + dst)",3,,,,,,,,,,
while word:,3,,,,,,,,,,
"for i in range(0, len(data), 2):",3,,,,range(,,,,,,range(
DEL_SUBFOLDER = b'\x18',3,,,,,,,,,,
"'green',",3,,,,,,,,,,
MODE_KEEP = b'\x21',3,,,,,,,,,,
elif op == '^':,3,,,,,,,,,,
CLEAN = b'\x01',3,,,,,,,,,,
Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+',3,,,,,,,,,,
"host: str = None,",3,,,,,,,,,,
LED_GREEN_PULSE = b'\x07',3,,,,,,,,,,
@_('FLOAT'),3,,,,,,,,,,
opCp_EqF = b'\x4F',3,,,,,,,,,,
"self.titlePage1 = QLabel("" Biology Experiment List"")",3,,,,,,,,,,
SET_ERROR = b'\x01',3,,,,,,,,,,
"""gatewaycredentialssource:i:4"", ""gatewayprofileusagemethod:i:0"",",3,,,,,,,,,,
"'Directory for POD precise orbit ephemerides (EOF) ',",3,,,,,,,,,,
''',3,,,,,,,,,,
opObject_Return = b'\x08',3,,,,,,,,,,
"value = self.builder.icmp_signed('<',lhs,rhs)",3,,,,,,,,,,
"0x21: ""DCCP"",      0x22: ""3PC"",         0x23: ""IDPR"",",3,,,,,,,,,,
"""reached end of file "" +",3,,,,,,,,,,
os.makedirs('topo'),3,,,,,,,,,,
self._socket.send(msg.encode('utf-8')),3,,,,,,,,,,
TO_COPY = b'\x14',3,,,,,,,,,,
"self.variables = {'printf':(func,ir.IntType(32))}",3,,,,,,,,,,
'mac_adr',3,,,,,,,,,,
"print("" -  Signature: "")",3,"print(""",,,,,,,,,"print("""
reply_1_str = ':'.join('{:02X}'.format(byte) for byte in reply_1),3,,,,,,,,,,
opAnd32 = b'\x26',3,,,,,,,,,,
"if arguments.get(""tcp""):",3,,,,,,,,,,
"data = b''.join([data, self._read_memory_chunk(offset, part_size)])",3,,,,,,,,,,
return (input(input_prompt) or defvalue),3,,,,,,,,,,
opOutput_Ready = b'\xAA',3,,,,,,,,,,
"'expr LE expr',",3,,,,,,,,,,
"""promptcredentialonce:i:1"", ""use redirection server name:i:0"",",3,,,,,,,,,,
"'<3i2B',",3,,,,,,,,,,
def state(self) -> GyroState:,3,,,,,,,,,,
"output += word + "" """,3,,,,,,,,,,
"polarity_right: int = 1,",3,,,,,,,,,,
"'get version': 0x0,",3,,,,,,,,,,
'sphinx.ext.viewcode',3,,,,,,,,,,
end=''),3,,,,,,,,,,
"fingerprint, common_name, names, sdn = (certificate[""fingerprint_sha256""],",3,,,,,,,,,,
NAME['until'] = UNTIL,3,,,,,,,,,,
def position(self) -> Number:,3,,,,,,,,,,
"ramp_down=self._current_movement['ramp_down'],",3,,,,,,,,,,
"process.start(False, "" -  "")",3,,,,,,,,,,
GET_USBSTICK = b'\x1F',3,,,,,,,,,,
"*struct.unpack('<3i', reply)",3,,,,,,,,,,
_control: bool = False,3,,,,,,,,,,
for i in range (len(self.iw_tmp)):,3,,,,range (,,,,,,range (
ICON_INFO = b'\x17',3,,,,,,,,,,
"value = self.builder.fcmp_ordered('>',lhs,rhs)",3,,,,,,,,,,
url = urllib.parse.urlsplit(self.arguments.url),3,,,,,,,,,,
"""ramp_down_time must be a number""",3,,,,,,,,,,
ICON_CONNECTIONS = b'\x0B',3,,,,,,,,,,
style.use('ggplot'),3,,,,,,,,,,
"print(f"" -  Vendor Info.:"")",3,"print(f""",,,,,,,,,"print(f"""
"('nonassoc', NE, LT, LE, GT, GE, EQEQ, XOR, OR),",3,,,,,,,,,,
"print(""[!] Server returned error, likely not vulnerable."", color = ""red"")",3,"print(""[!]",,,,,,,,,"print(""[!]"
"(""fragment_offset"", c_ushort, 13),",3,,,,,,,,,,
params = branch[1]['params'],3,,,,,,,,,,
"""value is not an allowed port""",3,,,,,,,,,,
"self.parser.add_argument(""-l"", ""--list"", action=""store_true"", help=""List active hidden services."")",3,,,,,,,,,,
"struct.pack('<HH', len(ops) + 5, msg_cnt),",3,,,,,,,,,,
SELECT_FONT = b'\x11',3,,,,,,,,,,
"0x06: ""TCP"",       0x07: ""CBT"",         0x08: ""EGP"",",3,,,,,,,,,,
"return('VarAssign',{'value':value,'name':name})",3,,,,,,,,,,
"txt: str,",3,,,,,,,,,,
opJr_Neq8 = b'\x70',3,,,,,,,,,,
'stopped' in self._current_movement,3,,,,,,,,,,
[port_motor_input(self._port_right)]['used_by'] = self,3,,,,,,,,,,
INIT8 = b'\x08',3,,,,,,,,,,
"""allowed verbosity values are: 0, 1 or 2""",3,,,,,,,,,,
opInput_Read = b'\x9A',3,,,,,,,,,,
self.ser.write(b'x'),3,,,,,,,,,,
"self.parser.add_argument(""query"", type=str, help=""Query string."")",3,,,,,,,,,,
cur_mov['last_motor_pos'] = cur_mov['start_motor_pos'],3,,,,,,,,,,
print('raw value: ' + val),3,print('raw,,,,,,,,,print('raw
GET_ID = b'\x0C',3,,,,,,,,,,
"print(""File was saved at "" + dst)",3,"print(""File",,,,,,,,,"print(""File"
"'step1_left': step1_left,",3,,,,,,,,,,
opJr_Gt16 = b'\x69',3,,,,,,,,,,
"sentval = ""OK""",3,,,,,,,,,,
"ev3_obj: EV3 = None,",3,,,,,,,,,,
opJr_Nan = b'\x43',3,,,,,,,,,,
"struct.pack('<BH', handle, part_size)  # HANDLE, SIZE",3,,,,,,,,,,
PORT_D_SENSOR = b'\x13',3,,,,,,,,,,
for message in messages:,3,,,,,,,,,,
opMulF = b'\x1B',3,,,,,,,,,,
info2=str(info2),3,,,,,,,,,,
"value = self.builder.icmp_signed('==',lhs,rhs)",3,,,,,,,,,,
'expr OR expr'),3,,,,,,,,,,
"@_retry(_RETRIES, 'DFU init', _serial_flush)",3,,,,,,,,,,
"rtp_list.append(rtp.payload.split("":""))",3,,,,,,,,,,
"CE = 0b11     # Congestion Encountered, CE",3,,,,,,,,,,
def beacons(self) -> Tuple[Beacon]:,3,,,,,,,,,,
"""tempo"": 130,",3,,,,,,,,,,
"assert isinstance(led_pattern, bytes), \",3,,,,,,,,,,
"rdata = b""""",3,,,,,,,,,,
"""temperament needs to be an int""",3,,,,,,,,,,
if pretty_keys:,3,,,,,,,,,,
def rgb_white_balance(self) -> RawRGBColor:,3,,,,,,,,,,
"rb2.config(state=""disabled"")",3,,,,,,,,,,
"if ""v4"" in val:",3,,,,,,,,,,
print(),3,print(),,,,,,,,,print()
GET_FW_BUILD = b'\x0B',3,,,,,,,,,,
print(f'Erasing {args.size} bytes from {args.address}...'),3,print(f'Erasing,,,,,,,,,print(f'Erasing
"'<2i',",3,,,,,,,,,,
def rgb(self) -> RGBColor:,3,,,,,,,,,,
"""tread needs to be positive""",3,,,,,,,,,,
VALUE_FORMATTED = b'\x0B',3,,,,,,,,,,
opMove32_32 = b'\x3A',3,,,,,,,,,,
opMul32 = b'\x1A',3,,,,,,,,,,
"print(f"" -  Descriptor Hash: {ehs.secret_id_part}"")",3,"print(f""",,,,,,,,,"print(f"""
self.groupBox2 = QGroupBox(''),3,,,,,,,,,,
font='Helvetica 12 bold italic'),3,,,,,,,,,,
FAVOUR_ITEM = b'\x0B',3,,,,,,,,,,
"'Select the dem.grd file ',",3,,,,,,,,,,
S1AB=S1AB[0].split('/'),3,,,,,,,,,,
self._max_rdclass_length = max([len(rdclass) for rdclass in self.rdclasses]),3,,,,,,,,,,
"*struct.unpack('<2fB', reply)",3,,,,,,,,,,
"'x',",3,,,,,,,,,,
"print(f""[+] {hs.address} ({hs.descriptor_id}):"", (""Hidden Service not running in the first place ..."", ""yellow"") if not discontinued else ""Hidden Service successfully discontinued and closed."")",3,"print(f""[+]",,,,,,,,,"print(f""[+]"
"""tempo"": 100,",3,,,,,,,,,,
"while_loop_otherwise = self.builder.append_basic_block(""while_loop_otherwise""+str(self.i))",3,,,,,,,,,,
TEXTBOX = b'\x20',3,,,,,,,,,,
CHECK = b'\x14',3,,,,,,,,,,
"pcap_file = (""/Users/bwarner/PycharmProjects/Chapter2_Exercises/%s"" % self.pcap)",3,,,,,,,,,,
"print("" -  "" + ""\n -  "".join(page.ul.stripped_strings), dark=True)",3,"print(""",,,,,,,,,"print("""
"assert 0 <= value <= 100, ""volume must be between 0 and 100""",3,,,,,,,,,,
def id(self) -> bytes:,3,,,,,,,,,,
"struct.pack('<H', 1012),  # SIZE",3,,,,,,,,,,
"""song must have a key 'led_sequence'""",3,,,,,,,,,,
ICON_XED = b'\x0A',3,,,,,,,,,,
autodoc_member_order = 'groupwise',3,,,,,,,,,,
GET_RAW = b'\x0B',3,,,,,,,,,,
"return self._physical_ev3._introspection[""volume""]",3,,,,,,,,,,
lock = threading.Lock(),3,,,,,,,,,,
"direction = str(vin(""Convert [c]urrent timezone to other timezone, or (o)ther timezone to current, or (q)uit"", ""c""))",3,,,,,,,,,,
os.chdir('raw'),3,,,,,,,,,,
print('Validating firmware...'),3,print('Validating,,,,,,,,,print('Validating
"@_retry(_RETRIES, 'get mcu id', _serial_flush)",3,,,,,,,,,,
except Exception as e:,3,,,,,,,,,,
"tk.Button(self, text=""Browse"", command=lambda *args:browse(2)),",3,,,,,,,,,,
opTimer_Read = b'\x87',3,,,,,,,,,,
"""delta_time needs to be positive""",3,,,,,,,,,,
"self.session = Session(""http://www.crimeflare.com/cgi-bin/"")",3,,,,,,,,,,
GET_NETWORK = b'\x0E',3,,,,,,,,,,
"programs = len(list(filter(lambda x: isinstance(x[1], str), value.items())))",3,,,,,,,,,,
READY_PCT = b'\x1B',3,,,,,,,,,,
opMove16_8 = b'\x34',3,,,,,,,,,,
READ_SIZE = b'\x0F',3,,,,,,,,,,
"if address.endswith("".onion""):",3,,,,,,,,,,
SET_VOLUME = b'\x05',3,,,,,,,,,,
opInput_Test = b'\x9B',3,,,,,,,,,,
"test,Type = self.visit_value(branch[1]['test'])",3,,,,,,,,,,
import re,3,,,,,,,,,,
"value = getattr(record, name)",3,,,,,,,,,,
"elif tone.startswith(""b""):",3,,,,,,,,,,
step3 = cur_mov['step3_right'],3,,,,,,,,,,
def connect_bluetooth(self) -> int:,3,,,,,,,,,,
assert dump.count(b'\xff') == len(dump),3,,,,,,,,,,
opOutput_Time_Sync = b'\xB1',3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][PORT_C_SENSOR][""type""],",3,,,,,,,,,,
class ProgressBar:,3,,,,,,,,,,
LED_RG = b'\x02'  # Right green,3,,,,,,,,,,
"length, rate = unpack('>2H', data[2:6])",3,,,,,,,,,,
"'-p', '--port', default='/dev/ttyUSB0',",3,,,,,,,,,,
"""direct command {:02X}:{:02X} replied error"".format(",3,,,,,,,,,,
"literals = {',',';'}",3,,,,,,,,,,
S1AB=S1AB[0].split('/'),3,,,,,,,,,,
STOP = b'\x04'  # Stopped,3,,,,,,,,,,
"(""a'"", .5),",3,,,,,,,,,,
Binnumber = r'0[bB](?:_?[01])+',3,,,,,,,,,,
elif branch[0] == 'FuncCall':,3,,,,,,,,,,
print('Error Serial2'),3,print('Error,,,,,,,,,print('Error
PORT_3 = b'\x02',3,,,,,,,,,,
class Compiler:,3,,,,,,,,,,
DEVCMD_RESET = b'\x11'  # UART device reset,3,,,,,,,,,,
LINE = b'\x03',3,,,,,,,,,,
FILETYPE_UNKNOWN = b'\x00',3,,,,,,,,,,
"(""c''"", 2),",3,,,,,,,,,,
r'^Serial-Number: (\w*)\s\n' +,3,,,,,,,,,,
SYSTEM_NO_PERMISSION = b'\x05',3,,,,,,,,,,
"progress_update: Callable = lambda *_: None, *,",3,,,,,,,,,,
CAL_MAX = b'\x08',3,,,,,,,,,,
'_control': True,3,,,,,,,,,,
"kwargs = {""proto"": self.arguments.protocol, ""timeout"": self.arguments.timeout, ""blocking"": self.arguments.blocking}",3,,,,,,,,,,
path = '../prjs/sound/txt',3,,,,,,,,,,
"def __init__(self, family: AddressFamily = AddressFamily.AF_INET, type: SocketKind = SocketKind.SOCK_STREAM, proto: int = 0, fileno: int = None,",3,,,,,,,,,,
msg = 'GET /target?sn=' + serial_number + 'VMTP1.0\n' + \,3,,,,,,,,,,
"socket.inet_pton(socket.AF_INET6, address)",3,,,,,,,,,,
@_('LPAREN expr RPAREN'),3,,,,,,,,,,
"__all__ = [""EPH_HS""]",3,,,,,,,,,,
ICON_WIFI = b'\x0A',3,,,,,,,,,,
[port_motor_input(self._port)]['used_by'] = self,3,,,,,,,,,,
USB = 'USB',3,,,,,,,,,,
"certificate.get(""names"", []),",3,,,,,,,,,,
"print(f"" -  Supported Versions: {', '.join(str(v) for v in service.protocol_versions)}"")",3,"print(f""",,,,,,,,,"print(f"""
"'bool':ir.IntType(1),",3,,,,,,,,,,
"print(""[i] Hidden Service Descriptive Info.:"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"raise NoEV3('multiple EV3 found, you need to set argument host')",3,,,,,,,,,,
g.write(tmp+'\n'),3,,,,,,,,,,
[self._port]['used_by'] = None,3,,,,,,,,,,
"def add_argument_group(parser: argparse.ArgumentParser, address_required: bool = False):",3,,,,,,,,,,
LED_ORANGE_FLASH = b'\x06',3,,,,,,,,,,
filename1='sensor_output.csv',3,,,,,,,,,,
NAME['break'] = BREAK,3,,,,,,,,,,
NUMBER_TO_STRING = b'\x09',3,,,,,,,,,,
"self._physical_ev3._introspection[""mem_total""],",3,,,,,,,,,,
"Lb=tk.Listbox(self, width=14, selectmode='multiple')",3,,,,,,,,,,
"tk.Button(self, text=""Browse"", command=lambda *args:browse(5))]",3,,,,,,,,,,
"print(""[i] Received heartbeat response:"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
def bumps(self) -> int:,3,,,,,,,,,,
"print("" -  Introduction Points:"")",3,"print(""",,,,,,,,,"print("""
DATA_32 = b'\x02'  # DATA32 (don't change),3,,,,,,,,,,
"with open(path_source, 'rb') as f:",3,,,,,,,,,,
if self.arguments.list:,3,,,,,,,,,,
"client.send(inpt + (b"""" if inpt.endswith(EOL) else EOL))",3,,,,,,,,,,
"*,",3,,,,,,,,,,
FILL = b'\x06',3,,,,,,,,,,
BTTYPE_UNKNOWN = b'\x06'  # Bluetooth type UNKNOWN,3,,,,,,,,,,
for ns in nameservers:,3,,,,,,,,,,
opCom_Writedata = b'\xD2',3,,,,,,,,,,
"dump_command.add_argument('-s', '--size', default=None,",3,,,,,,,,,,
"nameservers = [ns.to_text() for ns in self.resolver.query(domain, ""NS"")]",3,,,,,,,,,,
"print(f""[i] Request results for Domain Name based Company Lookup:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"speed: int = 10,",3,,,,,,,,,,
"self.parser.add_argument(""url"", type = str, help = ""Target URL."")",3,,,,,,,,,,
params_type = [self.type_map[x['type']] for x in params],3,,,,,,,,,,
port_settings['timeout'] = self._DEFAULT_PARAMETERS['timeout'],3,,,,,,,,,,
"self.parser.add_argument(""--serial"", type=int, default=None, help=""The SOA serial number to use as the base for an IXFR diff sequence (only meaningful if rdtype == \""IXFR\"")."")",3,,,,,,,,,,
"self.parser.add_argument(""-r"", ""--retry-servfail"", action=""store_true"", help=""Retry a nameserver if it says SERVFAIL."")",3,,,,,,,,,,
assert ':'.join('{:02X}'.format(byte) for byte in msg_cnt_2) == '30:00',3,,,,,,,,,,
"""global_mem has a maximum of 1019""",3,,,,,,,,,,
"self.parser.add_argument(""target"", type=str, help=""Target hidden service's address."")",3,,,,,,,,,,
opCp_Lt8 = b'\x44'  # COMPARE,3,,,,,,,,,,
self.goBtn1.setToolTip('Click to Enter <b>Calorimeter</b> experiment!'),3,,,,,,,,,,
except Exception as e:,3,,,,,,,,,,
"if ""file"" not in kwargs:",3,,,,,,,,,,
"print(""[i] CloudFlare Search Results:"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
def read_protection_status(self) -> bytes:,3,,,,,,,,,,
"print(""You must enter at least 2 items! (4 values total)"")",3,"print(""You",,,,,,,,,"print(""You"
"value.split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
CHAR_ERROR = b'\x16',3,,,,,,,,,,
"self.del_dir('../prjs/sound', secure=False)",3,,,,,,,,,,
"print(""[i] Sending STARTTLS Command ..."")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"""remoteapplicationmode:i:0"", ""alternate shell:s:"",",3,,,,,,,,,,
EXP = b'\x01'  # !< e^x r = expf(x),3,,,,,,,,,,
SET_MOVEUP = b'\x09',3,,,,,,,,,,
def verbosity(self) -> int:,3,,,,,,,,,,
return False,3,,,,,,,,,,
"print(""\nFinished outputing raw audio: %s"" % out_file)",3,"print(""\nFinished",,,,,,,,,"print(""\nFinished"
if payload is None:,3,,,,,,,,,,
"certificates = [{key.rsplit(""."", 1)[-1]: value for key, value in cert.items()} for cert in censys.certificates.search(f""{self.arguments.domain} and tags: trusted"", fields = fields) if cert]",3,,,,,,,,,,
"""callback must be a callable""",3,,,,,,,,,,
'no controlled movement',3,,,,,,,,,,
port_str = 'PORT_B',3,,,,,,,,,,
for i in range(8):,3,,,,range(,,,,,,range(
"(""a'"", 1.5),",3,,,,,,,,,,
turn: int,3,,,,,,,,,,
LED_ORANGE = b'\x03',3,,,,,,,,,,
COLON = r':',3,,,,,,,,,,
GET_SIZE = b'\x01',3,,,,,,,,,,
discontinued = controller.remove_ephemeral_hidden_service(address),3,,,,,,,,,,
opCp_Eq16 = b'\x4D',3,,,,,,,,,,
GET_EVENT = b'\x04',3,,,,,,,,,,
"print(f"" -  {name.ljust(self._max_rdtype_length+1)}"", (str(e), True), color = ""red"")",3,"print(f""",,,,,,,,,"print(f"""
opOutput_Position = b'\xAB',3,,,,,,,,,,
opOr32 = b'\x22',3,,,,,,,,,,
else:,3,,,,,,,,,,
"(master_doc, 'ev3_dc.tex', 'ev3\\_dc Documentation',",3,,,,,,,,,,
SICON_WAIT2 = b'\x07',3,,,,,,,,,,
if type is None:,3,,,,,,,,,,
COMMAND = b'\x0E',3,,,,,,,,,,
reply = ':'.join(,3,,,,,,,,,,
LED_ORANGE_PULSE = b'\x09',3,,,,,,,,,,
"fnty = ir.FunctionType(self.type_map['int'], [ir.IntType(8).as_pointer()], var_arg=True)",3,,,,,,,,,,
"stdin, stdout, stderr = sys.stdin, sys.stdout, sys.stderr",3,,,,,,,,,,
"60 * song[""beats_per_bar""] / song[""tempo""],",3,,,,,,,,,,
"if macromeasures: url += ""&macromeasures=true""",3,,,,,,,,,,
"def hexdump(data: bytes, prefix="""", **pkwargs):",3,,,,,,,,,,
"self,",3,,,,,,,,,,
"def _serial_read(self, amount: int = 0) -> bytes:",3,,,,,,,,,,
"func,_ = self.variables['printf']",3,,,,,,,,,,
SYSTEM_REPLY_OK = b'\x00',3,,,,,,,,,,
"def ramp_down_time(self, value: Number):",3,,,,,,,,,,
"self.parser.add_argument(""-l"", ""--lifetime"", type=int, default=8, help=""The total number of seconds to spend trying to get an answer to the question. If the lifetime expires, a Timeout exception will occur."")",3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""][PORT_A_SENSOR][""type""],",3,,,,,,,,,,
RED = b'\x00',3,,,,,,,,,,
"""proto"": self.arguments.protocol, ""timeout"": self.arguments.timeout, ""blocking"": self.arguments.blocking}",3,,,,,,,,,,
"@_retry(_RETRIES, 'erase', _serial_flush)",3,,,,,,,,,,
"return ('If',{'body':body,'test':test,'orelse':orelse})",3,,,,,,,,,,
"'-acodec', 'pcm_u8',",3,,,,,,,,,,
"self._physical_ev3._introspection[""hw_vers""]",3,,,,,,,,,,
"src2 = resource_path(os.path.join('src', src2a))",3,,,,,,,,,,
'distance',3,,,,,,,,,,
elif op == '==':,3,,,,,,,,,,
""" when reading folder "" +",3,,,,,,,,,,
process.exit(),3,,,,,,,,,,
"def ramp_up(self, value: int):",3,,,,,,,,,,
"self.address = (address + "".onion"" if len(address) == 16 else address).lower()",3,,,,,,,,,,
except:,3,,,,,,,,,,
"""ops must not be empty""",3,,,,,,,,,,
"import urllib.parse, requests, bs4",3,,,,,,,,,,
"'duration': duration,",3,,,,,,,,,,
elif branch[0] == 'Def':,3,,,,,,,,,,
"def request(self, method: str, path: str = """", **kwargs):",3,,,,,,,,,,
"number, target = port.split(""="", 1)",3,,,,,,,,,,
"*,",3,,,,,,,,,,
"@_retry(_RETRIES, 'get dfu version', _serial_flush)",3,,,,,,,,,,
"b'\x00\x01',",3,,,,,,,,,,
TYPE_KEEP = b'\x00',3,,,,,,,,,,
end='',3,,,,,,,,,,
"message = "" "".join(map(str, message))",3,,,,,,,,,,
"return type, version, payload",3,,,,,,,,,,
"'blue_up',",3,,,,,,,,,,
"print(f""    - OUI:     {info['oui']}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
release = '0.9.9',3,,,,,,,,,,
sock.recv(0x400),3,,,,,,,,,,
"transports.add_argument(""-u"", ""--unix"", action=""store_true"", help=""Use the Unix Transport."")",3,,,,,"u"",",,,,,"u"","
tmp='',3,,,,,,,,,,
"assert 'beats_per_bar' in song, \",3,,,,,,,,,,
"if tone == ""p"":",3,,,,,,,,,,
TAN = b'\x0D'  # !<,3,,,,,,,,,,
WRITEMAILBOX = b'\x9E',3,,,,,,,,,,
TYPE_USBSTICK = b'\x20',3,,,,,,,,,,
"return ""\n"".join([f""[IPv{self.version}] [Proto.{self.raw_protocol} ({self.protocol})] {self.source} -> {self.destination}"",",3,,,,,,,,,,
'No WiFi connection to ' +,3,,,,,,,,,,
print('The llvm IR generated is:'),3,print('The,,,,,,,,,print('The
"if ct == ""application/json"":",3,,,,,,,,,,
"distance: Number,",3,,,,,,,,,,
CREATEF = b'\x04',3,,,,,,,,,,
self._current_movement['op'] == 'Speed' and,3,,,,,,,,,,
GET_MINMAX = b'\x1E',3,,,,,,,,,,
"0x30: ""DSR"",       0x31: ""BNA"",         0x32: ""ESP"",",3,,,,,,,,,,
CONNEC_ITEM = b'\x12',3,,,,,,,,,,
if sys.platform.startswith('win'):,3,,,,,,,,,,
"print(f"" -  Hexadecimal Address:     {hex(mac)}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
def any(*choices): return group(*choices) + '*',3,,,,,,,,,,
"if proxy.username: kwargs[""username""] = proxy.username",3,,,,,,,,,,
opMul8 = b'\x18',3,,,,,,,,,,
remain -= len(data),3,,,,,,,,,,
str.encode(path_dest) + b'\x00'    # NAME,3,,,,,,,,,,
if rdtype not in [type for type in dir(dns.rdatatype) if type.isupper()]:,3,,,,,,,,,,
"struct.pack('<I', size),      # SIZE",3,,,,,,,,,,
TO_BLUETOOTH = b'\x11',3,,,,,,,,,,
"'sphinx.ext.coverage',",3,,,,,,,,,,
self.atemVal1 = QLabel(str(y1) +  ' °' ),3,,,,,,,,,,
"), ""concurrent movement in progress""",3,,,,,,,,,,
"def __init__(self, key: str = """", version: int = 2):",3,,,,,,,,,,
INIT16 = b'\x09',3,,,,,,,,,,
"assert port in (PORT_1, PORT_2, PORT_3, PORT_4), ""incorrect port""",3,,,,,,,,,,
"requirements = {""pysnmp""}",3,,,,,,,,,,
"tk.Button(self, text=""Browse"", command=lambda *args:browse(4)),",3,,,,,,,,,,
opRandom = b'\x8E',3,,,,,,,,,,
"units = kwargs.get('units', None)",3,,,,,,,,,,
@_('NAME COLON NAME'),3,,,,,,,,,,
opCom_Read = b'\x91'  # COM,3,,,,,,,,,,
opProgram_Stop = b'\x02',3,,,,,,,,,,
"verbosity: int = None,",3,,,,,,,,,,
"def _write_memory_chunk(self, address: int, data: bytes) -> NoReturn:",3,,,,,,,,,,
GET_ITEM = b'\x13',3,,,,,,,,,,
self._target_position = self._current_movement['target_position'],3,,,,,,,,,,
"return ('Expression',{'op':op,'lhs':lhs,'rhs':rhs})",3,,,,,,,,,,
"return ('FuncCall',{'params':params,'name':name})",3,,,,,,,,,,
SICON_BATT_1 = b'\x04',3,,,,,,,,,,
"pprint(value, depth, excluded_keys, pretty_keys, **pkwargs)",3,,,,,,,,,,
CREATE32 = b'\x03',3,,,,,,,,,,
else 'NXT_TOUCH',3,,,,,,,,,,
@_('IF expr LBRACE statements RBRACE'),3,,,,,,,,,,
NAME = r'[a-zA-Z_][a-zA-Z0-9_]*',3,,,,,,,,,,
opSound = b'\x94'  # SOUND,3,,,,,,,,,,
GET_SUBFOLDER_NAME = b'\x0F',3,,,,,,,,,,
"sock.send(b""\x18\x03\x02\x00\x03\x01@\x00"")",3,,,,,,,,,,
"ehs = tor.EphemeralHiddenService(ports, self.arguments.discard_key, True, self.arguments.private_key, controller)",3,,,,,,,,,,
print('Success!'),3,print('Success!'),,,,,,,,,print('Success!')
start_pos_outer = cur_mov['start_motor_pos'][1],3,,,,,,,,,,
"'expr NE expr',",3,,,,,,,,,,
score = status = None,3,,,,,,,,,,
"polarity_left: int = 1,",3,,,,,,,,,,
"print("" -  Signature: "")",3,"print(""",,,,,,,,,"print("""
elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):,3,,,,,,,,,,
else:,3,,,,,,,,,,
"self._serial_write(0x7f.to_bytes(1, 'big'))",3,,,,,,,,,,
def name(self) -> str:,3,,,,,,,,,,
arg_parser = argparse.ArgumentParser(description='Stm32 uart dfu utility.'),3,,,,,,,,,,
opOutput_Start = b'\xA6',3,,,,,,,,,,
SHORTPRESS = b'\x01',3,,,,,,,,,,
"return self._physical_ev3._introspection[""sleep""]",3,,,,,,,,,,
"""error "" +",3,,,,,,,,,,
"rb1.config(state=""disabled"")",3,,,,,,,,,,
"0x6F: ""IPX-in-IP"", 0x70: ""VRRP"",        0x71: ""PGM"",",3,,,,,,,,,,
ops_set = b''.join((,3,,,,,,,,,,
"if url.scheme == ""smtp"":",3,,,,,,,,,,
CLOSE_LOG = b'\x11',3,,,,,,,,,,
elif op == '!=':,3,,,,,,,,,,
ICON_USB = b'\x03',3,,,,,,,,,,
"Pointfloat = group(r'[0-9](?:_?[0-9])*\.(?:[0-9](?:_?[0-9])*)?',",3,,,,,,,,,,
"assert 0 <= val <= 1024, ""values must be in range [0 - 1024]""",3,,,,,,,,,,
if answer:,3,,,,,,,,,,
raise SensorError('no touch connected at ' + port_str),3,,,,,,,,,,
"""ramp_up must be an int""",3,,,,,,,,,,
SYSTEM_ILLEGAL_PATH = b'\x06',3,,,,,,,,,,
name = branch[1]['name'],3,,,,,,,,,,
elif branch[0] == 'String':,3,,,,,,,,,,
"scale1.config(state=""disabled"")",3,,,,,,,,,,
"self.controller.show_frame(""Step0"")",3,,,,,,,,,,
ICON_OPENFOLDER = b'\x21',3,,,,,,,,,,
if 'last_motor_pos' not in cur_mov:,3,,,,,,,,,,
BACK_BUTTON = b'\x06',3,,,,,,,,,,
def _uart_dfu_init(self) -> NoReturn:,3,,,,,,,,,,
r'\.[0-9](?:_?[0-9])*') + maybe(Exponent),3,,,,,,,,,,
BLUETOOTHPIN = b'\x9F',3,,,,,,,,,,
SICON_BATT_4 = b'\x01',3,,,,,,,,,,
raise NoEV3('No EV3 device found'),3,,,,,,,,,,
def __init__(self):,3,,,,,,,,,,
self._tempo = song['tempo'],3,,,,,,,,,,
if export:,3,,,,,,,,,,
BEGIN_UPLOAD = b'\x94',3,,,,,,,,,,
"sectors = [s.to_bytes(2, 'big') for s in range(start, end + 1)]",3,,,,range(,,,,,,range(
"""disable cursor setting:i:0"", ""bitmapcachepersistenable:i:1"",",3,,,,,,,,,,
"'Directory for Sentinel-1 data ',",3,,,,,,,,,,
MOD = b'\x02'  # !< Modulo r = fmod(x'y),3,,,,,,,,,,
"flags_set = dict(filter(lambda x: x[1] != 0, self.flags.items()))",3,,,,,,,,,,
speed = cur_mov['speed_left'],3,,,,,,,,,,
b''.join((,3,,,,,,,,,,
'speed  needs to be in range [1 - 100]',3,,,,,,,,,,
assert captured.out == '',3,,,,,,,,,,
GET_HW_VERS = b'\x09',3,,,,,,,,,,
"'|',",3,,,,,,,,,,
"text='Basic Information',",3,,,,,,,,,,
port_str = 'PORT_C',3,,,,,,,,,,
"self.parser.add_argument(""--af"", ""--address-family"", type=str, default=""AF_INET"", help=""the address family to use. The default is None, which causes the address family to use to be inferred from the form of where. If the inference attempt fails, AF_INET is used."")",3,,,,,,,,,,
"rb2=tk.Radiobutton(self, text='no',",3,,,,,,,,,,
self._current_movement['stopped'] = True,3,,,,,,,,,,
class Colors:,3,,,,,,,,,,
elif type == 21:,3,,,,,,,,,,
for i in range (len(data_date)):,3,,,,range (,,,,,,range (
'{:02X}'.format(byte) for byte in reply[5:len_data],3,,,,,,,,,,
"self._physical_ev3._introspection[""sensors""] \",3,,,,,,,,,,
"ops: bytes,",3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in cmd[5:7]) + '|' +,3,,,,,,,,,,
SETUP = b'\x09',3,,,,,,,,,,
"'xx:xx:xx.xxxxxx',",3,,,,,,,,,,
print('Yes clicked.'),3,print('Yes,,,,,,,,,print('Yes
"ramp_up_time: float = 0.15,",3,,,,,,,,,,
TIMES = r'\*',3,,,,,,,,,,
"angle: Number,",3,,,,,,,,,,
opSystem = b'\x60'  # VM,3,,,,,,,,,,
self.resolver = Resolver(),3,,,,,,,,,,
"""value of sync_mode: "" + value + "" is invalid""",3,,,,,,,,,,
WRITE_FLUSH = b'\x01',3,,,,,,,,,,
def network(self) -> str:,3,,,,,,,,,,
'blue',3,,,,,,,,,,
sniffer.sniff(),3,,,,,,,,,,
"'expr TIMES expr',",3,,,,,,,,,,
STOP_ALL = b'\x0D',3,,,,,,,,,,
VALUE16 = b'\x0A',3,,,,,,,,,,
import threading,3,,,,,,,,,,
opLabel = b'\x0D',3,,,,,,,,,,
opSelect32 = b'\x5E',3,,,,,,,,,,
print(module),3,print(module),,,,,,,,,print(module)
DUPLICATE = b'\x05',3,,,,,,,,,,
if not tor.pids():,3,,,,,,,,,,
opDiv32 = b'\x1E',3,,,,,,,,,,
"self.parser.add_argument(""-k"", ""--private-key"", type=argparse.FileType(), default=None, help=""Key for the service to use."")",3,,,,,,,,,,
"kwargs[""end""] = """"",3,,,,,,,,,,
NO_USBSTICK = b'\x0C',3,,,,,,,,,,
WARNING_VOLTAGE = b'\x04',3,,,,,,,,,,
"console.print(f""[!] {type(e).__name__}: ({filename.replace(csf.location, '.')} line #{line} in {function})"", color = ""red"")",3,"print(f""[!]",,,,,,,,,"print(f""[!]"
opCp_LtF = b'\x47',3,,,,,,,,,,
opJr_Lt16 = b'\x65',3,,,,,,,,,,
"""radius_wheel needs to be a number""",3,,,,,,,,,,
"struct.pack('<hh', len(cmd) + 3, msg_cnt),",3,,,,,,,,,,
SICON_BT_ON = b'\x08',3,,,,,,,,,,
opAdd32 = b'\x12',3,,,,,,,,,,
elif branch[0] == 'Until':,3,,,,,,,,,,
"'expr RSHIFT expr',",3,,,,,,,,,,
if branch[0] == 'Number':,3,,,,,,,,,,
break,3,,,,,,,,,,
LED_RED_PULSE = b'\x08',3,,,,,,,,,,
self.dhumVal.setText((data[3]) +  ' %' ),3,,,,,,,,,,
"print(f""[i] Request results for Twitter Username based Person Lookup:"")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
"(""_opt_class"", c_ubyte, 2),",3,,,,,,,,,,
RIGHT_BUTTON = b'\x04',3,,,,,,,,,,
key = key.title(),3,,,,,,,,,,
type_str = 'EV3_GYRO',3,,,,,,,,,,
"__all__ = [""API""]",3,,,,,,,,,,
"config[""query""][""source""] = source",3,,,,,,,,,,
"RawRGBColor = namedtuple('RawRGBColor', [",3,,,,,,,,,,
"ramp_down_time=self._current_movement['ramp_down_time'],",3,,,,,,,,,,
"raise Exception(""No data received ..."")",3,,,,,,,,,,
"if shaft_mmc != ""?"":",3,,,,,,,,,,
help=_ARGS_HELP['run']),3,,,,,,,,,,
"kwargs = {""family"": socket.AF_INET6 if self.arguments.ipv6 else socket.AF_INET,",3,,,,,,,,,,
"self.raw_options = b""""",3,,,,,,,,,,
def decorator(func: Callable):,3,,,,,,,,,,
for i in range (Num_data):,3,,,,range (,,,,,,range (
"shaft_lmc = vin(""Shaft LMC"", ""?"", units=""in"")",3,,,,,,,,,,
"size = int.from_bytes(self._serial_read(1), 'big') + 1",3,,,,,,,,,,
"Network = namedtuple('Network', [",3,,,,,,,,,,
"'B',",3,,,,,,,,,,
opCp_Gt8 = b'\x48',3,,,,,,,,,,
"self.api_id = self.api_secret = """"",3,,,,,,,,,,
num = len(ehs_list),3,,,,,,,,,,
GET_OS_VERS = b'\x03',3,,,,,,,,,,
'speed must be an int value',3,,,,,,,,,,
delta_pos = position - self._current_movement['last_position'],3,,,,,,,,,,
@_(r'\n'),3,,,,,,,,,,
volume: int = None,3,,,,,,,,,,
"(""opt_length"", c_ubyte, 8)]",3,,,,,,,,,,
"speed: int = None,",3,,,,,,,,,,
picon1 = '001-temperature.png',3,,,,,,,,,,
opObject_Wait = b'\x07',3,,,,,,,,,,
"for j in range (i+1,Num_data):",3,,,,range (,,,,,,range (
"self._introspection[""network_mac_adr""],",3,,,,,,,,,,
file_dest = path_dest.split('/')[-1],3,,,,,,,,,,
opCp_NeF = b'\x53',3,,,,,,,,,,
print(),3,print(),,,,,,,,,print()
GET_VERT = b'\x08',3,,,,,,,,,,
self._send_command(self._COMMAND['extended erase']),3,,,,,,,,,,
data = b'',3,,,,,,,,,,
'slow must be a bool',3,,,,,,,,,,
"socket_kinds.add_argument(""--udp"", action = ""store_true"", help = ""Use UDP instead of TCP (SocketKind: SOCK_DGRAM)."")",3,,,,,,,,,,
"ehs_list = sorted(controller.list_ephemeral_hidden_services([], detached=True))",3,,,,,,,,,,
super().close(),3,,,,,,,,,,
"label='Max. day interval',",3,,,,,,,,,,
rest = self._current_movement['target_position'] - current_position,3,,,,,,,,,,
elif op == '>=':,3,,,,,,,,,,
self.cfsearch(self.arguments.search),3,,,,,,,,,,
"self.parser.add_argument(""-s"", ""--api-secret"", type = str, default = """", help = ""Censys API Secret."")",3,,,,,,,,,,
"until_loop_otherwise = self.builder.append_basic_block(""until_loop_otherwise""+str(self.i))",3,,,,,,,,,,
opInput_Device_List = b'\x98',3,,,,,,,,,,
"(""e'"", 2),",3,,,,,,,,,,
GET_FIGURES = b'\x18',3,,,,,,,,,,
"def __new__(self, buffer: bytes = b""""):",3,,,,,,,,,,
"print(""[i] WARNING: server returned more data than it should - server is vulnerable!"", color = ""yellow"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"print('MMC = MAX MATERIAL CONDITION, LMC = LEAST MATERIAL CONDITION')",3,print('MMC,,,,,,,,,print('MMC
"kwargs_cont={'repeat': True, 'volume': volume},",3,,,,,,,,,,
SYSTEM_HANDLE_NOT_READY = b'\x02',3,,,,,,,,,,
"name = self.parser.add_argument_group(""Name Lookup"")",3,,,,,,,,,,
"hexdump(value, prefix, **pkwargs)",3,,,,,,,,,,
"NonECT = 0b00 # Non ECN-Capable Transport, Non-ECT",3,,,,,,,,,,
print(f'Erasing {erase_size} bytes from {args.address}...'),3,print(f'Erasing,,,,,,,,,print(f'Erasing
"filter_type = input(""What layer do you want to filter on? (rtp) "")",3,,,,,,,,,,
"frame.grid(row=2, column=1, sticky='nw', rowspan=8, columnspan=2)",3,,,,,,,,,,
"'speed': speed,",3,,,,,,,,,,
@_('NAME EQ expr'),3,,,,,,,,,,
"print(""    "" + service.permanent_key.replace(""\n"", ""\n    ""), dark = True)",3,"print(""",,,,,,,,,"print("""
POPUP = b'\x1D',3,,,,,,,,,,
"""msg_cnt needs to be of type bytes""",3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in reply[2:4]) +,3,,,,,,,,,,
"assert isinstance(data, bytes), \",3,,,,,,,,,,
print('Error: checksum mismatch!'),3,print('Error:,,,,,,,,,print('Error:
"def volume(self, value: int):",3,,,,,,,,,,
"(""c''"", .5),",3,,,,,,,,,,
WARNSIGN = b'\x08',3,,,,,,,,,,
except TypeError as e:,3,,,,,,,,,,
"'Port_1',",3,,,,,,,,,,
opOutput_Set_Type = b'\xA1',3,,,,,,,,,,
self.setWindowTitle('Biology Experiment'),3,,,,,,,,,,
ev3.LCS('Bernie'),3,,,,,,,,,,
YES_NOTSEL = b'\x00',3,,,,,,,,,,
file = os.path.abspath(file),3,,,,,,,,,,
"print(f""{prefix}{obj}"", **pkwargs)",3,"print(f""{prefix}{obj}"",",,,,,,,,,"print(f""{prefix}{obj}"","
"btn=tk.Button(self, text="" Next >"",command=lambda:Save())",3,,,,,,,,,,
"""ramp_down must be positive""",3,,,,,,,,,,
'temperament needs to be an int',3,,,,,,,,,,
pygments_style = 'sphinx',3,,,,,,,,,,
groupStyle = ''',3,,,,,,,,,,
"touched = struct.unpack('<f', reply[:4])[0]",3,,,,,,,,,,
"ramp_up_time: float = None,",3,,,,,,,,,,
class SNMPPrint(Program):,3,,,,,,,,,,
GRAPH_DRAW = b'\x1F',3,,,,,,,,,,
"""direct command {:02X}:{:02X} replied error"".format(",3,,,,,,,,,,
"console.print(f""    {repr(text)}"", color = ""red"", dark = True, parse = False)",3,"print(f""",,,,,,,,,"print(f"""
GUI_SLOT = b'\x00',3,,,,,,,,,,
"resolver.use_edns(arguments.get(""edns""), arguments.get(""edns_flags""), arguments.get(""edns_payload""))",3,,,,,,,,,,
"self.parser.add_argument(""--tcp"", action=""store_true"", help=""Use TCP to make the query."")",3,,,,,,,,,,
elif branch[0] == 'Name':,3,,,,,,,,,,
"'write memory': 0x31,",3,,,,,,,,,,
"for name, rdtype in self.rdtypes.items():",3,,,,,,,,,,
"""rdtype"", ""rdclass"", ""address-family"",",3,,,,,,,,,,
"'extended erase': 0x44,",3,,,,,,,,,,
"self.title(""GMTSAR for Sentinel-1 SAR processing"")",3,,,,,,,,,,
"string = """"",3,,,,,,,,,,
"console.print(f""    {repr(text)}"", color = ""red"", dark = True, parse = False)",3,"print(f""",,,,,,,,,"print(f"""
ignore = ' \t\r',3,,,,,,,,,,
"0x85: ""FC"",        0x8A: ""manet"",       0x87: ""Mobility Header"",",3,,,,,,,,,,
transports = self.parser.add_mutually_exclusive_group(),3,,,,,,,,,,
GET_STRING = b'\x08',3,,,,,,,,,,
PORT_4 = b'\x03',3,,,,,,,,,,
USER_SLOT = b'\x01',3,,,,,,,,,,
"hs = tor.HiddenService(address, controller)",3,,,,,,,,,,
""" when reading file "" +",3,,,,,,,,,,
"inpt = input().encode(""ascii"")",3,,,,,,,,,,
"pcap = input(""Enter the name of your pcap file in this folder: "")",3,,,,,,,,,,
"self.parser.add_argument(""-w"", ""--where"", type=str, default="""", help=""String containing an IPv4 or IPv6 address where to send the message."")",3,,,,,,,,,,
"assert sync_mode is None or isinstance(sync_mode, str), \",3,,,,,,,,,,
DATA_S = b'\x04'  # Zero terminated string,3,,,,,,,,,,
SIN = b'\x0B'  # !<,3,,,,,,,,,,
"assert isinstance(value, int), ""port needs to be of type int""",3,,,,,,,,,,
winIcon1 = 'ico-bio.png',3,,,,,,,,,,
"references = {""CVE"": ""CVE-2014-0160""}",3,,,,,,,,,,
"LCS(path + '.rsf'),",3,,,,,,,,,,
"group.add_argument(""address"", type = str, help = ""Target hostname or address."")",3,,,,,,,,,,
"print(f""    - Organization: {info['org']}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"'expr GT expr',",3,,,,,,,,,,
"radius: Number,",3,,,,,,,,,,
"self._introspection[""network_name""],",3,,,,,,,,,,
"assert isinstance(value, int), ""polarity_left needs to be of type int""",3,,,,,,,,,,
"""secure needs to be of type bool""",3,,,,,,,,,,
"def list(self, folder: str, debug: bool = True):",3,,,,,,,,,,
"for record in sorted(answer, key = lambda x: dns.rdatatype.to_text(x.rdtype)):",3,,,,,,,,,,
"edTxt2.config(state=""readonly"")",3,,,,,,,,,,
ports[int(port)] = int(port),3,,,,,,,,,,
"answer = self.metaquery(host, ""ANY"", **kwargs).answer if kwargs.pop(""any"") else None",3,,,,,,,,,,
"""port_right needs to be one of (PORT_A, PORT_B, PORT_C, PORT_D)""",3,,,,,,,,,,
opMul16 = b'\x19',3,,,,,,,,,,
"self.parser.add_argument(""--filename"", type=argparse.FileType(""r""), help=""The filename of a configuration file in standard /etc/resolv.conf format. This parameter is meaningful only when I{configure} is true and the platform is POSIX."")",3,,,,,,,,,,
"def check_sum(data, udp: bool = False):",3,,,,,,,,,,
elif op == '>>':,3,,,,,,,,,,
"(""a'"", 2),",3,,,,,,,,,,
SICON_USB = b'\x15',3,,,,,,,,,,
SMALL_ICON = b'\x01',3,,,,,,,,,,
"def change_color(self, led_pattern: bytes) -> None:",3,,,,,,,,,,
tmp=Dir_EOF+'/'+S1AB+'*'+info1+'*'+info2+'*',3,,,,,,,,,,
if message[-1] in termcolor.COLORS.keys():,3,,,,,,,,,,
DOWNLOAD_END = b'\x0F',3,,,,,,,,,,
ICON_TRASHBIN = b'\x0D',3,,,,,,,,,,
"""led_sequence"": (",3,,,,,,,,,,
"kwargs_stop={'brake': False},",3,,,,,,,,,,
'erase': 'Erase memory enough to store firmware',3,,,,,,,,,,
"command=lambda: self.controller.show_frame(""Step0""))",3,,,,,,,,,,
"0x33: ""AH"",        0x34: ""I-NLSP"",      0x35: ""SWIPE"",",3,,,,,,,,,,
"print(""Shaft MMC = {0} in"".format(str(round(shaft_mmc,4))))",3,"print(""Shaft",,,,,,,,,"print(""Shaft"
"""can't continue unstopped movement""",3,,,,,,,,,,
"self._introspection[""network_ip_adr""]",3,,,,,,,,,,
"print(f""[i] There {'is' if num == 1 else 'are'} {num or 'no'} ephemeral hidden service{'' if num == 1 else 's'} running at the momment."")",3,"print(f""[i]",,,,,,,,,"print(f""[i]"
rdata += data,3,,,,,,,,,,
"__all__ = [""Session"", ""parse""]",3,,,,,,,,,,
SICON_WAIT1 = b'\x06',3,,,,,,,,,,
"print(f"" -  {exception}"", color = ""red"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
"newzone = str(vin(""Target timezone [UTC]"", ""UTC""))",3,,,,,,,,,,
self._current_movement['last_time'] = now,3,,,,,,,,,,
"temperament:int = 440,",3,,,,,,,,,,
"(zone, where, port,",3,,,,,,,,,,
for port in self.arguments.ports:,3,,,,,,,,,,
self._current_movement['target_position'],3,,,,,,,,,,
self._send_command(self._COMMAND['go']),3,,,,,,,,,,
"self._physical_ev3._introspection[""volume""] = value",3,,,,,,,,,,
help='Serial port file (for example: /dev/ttyUSB0).'),3,,,,,,,,,,
opInput_ReadSI = b'\x9D',3,,,,,,,,,,
WARNING_CURRENT = b'\x02',3,,,,,,,,,,
SICON_WIFI_3 = b'\x0C',3,,,,,,,,,,
@_('statements statement'),3,,,,,,,,,,
"hexdump(value, prefix, **pkwargs)",3,,,,,,,,,,
"help=' '.join([_ARGS_HELP['address'], 'erasing.']))",3,,,,,,,,,,
"self.parser.add_argument(""-eF"", ""--edns-flags"", type=int, help=""The EDNS flags."")",3,,,,,,,,,,
except Exception as e:,3,,,,,,,,,,
GET_STATUS = b'\x16',3,,,,,,,,,,
"'red',",3,,,,,,,,,,
"info=[  'Processing directory ',",3,,,,,,,,,,
"if ""upbeat"" in song:",3,,,,,,,,,,
text='Problems:'),3,,,,,,,,,,
"folders.append(line.rstrip(b'\x2F').decode(""utf8""))",3,,,,,,,,,,
"address = address if address else int(memory_map[0]['address'], 0)",3,,,,,,,,,,
"if value != self._physical_ev3._introspection[""sleep""]:",3,,,,,,,,,,
templates_path = ['_templates'],3,,,,,,,,,,
if type == 22 and payload[0] == 0x0E:,3,,,,,,,,,,
"command=lambda: self.controller.show_frame(""Step1""))",3,,,,,,,,,,
"person.add_argument(""--macromeasures"", action = ""store_true"", help = ""Power the Person API's ability for providing affinity data about individuals."")",3,,,,,,,,,,
"print(""[i] Sending heartbeat request ..."")",3,"print(""[i]",,,,,,,,,"print(""[i]"
"folder = path.rsplit(""/"", 1)[1]",3,,,,,,,,,,
BROWSE = b'\x0E',3,,,,,,,,,,
opCom_Remove = b'\xD6',3,,,,,,,,,,
ICON_VISIBILITY = b'\x0E',3,,,,,,,,,,
"self._introspection[""sensors""][ports[i]] = {",3,,,,,,,,,,
"""value of sync_mode: "" + sync_mode + "" is invalid""",3,,,,,,,,,,
ICON_CONNECT = b'\x10',3,,,,,,,,,,
"self.parser.add_argument(""-x"", ""--proxy"", default="""", type=str, help=""Proxify session through this proxy ('proto://a.ddr.es.s:port/') ..."")",3,,,,,,,,,,
"raise DirCmdError(""Folder "" + path + "" doesn't exist"")",3,,,,,,,,,,
""" when writing file "" +",3,,,,,,,,,,
class Program(base.Program):,3,,,,,,,,,,
super().__init__(f'Acknowledge error (dfu response: {response}'),3,,,,,,,,,,
"value = self.builder.icmp_signed('!=',lhs,rhs)",3,,,,,,,,,,
os.makedirs('raw'),3,,,,,,,,,,
'path needs to be of type str',3,,,,,,,,,,
"back: bool = False,",3,,,,,,,,,,
def reflected(self) -> int:,3,,,,,,,,,,
"'searchbox.html',",3,,,,,,,,,,
"""Can't erase specified size of memory without memory map."")",3,,,,,,,,,,
LED_RR = b'\x01'  # Right red,3,,,,,,,,,,
ICON_OBD = b'\x20',3,,,,,,,,,,
def _abort(bar_thread: ProgressBarThread = None) -> NoReturn:,3,,,,,,,,,,
opXor16 = b'\x29',3,,,,,,,,,,
"value = self.builder.icmp_signed('>=',lhs,rhs)",3,,,,,,,,,,
SEARCH_ITEM = b'\x09',3,,,,,,,,,,
Tor = tor.Tor(),3,,,,,,,,,,
"'op': 'Time_Speed',",3,,,,,,,,,,
'''Show a frame for the given page name''',3,,,,,,,,,,
"""tones"": (",3,,,,,,,,,,
"elif tone.startswith(""f""):",3,,,,,,,,,,
opObject_Stop = b'\x04',3,,,,,,,,,,
BMPFILE = b'\x1C',3,,,,,,,,,,
"print(""\x1B\x5BH"", end="""")",3,"print(""\x1B\x5BH"",",,,,,,,,,"print(""\x1B\x5BH"","
FLUSH = b'\x04',3,,,,,,,,,,
port_str = 'PORT_D',3,,,,,,,,,,
"(""c'"", 4)",3,,,,,,,,,,
"""turn needs to be in range [-200 - 200]""",3,,,,,,,,,,
UPDATE = b'\x00',3,,,,,,,,,,
_control: bool = False,3,,,,,,,,,,
'path needs to be a str',3,,,,,,,,,,
opSelect8 = b'\x5C'  # SELECT,3,,,,,,,,,,
ICON_OBP = b'\x1F',3,,,,,,,,,,
"payload = self.recvall(sock, ln, 10)",3,,,,,,,,,,
ASIN = b'\x0E'  # !<,3,,,,,,,,,,
SET_PIN = b'\x05',3,,,,,,,,,,
if hdr is None:,3,,,,,,,,,,
self._send_command(self._COMMAND['read memory']),3,,,,,,,,,,
ops_move = b''.join((,3,,,,,,,,,,
"btn_create=tk.Button(self, text=""Create"", command=Create)",3,,,,,,,,,,
SMALL_FONT = b'\x01',3,,,,,,,,,,
"print(""[!] Server closed connection without sending Server Hello."", color = ""red"")",3,"print(""[!]",,,,,,,,,"print(""[!]"
"self.parser.add_argument(""-t"", ""--timeout"", type=int, default=None, help=""The number of seconds to wait for each response message."")",3,,,,,,,,,,
"""local_mem has a maximum of 63""",3,,,,,,,,,,
GET_VERSION = b'\x1A',3,,,,,,,,,,
def battery(self) -> Battery:,3,,,,,,,,,,
def rate(self) -> int:,3,,,,,,,,,,
opAnd16 = b'\x25',3,,,,,,,,,,
'brake must be a boolean',3,,,,,,,,,,
"if __name__ == ""__main__"":",3,,,,,,,,,,
LARGE_FONT = b'\x02',3,,,,,,,,,,
),3,,,,,,,,,,
"'direction': direction,",3,,,,,,,,,,
opOutput_Time_Speed = b'\xAF',3,,,,,,,,,,
def polarity_left(self) -> int:,3,,,,,,,,,,
path = '../prjs/sound/tmp',3,,,,,,,,,,
"ct = response.headers.get(""Content-Type"", ""text/html"").split("";"")[0]",3,,,,,,,,,,
self._current_movement['last'] = True,3,,,,,,,,,,
"self.controller.show_frame(""Step2"")",3,,,,,,,,,,
"""white_balance takes exactly 3 color values""",3,,,,,,,,,,
"print(""[!] Keyboard Interrupted!"", color = ""red"")",3,"print(""[!]",,,,,,,,,"print(""[!]"
"s = f""{(' ' * (len(string)+1)) if extra else ''}{name}: """,3,,,,,,,,,,
},3,,,,,,,,,,
chunk = sock.recv(0xFFF),3,,,,,,,,,,
"kwargs = {k: arguments.get(k) for k in [""rdtype"", ""rdclass"", ""tcp"", ""source"", ""source_port""]}",3,,,,,,,,,,
"(master_doc, 'ev3_dc', 'ev3_dc Documentation',",3,,,,,,,,,,
info=Dir_image+'/*'+data_date[i]+'*',3,,,,,,,,,,
"md5.decode(""utf8"")",3,,,,,,,,,,
opJr_Eq32 = b'\x6E',3,,,,,,,,,,
splash_pic1 = '12.jpg',3,,,,,,,,,,
REPEAT = b'\x03',3,,,,,,,,,,
"def erase(self, address: int = None, size: int = None,",3,,,,,,,,,,
"f'\r[{""█""*self._complete_len(progress)}'",3,,,,,,,,,,
import tkinter.font as tkFont,3,,,,,,,,,,
"""ramp_up_time must be positive""",3,,,,,,,,,,
ICON_LOCK = b'\x02',3,,,,,,,,,,
"splash_pic = resource_path(os.path.join('src', splash_pic1))",3,,,,,,,,,,
"'parity': 'E',",3,,,,,,,,,,
for address in ehs_list:,3,,,,,,,,,,
"print(f""[!] {type(e).__name__}:"", color = ""red"")",3,"print(f""[!]",,,,,,,,,"print(f""[!]"
opJr_Eq8 = b'\x6C',3,,,,,,,,,,
"if file.endswith("".zip""):",3,,,,,,,,,,
"System = namedtuple('System', [",3,,,,,,,,,,
"hexdump(payload, prefix = ""    "")",3,,,,,,,,,,
for i in range (len(date_list)):,3,,,,range (,,,,,,range (
RBRACE = r'\}',3,,,,,,,,,,
"print(f'\r[{""█""*self._BAR_MAX_LEN}] done.')",3,"print(f'\r[{""█""*self._BAR_MAX_LEN}]",,,,,,,,,"print(f'\r[{""█""*self._BAR_MAX_LEN}]"
opOutput_Time_Power = b'\xAD',3,,,,,,,,,,
COS = b'\x0C'  # !<,3,,,,,,,,,,
"def _perform_erase(self, parameters: bytes) -> NoReturn:",3,,,,,,,,,,
"def load_file(self, path_source: str, path_dest: str, *, check: bool = True) -> None:",3,,,,,,,,,,
"resolver.set_flags(arguments.get(""flags""))",3,,,,,,,,,,
"run_command.add_argument('-a', '--address', default='0x8000000',",3,,,,,,,,,,
self._send_command(self._COMMAND['get version and protection status']),3,,,,,,,,,,
"'step3_left': step3_left,",3,,,,,,,,,,
"'ramp_up': ramp_up,",3,,,,,,,,,,
except Exception as e:,3,,,,,,,,,,
opProbe = b'\x0E',3,,,,,,,,,,
"self._introspection[""network_mac_adr""] = ':'.join(",3,,,,,,,,,,
"return data.decode(""utf-8"", errors=""replace"")",3,,,,,,,,,,
"self._introspection[""os_vers""] = os_vers.split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
for i in range (len(self.polar_tmp)):,3,,,,range (,,,,,,range (
MERGE = b'\x13',3,,,,,,,,,,
"'<IB',",3,,,,,,,,,,
UNPACK = b'\x16',3,,,,,,,,,,
if not data:,3,,,,,,,,,,
"zone = dns.zone.from_xfr(dns.query.xfr(**config[""query""]), **config[""zone""]).to_text()",3,,,,,,,,,,
if page.ul:,3,,,,,,,,,,
SET_PASSKEY = b'\x06',3,,,,,,,,,,
"0x51: ""VMTP"",      0x52: ""SECURE-VMTP"", 0x53: ""VINES"",",3,,,,,,,,,,
"author, 'ev3_dc', 'One line description of project.',",3,,,,,,,,,,
GET_HORZ = b'\x07',3,,,,,,,,,,
for value in obj:,3,,,,,,,,,,
"0x76: ""STP"",       0x77: ""SRP"",         0x78: ""UTI"",",3,,,,,,,,,,
@_('STRING'),3,,,,,,,,,,
"label.grid(row=2*i+1,column=0, sticky='w')",3,,,,,,,,,,
"slow: bool = None,",3,,,,,,,,,,
"print(""    "" + ehs.permanent_key.replace(""\n"", ""\n    ""), dark=True)",3,"print(""",,,,,,,,,"print("""
"func = ir.Function(self.module, fnty, 'printf')",3,,,,,,,,,,
"self._introspection[""network_mac_adr""][i:i+2]",3,,,,,,,,,,
opCp_Eq8 = b'\x4C',3,,,,,,,,,,
get_id_command = commands.add_parser('id'),3,,,,,,,,,,
"(""c''"", 3)",3,,,,,,,,,,
"hosts.add(host[""ip""])",3,,,,,,,,,,
"'double':ir.DoubleType(),",3,,,,,,,,,,
"help=' '.join([_ARGS_HELP['size'], 'erased.']))",3,,,,,,,,,,
key = key[0].upper() + key[1:],3,,,,,,,,,,
"kwargs = {k: arguments.get(k) for k in [""timeout"", ""port"", ""source"", ""source_port"", ""one_rr_per_rrset""]}",3,,,,,,,,,,
"source_suffix = ['.rst', '.md']",3,,,,,,,,,,
local: bool = False,3,,,,,,,,,,
def beacon(self) -> Beacon:,3,,,,,,,,,,
"""freq needs to be in range [250 - 10000]""",3,,,,,,,,,,
"def copy_file(self, path_source: str, path_dest: str) -> None:",3,,,,,,,,,,
version = '0.9',3,,,,,,,,,,
TST_BOOT_MODE2 = b'\x14',3,,,,,,,,,,
ICON_KEY = b'\x0F',3,,,,,,,,,,
"GyroState = namedtuple('GyroState', [",3,,,,,,,,,,
"assert self._rgb_white_balance_raw is not None, ""no white_balance done""",3,,,,,,,,,,
"self._introspection[""fw_vers""] = fw_vers.split(b'\x00')[0].decode(""utf8"")",3,,,,,,,,,,
"'permanent',",3,,,,,,,,,,
"erase_command.add_argument('-s', '--size', default=None,",3,,,,,,,,,,
"os.link(path_s1a_cal,'s1a-aux-cal.xml')",3,,,,,,,,,,
"self._current_movement['target_position'],",3,,,,,,,,,,
"actions.add_argument(""-l"", ""-cfl"", ""--list"", metavar=""CFL-ID"", type=str, help=""List CloudFlare domains using the specified Direct-Connect IP Address ..."")",3,,,,,,,,,,
"def polarity_right(self, value: int):",3,,,,,,,,,,
"path: str,",3,,,,,,,,,,
socket.add_argument_group(self.parser),3,,,,,,,,,,
'led_pattern must be of type bytes',3,,,,,,,,,,
load_command = commands.add_parser('load'),3,,,,,,,,,,
'unlimited' in self._current_movement,3,,,,,,,,,,
port = url.port or socket.getservbyname(url.scheme),3,,,,,,,,,,
"self.parser.add_argument(""-o"", ""--output"", type=argparse.FileType(""w""), help=""Output file (defaults to '{target}-{port}.rdp')."")",3,,,,,,,,,,
@_('expr'),3,,,,,,,,,,
_print = print,3,,,,,,,,,,
"text='Step 2. Processing (DInSAR)',",3,,,,,,,,,,
"value,Type = branch[1]['value'],self.type_map['float']",3,,,,,,,,,,
BROWSE_CACHE = b'\x02'  # cached / recent files,3,,,,,,,,,,
cur_mov['speed_right'] = speed,3,,,,,,,,,,
PORT_1 = b'\x00',3,,,,,,,,,,
"def load(self, dfu: Stm32UartDfu, args: argparse.Namespace) -> NoReturn:",3,,,,,,,,,,
"def name(self, value: str):",3,,,,,,,,,,
"def __init__(self, address: str = """", **kwargs):",3,,,,,,,,,,
"int(memory_map[-1]['size'], 0) - address)",3,,,,,,,,,,
NAME['return'] = RETURN,3,,,,,,,,,,
where = zone,3,,,,,,,,,,
DATA_8 = b'\x00'  # DATA8 (don't change),3,,,,,,,,,,
except Exception as e:,3,,,,,,,,,,
"self.parser.add_argument(""-o"", ""--output"", type = argparse.FileType(""wb""), default = sys.stdout.buffer, help = ""Output file."")",3,,,,,,,,,,
return b''.join((,3,,,,,,,,,,
"def __init__(self, expected: int, actual: int):",3,,,,,,,,,,
"def bumps(self, value: int):",3,,,,,,,,,,
'readout unprotect': 0x92,3,,,,,,,,,,
from core.modules.console import print,3,,,,,,,,,,
"tread: Number,",3,,,,,,,,,,
elif branch[0] == 'Return':,3,,,,,,,,,,
class SerialWrapper1:,3,,,,,,,,,,
"def __init__(self, endless: bool = False):",3,,,,,,,,,,
"0x36: ""NARP"",      0x37: ""MOBILE"",      0x38: ""TLSP"",",3,,,,,,,,,,
g.write('\nintf_tops.csh intf.in batch_tops.config\n'),3,,,,,,,,,,
MOD16 = b'\x12'  # !< Modulo DATA16 r = x % y,3,,,,,,,,,,
':'.join('{:02X}'.format(byte) for byte in cmd[4:5]) + '|' +,3,,,,,,,,,,
opStrings = b'\x7D',3,,,,,,,,,,
"elif ct.split(""/"")[0] == ""text"" and ct.endswith(""html""):",3,,,,,,,,,,
'volume must be between 0 and 100',3,,,,,,,,,,
"'ramp_down_time': ramp_down_time,",3,,,,,,,,,,
"cmd: bytes,",3,,,,,,,,,,
"print(""[i] Received alert:"")",3,"print(""[i]",,,,,,,,,"print(""[i]"
'used_by': None,3,,,,,,,,,,
"kwargs = {v: arguments.get(k) for k, v in {""rdclass"": ""rdclass"", ""edns"": ""use_edns"", ""want_dnssec"": ""want_dnssec"", ""edns_flags"": ""ednsflags"", ""edns_payload"": ""request_payload""}.items()}",3,,,,,,,,,,
"'get id': 0x02,",3,,,,,,,,,,
"actions.add_argument(""-s"", ""--stats"", type = str, metavar = ""period"", const = """", nargs = ""?"", help = ""Query FullContact to view your API account usage for the current month or a previous month defined by you. The format is YYYY-MM (e.g: --stats 2017-10)."")",3,,,,,,,,,,
GRAPH_SETUP = b'\x1E',3,,,,,,,,,,
def header(size: int) -> bytes:,3,,,,,,,,,,
"console.print(f""[!] Keyboard Interrupted!"", color = ""red"")",3,"print(f""[!]",,,,,,,,,"print(f""[!]"
"repeat: bool = False,",3,,,,,,,,,,
if platform.system() == 'Darwin':,3,,,,,,,,,,
progress_update: Callable = lambda *_: None):,3,,,,,,,,,,
"import argparse, sys, os",3,,,,,,,,,,
"'64s',",3,,,,,,,,,,
"""ops needs to be of type bytes""",3,,,,,,,,,,
"load_command.add_argument('-m', '--memory-map', default=None,",3,,,,,,,,,,
"('left', LSHIFT, RSHIFT),",3,,,,,,,,,,
[port_motor_input(self._port_left)]['used_by'] = self,3,,,,,,,,,,
elif sys.platform.startswith('darwin'):,3,,,,,,,,,,
LED_RED = b'\x02',3,,,,,,,,,,
SIZE = b'\x0C',3,,,,,,,,,,
"output += ""\n"" + prefix",3,,,,,,,,,,
class Whois(Program):,3,,,,,,,,,,
def port(self) -> bytes:,3,,,,,,,,,,
opInput_Ready = b'\x9C',3,,,,,,,,,,
"print(f"" -  Publish Date & Time: {service.published}"")",3,"print(f""",,,,,,,,,"print(f"""
LN = b'\x0A'  # !< Ln r = log(x),3,,,,,,,,,,
ops = b''.join((,3,,,,,,,,,,
'''reads busy state of motors (returns operations),3,,,,,,,,,,
'EV3_TOUCH' if self.sensors_as_dict[self._port] == EV3_TOUCH,3,,,,,,,,,,
"""Module"": ""@blackviruscript""}",3,,,,,,,,,,
"'fw_build',",3,,,,,,,,,,
"super().__init__(address or socket.gethostname(), family = socket.AF_INET6 if ipv6 else socket.AF_INET, **kwargs)",3,,,,,,,,,,
input_prompt = prompt + ' [' + str(defvalue) + '] ? ',3,,,,,,,,,,
"self.ecn = ""Non-ECT"" if self.raw_ecn is 0 else (""ECT(0)"" if self.raw_ecn is 2 else (""ECT(1)"" if self.raw_ecn is 1 else ""CE""))",3,,,,,,,,,,
"(""c''"", 1),",3,,,,,,,,,,
HALTED = b'\x80',3,,,,,,,,,,
def ramp_up(self) -> int:,3,,,,,,,,,,
'path_source needs to be of type str',3,,,,,,,,,,
"self.config = {""SocksPort"": 9150, ""ControlPort"": 9151}",3,,,,,,,,,,
"self.headers[""X-FullContact-APIKey""] = key",3,,,,,,,,,,
"file.write(""\n"".join([""screen mode id:i:2"", ""use multimon:i:0"", ""desktopwidth:i:800"",",3,,,,,,,,,,
ops = b''.join((,3,,,,,,,,,,
"super().__init__(*args, **kwargs)",3,,,,,,,,,,
PORT_B_SENSOR = b'\x11',3,,,,,,,,,,
"""speed needs to be positive""",3,,,,,,,,,,
"""volume needs to be in range [0 - 100]""",3,,,,,,,,,,
CONTINUE_LIST_FILES = b'\x9A',3,,,,,,,,,,
"r'Protocol: (\w+)',",3,,,,,,,,,,
def version(self) -> bytes:,3,,,,,,,,,,
"load_command.add_argument('-e', '--erase', action='store_true',",3,,,,,,,,,,
"print(f"" -  Publish Date & Time: {ehs.published}"")",3,"print(f""",,,,,,,,,"print(f"""
sensor_str = 'NXT_Color',3,,,,,,,,,,
OPEN_WRITE = b'\x02',3,,,,,,,,,,
GET_LOG_NAME = b'\x19',3,,,,,,,,,,
"Tor.start(False, "" -  "")",3,,,,,,,,,,
"ax1.legend(loc=""upper left"")",3,,,,,,,,,,
target_pos_outer = cur_mov['target_motor_pos'][0],3,,,,,,,,,,
opJr_Gt32 = b'\x6A',3,,,,,,,,,,
EQ = r'=',3,,,,,,,,,,
"picon = resource_path(os.path.join('src', picon1))",3,,,,,,,,,,
print('error File'),3,print('error,,,,,,,,,print('error
raise SensorError('rgb works only with EV3 color sensor'),3,,,,,,,,,,
SPLIT = b'\x12',3,,,,,,,,,,
"'step1_right': step1_right,",3,,,,,,,,,,
transport = Udp6TransportTarget if self.arguments.udp6 else (UnixTransportTarget if self.arguments.unix else UdpTransportTarget),3,,,,,,,,,,
PIXEL = b'\x02',3,,,,,,,,,,
"print(f"" -  Descriptor Version: {ehs.version}"")",3,"print(f""",,,,,,,,,"print(f"""
"if proxy.password: kwargs[""password""] = proxy.password",3,,,,,,,,,,
data = sock.recv(remain),3,,,,,,,,,,
"def cflist(self, cfl_id: str):",3,,,,,,,,,,
"print(f"" -  Extended Identifier [EI]:            {mac.ei}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
"print(f"" -  Extended Unique Identifier 64:       {mac.eui64()}"", dark=True)",3,"print(f""",,,,,,,,,"print(f"""
READ_TEXT = b'\x05',3,,,,,,,,,,
"assert isinstance(val, Number), ""white_balance must be 3 numbers""",3,,,,,,,,,,
"*message, color = message",3,,,,,,,,,,
word = word[index:],3,,,,,,,,,,
project = 'ev3_dc',3,,,,,,,,,,
"console.print(f"" -  {e}"", color = ""red"", dark = True)",3,"print(f""",,,,,,,,,"print(f"""
CREATE8 = b'\x01',3,,,,,,,,,,
"port: bytes,",3,,,,,,,,,,
"self.parser.add_argument(""zone"", type=str, help=""The name of the zone to transfer."")",3,,,,,,,,,,
"(""f'"", 2)",3,,,,,,,,,,
"person.add_argument(""--stylesheet"", type = str, metavar = ""url"", default = """", help = ""CSS file used to customize the look of person.html."")",3,,,,,,,,,,
"0x1B: ""RDP"",       0x1C: ""IRTP"",        0x1D: ""ISO-TP4"",",3,,,,,,,,,,
"if value != self._physical_ev3._introspection[""volume""]:",3,,,,,,,,,,
def group(*choices): return '(' + '|'.join(choices) + ')',3,,,,,,,,,,
'right',3,,,,,,,,,,
raise AttributeError('unknown tone: ' + tone),3,,,,,,,,,,
BREAK = b'\x00',3,,,,,,,,,,
"def ramp_up_time(self, value: Number):",3,,,,,,,,,,
"print(""    - "" + id.split(""/"")[-1], dark=True)",3,"print(""",,,,,,,,,"print("""
kwargs={'brake': brake},3,,,,,,,,,,
print('NOTE: Clearance = Loosest fit & Allowance = tighest fit'),3,print('NOTE:,,,,,,,,,print('NOTE:
RECT = b'\x0A',3,,,,,,,,,,
"with open(request.param, 'rb') as fw:",3,,,,,,,,,,
"return ('Def',{'name':name,'return':ret,'body':body, 'def_params':def_params if def_params else []})",3,,,,,,,,,,
TESTSHORTPRESS = b'\x0C',3,,,,,,,,,,
_DIRECT_COMMAND_REPLY = b'\x00',3,,,,,,,,,,
LED_GREEN_FLASH = b'\x04',3,,,,,,,,,,
self._current_movement['last_position'] = position,3,,,,,,,,,,
"int(sector['address'], 0) + int(sector['size'], 0))",3,,,,,,,,,,
opReadF = b'\xCB',3,,,,,,,,,,
self.refreshButton = QPushButton('Refresh Port'),3,,,,,,,,,,
"def update(self, progress: int = None) -> NoReturn:",3,,,,,,,,,,
"print(""Clearance = {0} in"".format(str(round(clearance,4))))",3,"print(""Clearance",,,,,,,,,"print(""Clearance"
"""global_mem needs to be an integer""",3,,,,,,,,,,
"phone = self.parser.add_argument_group(""Phone Lookup"")",3,,,,,,,,,,
if err != b'':,3,,,,,,,,,,
"""led_sequence"": (LED_ORANGE, LED_RED_FLASH),",3,,,,,,,,,,
Expfloat = r'[0-9](?:_?[0-9])*' + Exponent,3,,,,,,,,,,
data.decode('utf-8'),3,,,,,,,,,,
"erase_command.add_argument('-m', '--memory-map', default=None,",3,,,,,,,,,,
"pprint(value, depth + 1, excluded_keys, pretty_keys, **pkwargs)",3,,,,,,,,,,
TST_READ_ADC = b'\x0E',3,,,,,,,,,,
except TypeError as e:,3,,,,,,,,,,
"(""g'"", 2)",3,,,,,,,,,,
ICON_BRICK = b'\x05'  # Bluetooth type BRICK,3,,,,,,,,,,
'{:02X}'.format(,3,,,,,,,,,,
Octnumber = r'0[oO](?:_?[0-7])+',3,,,,,,,,,,
